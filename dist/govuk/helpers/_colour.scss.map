{"version":3,"sources":["../../../src/govuk/helpers/_colour.scss"],"names":[],"mappings":"AAAA,qCAAqC;AACrC,2CAA2C;AAC3C,8BAA8B;;AAE9B,GAAG;AACH,wBAAwB;AACxB,GAAG;;AAEH,aAAa;AACb,EAAE;AACF,4EAA4E;AAC5E,uBAAuB;AACvB,mEAAmE;AACnE,yEAAyE;AACzE,6EAA6E;AAC7E,4BAA4B;AAC5B,kDAAkD;AAClD,EAAE;AACF,8DAA8D;AAC9D,iBAAiB;;AAEjB;EACE,iDAAiD;EACjD;IACE;;yCAEqC;EACvC;;EAEA;IACE,0EAA0E;IAC1E,4BAA4B;EAC9B;;EAEA;IACE,oCAAoC;EACtC;;EAEA,wCAAwC;AAC1C;;AAEA,+CAA+C;AAC/C,EAAE;AACF,2EAA2E;AAC3E,2EAA2E;AAC3E,+EAA+E;AAC/E,4EAA4E;AAC5E,8EAA8E;AAC9E,0DAA0D;AAC1D,EAAE;AACF,6DAA6D;AAC7D,wDAAwD;AACxD,iBAAiB;;AAEjB;EACE;IACE,gDAAgD;EAClD;;EAEA,iEAAiE;;EAEjE;IACE,4CAA4C;EAC9C,EAAE;IACA,oCAAoC;EACtC;AACF;;AAEA,+CAA+C;AAC/C,EAAE;AACF,4CAA4C;AAC5C,wEAAwE;AACxE,mBAAmB;AACnB,iBAAiB;;AAEjB;EACE,0CAA0C;AAC5C;;AAEA,gDAAgD;AAChD,EAAE;AACF,2CAA2C;AAC3C,wEAAwE;AACxE,mBAAmB;AACnB,iBAAiB;;AAEjB;EACE,wDAAwD;AAC1D","file":"_colour.scss","sourcesContent":["@import \"../settings/colours-palette\";\n@import \"../settings/colours-organisations\";\n@import \"../settings/warnings\";\n\n////\n/// @group helpers/colour\n////\n\n/// Get colour\n///\n/// @param {String | Colour} $colour - Name of colour from the colour palette\n///   (`$govuk-colours`)\n/// @param {String | Colour | Boolean} $legacy [false] - Deprecated.\n///   The `$legacy` parameter is deprecated and is non-operational, as the\n///   legacy colour palette has been removed. The parameter will be removed in\n///   the next major version.\n/// @return {Colour} Representation of named colour\n///\n/// @throw if `$colour` is not a colour from the colour palette\n/// @access public\n\n@function govuk-colour($colour, $legacy: false) {\n  // Output a warning if $legacy is set to anything.\n  @if $legacy and _should-warn(\"legacy-colour-param\") {\n    @warn _warning-text(\"legacy-colour-param\", \"The `$legacy` parameter of \" +\n    \"`govuk-colour` is deprecated and is non-operational. It will be \" +\n    \"removed in the next major version.\");\n  }\n\n  @if type-of($colour) == \"color\" {\n    // stylelint-disable-next-line scss/function-quote-no-quoted-strings-inside\n    $colour: quote(\"#{$colour}\");\n  }\n\n  @if not map-has-key($govuk-colours, $colour) {\n    @error \"Unknown colour `#{$colour}`\";\n  }\n\n  @return map-get($govuk-colours, $colour);\n}\n\n/// Get the colour for a government organisation\n///\n/// @param {String} $organisation - Organisation name, lowercase, hyphenated\n/// @param {Boolean} $websafe [true] - By default a 'websafe' version of the\n///   colour will be returned which meets contrast requirements . If you want to\n///   use the non-websafe version you can set this to `false` but your should\n///   ensure that you still meets contrast requirements for accessibility - for\n///   example, do not use the non-websafe version for text.\n///\n/// @return {Colour} Representation of colour for organisation\n/// @throw if `$organisation` is not a known organisation\n/// @access public\n\n@function govuk-organisation-colour($organisation, $websafe: true) {\n  @if not map-has-key($govuk-colours-organisations, $organisation) {\n    @error \"Unknown organisation `#{$organisation}`\";\n  }\n\n  $org-colour: map-get($govuk-colours-organisations, $organisation);\n\n  @if $websafe and map-has-key($org-colour, colour-websafe) {\n    @return map-get($org-colour, colour-websafe);\n  } @else {\n    @return map-get($org-colour, colour);\n  }\n}\n\n/// Make a colour darker by mixing it with black\n///\n/// @param {Colour} $colour - colour to shade\n/// @param {Number} $percentage - percentage of black to mix with $colour\n/// @return {Colour}\n/// @access public\n\n@function govuk-shade($colour, $percentage) {\n  @return mix(#000000, $colour, $percentage);\n}\n\n/// Make a colour lighter by mixing it with white\n///\n/// @param {Colour} $colour - colour to tint\n/// @param {Number} $percentage - percentage of white to mix with $colour\n/// @return {Colour}\n/// @access public\n\n@function govuk-tint($colour, $percentage) {\n  @return mix(govuk-colour(\"white\"), $colour, $percentage);\n}\n"]}
