{"version":3,"file":"govuk-frontend.min.js","sources":["../../src/govuk/common/govuk-frontend-version.mjs","../../src/govuk/common/index.mjs","../../src/govuk/errors/index.mjs","../../src/govuk/govuk-frontend-component.mjs","../../src/govuk/common/configuration.mjs","../../src/govuk/i18n.mjs","../../src/govuk/components/accordion/accordion.mjs","../../src/govuk/components/button/button.mjs","../../src/govuk/common/closest-attribute-value.mjs","../../src/govuk/components/character-count/character-count.mjs","../../src/govuk/components/checkboxes/checkboxes.mjs","../../src/govuk/components/error-summary/error-summary.mjs","../../src/govuk/components/exit-this-page/exit-this-page.mjs","../../src/govuk/components/header/header.mjs","../../src/govuk/components/notification-banner/notification-banner.mjs","../../src/govuk/components/password-input/password-input.mjs","../../src/govuk/components/radios/radios.mjs","../../src/govuk/components/service-navigation/service-navigation.mjs","../../src/govuk/components/skip-link/skip-link.mjs","../../src/govuk/components/tabs/tabs.mjs","../../src/govuk/init.mjs"],"sourcesContent":["/*\n * This variable is automatically overwritten during builds and releases.\n * It doesn't need to be updated manually.\n */\n\n/**\n * GOV.UK Frontend release version\n *\n * {@link https://github.com/alphagov/govuk-frontend/releases}\n */\nexport const version = 'development'\n","/**\n * Common helpers which do not require polyfill.\n *\n * IMPORTANT: If a helper require a polyfill, please isolate it in its own module\n * so that the polyfill can be properly tree-shaken and does not burden\n * the components that do not need that helper\n */\n\n/**\n * Get hash fragment from URL\n *\n * Extract the hash fragment (everything after the hash) from a URL,\n * but not including the hash symbol\n *\n * @private\n * @param {string} url - URL\n * @returns {string | undefined} Fragment from URL, without the hash\n */\nexport function getFragmentFromUrl(url) {\n  if (!url.includes('#')) {\n    return undefined\n  }\n\n  return url.split('#').pop()\n}\n\n/**\n * Get GOV.UK Frontend breakpoint value from CSS custom property\n *\n * @private\n * @param {string} name - Breakpoint name\n * @returns {{ property: string, value?: string }} Breakpoint object\n */\nexport function getBreakpoint(name) {\n  const property = `--govuk-frontend-breakpoint-${name}`\n\n  // Get value from `<html>` with breakpoints on CSS :root\n  const value = window\n    .getComputedStyle(document.documentElement)\n    .getPropertyValue(property)\n\n  return {\n    property,\n    value: value || undefined\n  }\n}\n\n/**\n * Move focus to element\n *\n * Sets tabindex to -1 to make the element programmatically focusable,\n * but removes it on blur as the element doesn't need to be focused again.\n *\n * @private\n * @template {HTMLElement} FocusElement\n * @param {FocusElement} $element - HTML element\n * @param {object} [options] - Handler options\n * @param {function(this: FocusElement): void} [options.onBeforeFocus] - Callback before focus\n * @param {function(this: FocusElement): void} [options.onBlur] - Callback on blur\n */\nexport function setFocus($element, options = {}) {\n  const isFocusable = $element.getAttribute('tabindex')\n\n  if (!isFocusable) {\n    $element.setAttribute('tabindex', '-1')\n  }\n\n  /**\n   * Handle element focus\n   */\n  function onFocus() {\n    $element.addEventListener('blur', onBlur, { once: true })\n  }\n\n  /**\n   * Handle element blur\n   */\n  function onBlur() {\n    options.onBlur?.call($element)\n\n    if (!isFocusable) {\n      $element.removeAttribute('tabindex')\n    }\n  }\n\n  // Add listener to reset element on blur, after focus\n  $element.addEventListener('focus', onFocus, { once: true })\n\n  // Focus element\n  options.onBeforeFocus?.call($element)\n  $element.focus()\n}\n\n/**\n * Checks if component is already initialised\n *\n * @internal\n * @param {Element} $root - HTML element to be checked\n * @param {string} moduleName - name of component module\n * @returns {boolean} Whether component is already initialised\n */\nexport function isInitialised($root, moduleName) {\n  return (\n    $root instanceof HTMLElement &&\n    $root.hasAttribute(`data-${moduleName}-init`)\n  )\n}\n\n/**\n * Checks if GOV.UK Frontend is supported on this page\n *\n * Some browsers will load and run our JavaScript but GOV.UK Frontend\n * won't be supported.\n *\n * @param {HTMLElement | null} [$scope] - (internal) `<body>` HTML element checked for browser support\n * @returns {boolean} Whether GOV.UK Frontend is supported on this page\n */\nexport function isSupported($scope = document.body) {\n  if (!$scope) {\n    return false\n  }\n\n  return $scope.classList.contains('govuk-frontend-supported')\n}\n\n/**\n * Check for an array\n *\n * @internal\n * @param {unknown} option - Option to check\n * @returns {boolean} Whether the option is an array\n */\nfunction isArray(option) {\n  return Array.isArray(option)\n}\n\n/**\n * Check for an object\n *\n * @internal\n * @template {Partial<Record<keyof ObjectType, unknown>>} [ObjectType=ObjectNested]\n * @param {unknown | ObjectType} option - Option to check\n * @returns {option is ObjectType} Whether the option is an object\n */\nexport function isObject(option) {\n  return !!option && typeof option === 'object' && !isArray(option)\n}\n\n/**\n * Format error message\n *\n * @internal\n * @param {ComponentWithModuleName} Component - Component that threw the error\n * @param {string} message - Error message\n * @returns {string} - Formatted error message\n */\nexport function formatErrorMessage(Component, message) {\n  return `${Component.moduleName}: ${message}`\n}\n\n/* eslint-disable jsdoc/valid-types --\n * `{new(...args: any[] ): object}` is not recognised as valid\n * https://github.com/gajus/eslint-plugin-jsdoc/issues/145#issuecomment-1308722878\n * https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/issues/131\n **/\n\n/**\n * @typedef ComponentWithModuleName\n * @property {string} moduleName - Name of the component\n */\n\n/* eslint-enable jsdoc/valid-types */\n\n/**\n * @import { ObjectNested } from './configuration.mjs'\n */\n","import { formatErrorMessage } from '../common/index.mjs'\n\n/**\n * GOV.UK Frontend error\n *\n * A base class for `Error`s thrown by GOV.UK Frontend.\n *\n * It is meant to be extended into specific types of errors\n * to be thrown by our code.\n *\n * @example\n * ```js\n * class MissingRootError extends GOVUKFrontendError {\n *   // Setting an explicit name is important as extending the class will not\n *   // set a new `name` on the subclass. The `name` property is important\n *   // to ensure intelligible error names even if the class name gets\n *   // mangled by a minifier\n *   name = \"MissingRootError\"\n * }\n * ```\n * @virtual\n */\nexport class GOVUKFrontendError extends Error {\n  name = 'GOVUKFrontendError'\n}\n\n/**\n * Indicates that GOV.UK Frontend is not supported\n */\nexport class SupportError extends GOVUKFrontendError {\n  name = 'SupportError'\n\n  /**\n   * Checks if GOV.UK Frontend is supported on this page\n   *\n   * @param {HTMLElement | null} [$scope] - HTML element `<body>` checked for browser support\n   */\n  constructor($scope = document.body) {\n    const supportMessage =\n      'noModule' in HTMLScriptElement.prototype\n        ? 'GOV.UK Frontend initialised without `<body class=\"govuk-frontend-supported\">` from template `<script>` snippet'\n        : 'GOV.UK Frontend is not supported in this browser'\n\n    super(\n      $scope\n        ? supportMessage\n        : 'GOV.UK Frontend initialised without `<script type=\"module\">`'\n    )\n  }\n}\n\n/**\n * Indicates that a component has received an illegal configuration\n */\nexport class ConfigError extends GOVUKFrontendError {\n  name = 'ConfigError'\n}\n\n/**\n * Indicates an issue with an element (possibly `null` or `undefined`)\n */\nexport class ElementError extends GOVUKFrontendError {\n  name = 'ElementError'\n\n  /**\n   * @internal\n   * @overload\n   * @param {string} message - Element error message\n   */\n\n  /**\n   * @internal\n   * @overload\n   * @param {ElementErrorOptions} options - Element error options\n   */\n\n  /**\n   * @internal\n   * @param {string | ElementErrorOptions} messageOrOptions - Element error message or options\n   */\n  constructor(messageOrOptions) {\n    let message = typeof messageOrOptions === 'string' ? messageOrOptions : ''\n\n    // Build message from options\n    if (typeof messageOrOptions === 'object') {\n      const { component, identifier, element, expectedType } = messageOrOptions\n\n      message = identifier\n\n      // Append reason\n      message += element\n        ? ` is not of type ${expectedType ?? 'HTMLElement'}`\n        : ' not found'\n\n      message = formatErrorMessage(component, message)\n    }\n\n    super(message)\n  }\n}\n\n/**\n * Indicates that a component is already initialised\n */\nexport class InitError extends GOVUKFrontendError {\n  name = 'InitError'\n\n  /**\n   * @internal\n   * @param {ComponentWithModuleName | string} componentOrMessage - name of the component module\n   */\n  constructor(componentOrMessage) {\n    const message =\n      typeof componentOrMessage === 'string'\n        ? componentOrMessage\n        : formatErrorMessage(\n            componentOrMessage,\n            `Root element (\\`$root\\`) already initialised`\n          )\n\n    super(message)\n  }\n}\n\n/**\n * Element error options\n *\n * @internal\n * @typedef {object} ElementErrorOptions\n * @property {string} identifier - An identifier that'll let the user understand which element has an error. This is whatever makes the most sense\n * @property {Element | null} [element] - The element in error\n * @property {string} [expectedType] - The type that was expected for the identifier\n * @property {ComponentWithModuleName} component - Component throwing the error\n */\n\n/**\n * @import { ComponentWithModuleName } from '../common/index.mjs'\n */\n","import { isInitialised, isSupported } from './common/index.mjs'\nimport { ElementError, InitError, SupportError } from './errors/index.mjs'\n\n/**\n * Base Component class\n *\n * Centralises the behaviours shared by our components\n *\n * @virtual\n * @template {Element} [RootElementType=HTMLElement]\n */\nexport class GOVUKFrontendComponent {\n  /**\n   * @type {typeof Element}\n   */\n  static elementType = HTMLElement\n\n  // allows Typescript user to work around the lack of types\n  // in GOVUKFrontend package, Typescript is not aware of $root\n  // in components that extend GOVUKFrontendComponent\n  /**\n   * Returns the root element of the component\n   *\n   * @protected\n   * @returns {RootElementType} - the root element of component\n   */\n  get $root() {\n    return this._$root\n  }\n\n  /**\n   * @protected\n   * @type {RootElementType}\n   */\n  _$root\n\n  /**\n   * Constructs a new component, validating that GOV.UK Frontend is supported\n   *\n   * @internal\n   * @param {Element | null} [$root] - HTML element to use for component\n   */\n  constructor($root) {\n    const childConstructor = /** @type {ChildClassConstructor} */ (\n      this.constructor\n    )\n\n    // TypeScript does not enforce that inheriting classes will define a `moduleName`\n    // (even if we add a `@virtual` `static moduleName` property to this class).\n    // While we trust users to do this correctly, we do a little check to provide them\n    // a helpful error message.\n    //\n    // After this, we'll be sure that `childConstructor` has a `moduleName`\n    // as expected of the `ChildClassConstructor` we've cast `this.constructor` to.\n    if (typeof childConstructor.moduleName !== 'string') {\n      throw new InitError(`\\`moduleName\\` not defined in component`)\n    }\n\n    if (!($root instanceof childConstructor.elementType)) {\n      throw new ElementError({\n        element: $root,\n        component: childConstructor,\n        identifier: 'Root element (`$root`)',\n        expectedType: childConstructor.elementType.name\n      })\n    } else {\n      this._$root = /** @type {RootElementType} */ ($root)\n    }\n\n    childConstructor.checkSupport()\n\n    this.checkInitialised()\n\n    const moduleName = childConstructor.moduleName\n\n    this.$root.setAttribute(`data-${moduleName}-init`, '')\n  }\n\n  /**\n   * Validates whether component is already initialised\n   *\n   * @private\n   * @throws {InitError} when component is already initialised\n   */\n  checkInitialised() {\n    const constructor = /** @type {ChildClassConstructor} */ (this.constructor)\n    const moduleName = constructor.moduleName\n\n    if (moduleName && isInitialised(this.$root, moduleName)) {\n      throw new InitError(constructor)\n    }\n  }\n\n  /**\n   * Validates whether components are supported\n   *\n   * @throws {SupportError} when the components are not supported\n   */\n  static checkSupport() {\n    if (!isSupported()) {\n      throw new SupportError()\n    }\n  }\n}\n\n/**\n * @typedef ChildClass\n * @property {string} moduleName - The module name that'll be looked for in the DOM when initialising the component\n */\n\n/**\n * @typedef {typeof GOVUKFrontendComponent & ChildClass} ChildClassConstructor\n */\n","import { ConfigError } from '../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../govuk-frontend-component.mjs'\n\nimport { isObject, formatErrorMessage } from './index.mjs'\n\nexport const configOverride = Symbol.for('configOverride')\n\n/**\n * Base Component class\n *\n * Centralises the behaviours shared by our components\n *\n * @virtual\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} [ConfigurationType=ObjectNested]\n * @template {Element & { dataset: DOMStringMap }} [RootElementType=HTMLElement]\n * @augments GOVUKFrontendComponent<RootElementType>\n */\nexport class ConfigurableComponent extends GOVUKFrontendComponent {\n  /**\n   * configOverride\n   *\n   * Function which defines configuration overrides to prioritize\n   * properties from the root element's dataset.\n   *\n   * It should take a subset of configuration as input and return\n   * a new configuration object with properties that should be\n   * overridden based on the root element's dataset. A Symbol\n   * is used for indexing to prevent conflicts.\n   *\n   * @internal\n   * @virtual\n   * @param {Partial<ConfigurationType>} [param] - Configuration object\n   * @returns {Partial<ConfigurationType>} return - Configuration object\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  [configOverride](param) {\n    return {}\n  }\n\n  /**\n   * Returns the root element of the component\n   *\n   * @protected\n   * @returns {ConfigurationType} - the root element of component\n   */\n  get config() {\n    return this._config\n  }\n\n  /**\n   *\n   * @type {ConfigurationType}\n   */\n  _config\n\n  /**\n   * Constructs a new component, validating that GOV.UK Frontend is supported\n   *\n   * @internal\n   * @param {Element | null} [$root] - HTML element to use for component\n   * @param {ConfigurationType} [config] - HTML element to use for component\n   */\n  constructor($root, config) {\n    super($root)\n\n    const childConstructor =\n      /** @type {ChildClassConstructor<ConfigurationType>} */ (this.constructor)\n\n    if (!isObject(childConstructor.defaults)) {\n      throw new ConfigError(\n        formatErrorMessage(\n          childConstructor,\n          'Config passed as parameter into constructor but no defaults defined'\n        )\n      )\n    }\n\n    const datasetConfig = /** @type {ConfigurationType} */ (\n      normaliseDataset(childConstructor, this._$root.dataset)\n    )\n\n    this._config = /** @type {ConfigurationType} */ (\n      mergeConfigs(\n        childConstructor.defaults,\n        config ?? {},\n        this[configOverride](datasetConfig),\n        datasetConfig\n      )\n    )\n  }\n}\n\n/**\n * Normalise string\n *\n * 'If it looks like a duck, and it quacks like a duck…' 🦆\n *\n * If the passed value looks like a boolean or a number, convert it to a boolean\n * or number.\n *\n * Designed to be used to convert config passed via data attributes (which are\n * always strings) into something sensible.\n *\n * @internal\n * @param {DOMStringMap[string]} value - The value to normalise\n * @param {SchemaProperty} [property] - Component schema property\n * @returns {string | boolean | number | undefined} Normalised data\n */\nexport function normaliseString(value, property) {\n  const trimmedValue = value ? value.trim() : ''\n\n  let output\n  let outputType = property?.type\n\n  // No schema type set? Determine automatically\n  if (!outputType) {\n    if (['true', 'false'].includes(trimmedValue)) {\n      outputType = 'boolean'\n    }\n\n    // Empty / whitespace-only strings are considered finite so we need to check\n    // the length of the trimmed string as well\n    if (trimmedValue.length > 0 && isFinite(Number(trimmedValue))) {\n      outputType = 'number'\n    }\n  }\n\n  switch (outputType) {\n    case 'boolean':\n      output = trimmedValue === 'true'\n      break\n\n    case 'number':\n      output = Number(trimmedValue)\n      break\n\n    default:\n      output = value\n  }\n\n  return output\n}\n\n/**\n * Normalise dataset\n *\n * Loop over an object and normalise each value using {@link normaliseString},\n * optionally expanding nested `i18n.field`\n *\n * @internal\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} ConfigurationType\n * @template {[keyof ConfigurationType, SchemaProperty | undefined][]} SchemaEntryType\n * @param {{ schema?: Schema<ConfigurationType>, moduleName: string }} Component - Component class\n * @param {DOMStringMap} dataset - HTML element dataset\n * @returns {ObjectNested} Normalised dataset\n */\nexport function normaliseDataset(Component, dataset) {\n  if (!isObject(Component.schema)) {\n    throw new ConfigError(\n      formatErrorMessage(\n        Component,\n        'Config passed as parameter into constructor but no schema defined'\n      )\n    )\n  }\n\n  const out = /** @type {ObjectNested} */ ({})\n  const entries = /** @type {SchemaEntryType} */ (\n    Object.entries(Component.schema.properties)\n  )\n\n  // Normalise top-level dataset ('data-*') values using schema types\n  for (const entry of entries) {\n    const [namespace, property] = entry\n\n    // Cast the `namespace` to string so it can be used to access the dataset\n    const field = namespace.toString()\n\n    if (field in dataset) {\n      out[field] = normaliseString(dataset[field], property)\n    }\n\n    /**\n     * Extract and normalise nested object values automatically using\n     * {@link normaliseString} but only schema object types are allowed\n     */\n    if (property?.type === 'object') {\n      out[field] = extractConfigByNamespace(\n        Component.schema,\n        dataset,\n        namespace\n      )\n    }\n  }\n\n  return out\n}\n\n/**\n * Config merging function\n *\n * Takes any number of objects and combines them together, with\n * greatest priority on the LAST item passed in.\n *\n * @internal\n * @param {...{ [key: string]: unknown }} configObjects - Config objects to merge\n * @returns {{ [key: string]: unknown }} A merged config object\n */\nexport function mergeConfigs(...configObjects) {\n  // Start with an empty object as our base\n  /** @type {{ [key: string]: unknown }} */\n  const formattedConfigObject = {}\n\n  // Loop through each of the passed objects\n  for (const configObject of configObjects) {\n    for (const key of Object.keys(configObject)) {\n      const option = formattedConfigObject[key]\n      const override = configObject[key]\n\n      // Push their keys one-by-one into formattedConfigObject. Any duplicate\n      // keys with object values will be merged, otherwise the new value will\n      // override the existing value.\n      if (isObject(option) && isObject(override)) {\n        formattedConfigObject[key] = mergeConfigs(option, override)\n      } else {\n        // Apply override\n        formattedConfigObject[key] = override\n      }\n    }\n  }\n\n  return formattedConfigObject\n}\n\n/**\n * Validate component config by schema\n *\n * Follows limited examples in JSON schema for wider support in future\n *\n * {@link https://ajv.js.org/json-schema.html#compound-keywords}\n * {@link https://ajv.js.org/packages/ajv-errors.html#single-message}\n *\n * @internal\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} ConfigurationType\n * @param {Schema<ConfigurationType>} schema - The schema of a component\n * @param {ConfigurationType} config - Component config\n * @returns {string[]} List of validation errors\n */\nexport function validateConfig(schema, config) {\n  const validationErrors = []\n\n  // Check errors for each schema\n  for (const [name, conditions] of Object.entries(schema)) {\n    const errors = []\n\n    // Check errors for each schema condition\n    if (Array.isArray(conditions)) {\n      for (const { required, errorMessage } of conditions) {\n        if (!required.every((key) => !!config[key])) {\n          errors.push(errorMessage) // Missing config key value\n        }\n      }\n\n      // Check one condition passes or add errors\n      if (name === 'anyOf' && !(conditions.length - errors.length >= 1)) {\n        validationErrors.push(...errors)\n      }\n    }\n  }\n\n  return validationErrors\n}\n\n/**\n * Extracts keys starting with a particular namespace from dataset ('data-*')\n * object, removing the namespace in the process, normalising all values\n *\n * @internal\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} ConfigurationType\n * @param {Schema<ConfigurationType>} schema - The schema of a component\n * @param {DOMStringMap} dataset - The object to extract key-value pairs from\n * @param {keyof ConfigurationType} namespace - The namespace to filter keys with\n * @returns {ObjectNested | undefined} Nested object with dot-separated key namespace removed\n */\nexport function extractConfigByNamespace(schema, dataset, namespace) {\n  const property = schema.properties[namespace]\n\n  // Only extract configs for object schema properties\n  if (property?.type !== 'object') {\n    return\n  }\n\n  // Add default empty config\n  const newObject = /** @type {Record<typeof namespace, ObjectNested>} */ ({\n    [namespace]: {}\n  })\n\n  for (const [key, value] of Object.entries(dataset)) {\n    /** @type {ObjectNested | ObjectNested[NestedKey]} */\n    let current = newObject\n\n    // Split the key into parts, using . as our namespace separator\n    const keyParts = key.split('.')\n\n    /**\n     * Create new level per part\n     *\n     * e.g. 'i18n.textareaDescription.other' becomes\n     * `{ i18n: { textareaDescription: { other } } }`\n     */\n    for (const [index, name] of keyParts.entries()) {\n      if (isObject(current)) {\n        // Drop down to nested object until the last part\n        if (index < keyParts.length - 1) {\n          // New nested object (optionally) replaces existing value\n          if (!isObject(current[name])) {\n            current[name] = {}\n          }\n\n          // Drop down into new or existing nested object\n          current = current[name]\n        } else if (key !== namespace) {\n          // Normalised value (optionally) replaces existing value\n          current[name] = normaliseString(value)\n        }\n      }\n    }\n  }\n\n  return newObject[namespace]\n}\n\n/**\n * @internal\n * @typedef {keyof ObjectNested} NestedKey\n * @typedef {{ [key: string]: string | boolean | number | ObjectNested | undefined }} ObjectNested\n */\n\n/**\n * Schema for component config\n *\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} ConfigurationType\n * @typedef {object} Schema\n * @property {Record<keyof ConfigurationType, SchemaProperty | undefined>} properties - Schema properties\n * @property {SchemaCondition<ConfigurationType>[]} [anyOf] - List of schema conditions\n */\n\n/**\n * Schema property for component config\n *\n * @typedef {object} SchemaProperty\n * @property {'string' | 'boolean' | 'number' | 'object'} type - Property type\n */\n\n/**\n * Schema condition for component config\n *\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} ConfigurationType\n * @typedef {object} SchemaCondition\n * @property {(keyof ConfigurationType)[]} required - List of required config fields\n * @property {string} errorMessage - Error message when required config fields not provided\n */\n\n/**\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} [ConfigurationType=ObjectNested]\n * @typedef ChildClass\n * @property {string} moduleName - The module name that'll be looked for in the DOM when initialising the component\n * @property {Schema<ConfigurationType>} [schema] - The schema of the component configuration\n * @property {ConfigurationType} [defaults] - The default values of the configuration of the component\n */\n\n/**\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} [ConfigurationType=ObjectNested]\n * @typedef {typeof GOVUKFrontendComponent & ChildClass<ConfigurationType>} ChildClassConstructor<ConfigurationType>\n */\n","/**\n * Internal support for selecting messages to render, with placeholder\n * interpolation and locale-aware number formatting and pluralisation\n *\n * @internal\n */\nexport class I18n {\n  translations\n  locale\n\n  /**\n   * @internal\n   * @param {{ [key: string]: string | TranslationPluralForms }} translations - Key-value pairs of the translation strings to use.\n   * @param {object} [config] - Configuration options for the function.\n   * @param {string | null} [config.locale] - An overriding locale for the PluralRules functionality.\n   */\n  constructor(translations = {}, config = {}) {\n    // Make list of translations available throughout function\n    this.translations = translations\n\n    // The locale to use for PluralRules and NumberFormat\n    this.locale = config.locale ?? (document.documentElement.lang || 'en')\n  }\n\n  /**\n   * The most used function - takes the key for a given piece of UI text and\n   * returns the appropriate string.\n   *\n   * @internal\n   * @param {string} lookupKey - The lookup key of the string to use.\n   * @param {{ [key: string]: unknown }} [options] - Any options passed with the translation string, e.g: for string interpolation.\n   * @returns {string} The appropriate translation string.\n   * @throws {Error} Lookup key required\n   * @throws {Error} Options required for `${}` placeholders\n   */\n  t(lookupKey, options) {\n    if (!lookupKey) {\n      // Print a console error if no lookup key has been provided\n      throw new Error('i18n: lookup key missing')\n    }\n\n    // Fetch the translation for that lookup key\n    let translation = this.translations[lookupKey]\n\n    // If the `count` option is set, determine which plural suffix is needed and\n    // change the lookupKey to match. We check to see if it's numeric instead of\n    // falsy, as this could legitimately be 0.\n    if (typeof options?.count === 'number' && typeof translation === 'object') {\n      const translationPluralForm =\n        translation[this.getPluralSuffix(lookupKey, options.count)]\n\n      // Update translation with plural suffix\n      if (translationPluralForm) {\n        translation = translationPluralForm\n      }\n    }\n\n    if (typeof translation === 'string') {\n      // Check for ${} placeholders in the translation string\n      if (translation.match(/%{(.\\S+)}/)) {\n        if (!options) {\n          throw new Error(\n            'i18n: cannot replace placeholders in string if no option data provided'\n          )\n        }\n\n        return this.replacePlaceholders(translation, options)\n      }\n\n      return translation\n    }\n\n    // If the key wasn't found in our translations object,\n    // return the lookup key itself as the fallback\n    return lookupKey\n  }\n\n  /**\n   * Takes a translation string with placeholders, and replaces the placeholders\n   * with the provided data\n   *\n   * @internal\n   * @param {string} translationString - The translation string\n   * @param {{ [key: string]: unknown }} options - Any options passed with the translation string, e.g: for string interpolation.\n   * @returns {string} The translation string to output, with $\\{\\} placeholders replaced\n   */\n  replacePlaceholders(translationString, options) {\n    const formatter = Intl.NumberFormat.supportedLocalesOf(this.locale).length\n      ? new Intl.NumberFormat(this.locale)\n      : undefined\n\n    return translationString.replace(\n      /%{(.\\S+)}/g,\n\n      /**\n       * Replace translation string placeholders\n       *\n       * @internal\n       * @param {string} placeholderWithBraces - Placeholder with braces\n       * @param {string} placeholderKey - Placeholder key\n       * @returns {string} Placeholder value\n       */\n      function (placeholderWithBraces, placeholderKey) {\n        if (Object.prototype.hasOwnProperty.call(options, placeholderKey)) {\n          const placeholderValue = options[placeholderKey]\n\n          // If a user has passed `false` as the value for the placeholder\n          // treat it as though the value should not be displayed\n          if (\n            placeholderValue === false ||\n            (typeof placeholderValue !== 'number' &&\n              typeof placeholderValue !== 'string')\n          ) {\n            return ''\n          }\n\n          // If the placeholder's value is a number, localise the number formatting\n          if (typeof placeholderValue === 'number') {\n            return formatter\n              ? formatter.format(placeholderValue)\n              : `${placeholderValue}`\n          }\n\n          return placeholderValue\n        }\n\n        throw new Error(\n          `i18n: no data found to replace ${placeholderWithBraces} placeholder in string`\n        )\n      }\n    )\n  }\n\n  /**\n   * Check to see if the browser supports Intl.PluralRules\n   *\n   * It requires all conditions to be met in order to be supported:\n   * - The implementation of Intl supports PluralRules (NOT true in Safari 10–12)\n   * - The browser/OS has plural rules for the current locale (browser dependent)\n   *\n   * {@link https://browsersl.ist/#q=supports+es6-module+and+not+supports+intl-pluralrules}\n   *\n   * @internal\n   * @returns {boolean} Returns true if all conditions are met. Returns false otherwise.\n   */\n  hasIntlPluralRulesSupport() {\n    return Boolean(\n      'PluralRules' in window.Intl &&\n        Intl.PluralRules.supportedLocalesOf(this.locale).length\n    )\n  }\n\n  /**\n   * Get the appropriate suffix for the plural form.\n   *\n   * Uses Intl.PluralRules (or our own fallback implementation) to get the\n   * 'preferred' form to use for the given count.\n   *\n   * Checks that a translation has been provided for that plural form – if it\n   * hasn't, it'll fall back to the 'other' plural form (unless that doesn't exist\n   * either, in which case an error will be thrown)\n   *\n   * @internal\n   * @param {string} lookupKey - The lookup key of the string to use.\n   * @param {number} count - Number used to determine which pluralisation to use.\n   * @returns {PluralRule} The suffix associated with the correct pluralisation for this locale.\n   * @throws {Error} Plural form `.other` required when preferred plural form is missing\n   */\n  getPluralSuffix(lookupKey, count) {\n    // Validate that the number is actually a number.\n    //\n    // Number(count) will turn anything that can't be converted to a Number type\n    // into 'NaN'. isFinite filters out NaN, as it isn't a finite number.\n    count = Number(count)\n    if (!isFinite(count)) {\n      return 'other'\n    }\n\n    // Fetch the translation for that lookup key\n    const translation = this.translations[lookupKey]\n\n    // Check to verify that all the requirements for Intl.PluralRules are met.\n    // If so, we can use that instead of our custom implementation. Otherwise,\n    // use the hardcoded fallback.\n    const preferredForm = this.hasIntlPluralRulesSupport()\n      ? new Intl.PluralRules(this.locale).select(count)\n      : this.selectPluralFormUsingFallbackRules(count)\n\n    // Use the correct plural form if provided\n    if (typeof translation === 'object') {\n      if (preferredForm in translation) {\n        return preferredForm\n        // Fall back to `other` if the plural form is missing, but log a warning\n        // to the console\n      } else if ('other' in translation) {\n        console.warn(\n          `i18n: Missing plural form \".${preferredForm}\" for \"${this.locale}\" locale. Falling back to \".other\".`\n        )\n\n        return 'other'\n      }\n    }\n\n    // If the required `other` plural form is missing, all we can do is error\n    throw new Error(\n      `i18n: Plural form \".other\" is required for \"${this.locale}\" locale`\n    )\n  }\n\n  /**\n   * Get the plural form using our fallback implementation\n   *\n   * This is split out into a separate function to make it easier to test the\n   * fallback behaviour in an environment where Intl.PluralRules exists.\n   *\n   * @internal\n   * @param {number} count - Number used to determine which pluralisation to use.\n   * @returns {PluralRule} The pluralisation form for count in this locale.\n   */\n  selectPluralFormUsingFallbackRules(count) {\n    // Currently our custom code can only handle positive integers, so let's\n    // make sure our number is one of those.\n    count = Math.abs(Math.floor(count))\n\n    const ruleset = this.getPluralRulesForLocale()\n\n    if (ruleset) {\n      return I18n.pluralRules[ruleset](count)\n    }\n\n    return 'other'\n  }\n\n  /**\n   * Work out which pluralisation rules to use for the current locale\n   *\n   * The locale may include a regional indicator (such as en-GB), but we don't\n   * usually care about this part, as pluralisation rules are usually the same\n   * regardless of region. There are exceptions, however, (e.g. Portuguese) so\n   * this searches by both the full and shortened locale codes, just to be sure.\n   *\n   * @internal\n   * @returns {string | undefined} The name of the pluralisation rule to use (a key for one\n   *   of the functions in this.pluralRules)\n   */\n  getPluralRulesForLocale() {\n    const localeShort = this.locale.split('-')[0]\n\n    // Look through the plural rules map to find which `pluralRule` is\n    // appropriate for our current `locale`.\n    for (const pluralRule in I18n.pluralRulesMap) {\n      const languages = I18n.pluralRulesMap[pluralRule]\n      if (languages.includes(this.locale) || languages.includes(localeShort)) {\n        return pluralRule\n      }\n    }\n  }\n\n  /**\n   * Map of plural rules to languages where those rules apply.\n   *\n   * Note: These groups are named for the most dominant or recognisable language\n   * that uses each system. The groupings do not imply that the languages are\n   * related to one another. Many languages have evolved the same systems\n   * independently of one another.\n   *\n   * Code to support more languages can be found in the i18n spike:\n   * {@link https://github.com/alphagov/govuk-frontend/blob/spike-i18n-support/src/govuk/i18n.mjs}\n   *\n   * Languages currently supported:\n   *\n   * Arabic: Arabic (ar)\n   * Chinese: Burmese (my), Chinese (zh), Indonesian (id), Japanese (ja),\n   *   Javanese (jv), Korean (ko), Malay (ms), Thai (th), Vietnamese (vi)\n   * French: Armenian (hy), Bangla (bn), French (fr), Gujarati (gu), Hindi (hi),\n   *   Persian Farsi (fa), Punjabi (pa), Zulu (zu)\n   * German: Afrikaans (af), Albanian (sq), Azerbaijani (az), Basque (eu),\n   *   Bulgarian (bg), Catalan (ca), Danish (da), Dutch (nl), English (en),\n   *   Estonian (et), Finnish (fi), Georgian (ka), German (de), Greek (el),\n   *   Hungarian (hu), Luxembourgish (lb), Norwegian (no), Somali (so),\n   *   Swahili (sw), Swedish (sv), Tamil (ta), Telugu (te), Turkish (tr),\n   *   Urdu (ur)\n   * Irish: Irish Gaelic (ga)\n   * Russian: Russian (ru), Ukrainian (uk)\n   * Scottish: Scottish Gaelic (gd)\n   * Spanish: European Portuguese (pt-PT), Italian (it), Spanish (es)\n   * Welsh: Welsh (cy)\n   *\n   * @internal\n   * @type {{ [key: string]: string[] }}\n   */\n  static pluralRulesMap = {\n    arabic: ['ar'],\n    chinese: ['my', 'zh', 'id', 'ja', 'jv', 'ko', 'ms', 'th', 'vi'],\n    french: ['hy', 'bn', 'fr', 'gu', 'hi', 'fa', 'pa', 'zu'],\n    german: [\n      'af',\n      'sq',\n      'az',\n      'eu',\n      'bg',\n      'ca',\n      'da',\n      'nl',\n      'en',\n      'et',\n      'fi',\n      'ka',\n      'de',\n      'el',\n      'hu',\n      'lb',\n      'no',\n      'so',\n      'sw',\n      'sv',\n      'ta',\n      'te',\n      'tr',\n      'ur'\n    ],\n    irish: ['ga'],\n    russian: ['ru', 'uk'],\n    scottish: ['gd'],\n    spanish: ['pt-PT', 'it', 'es'],\n    welsh: ['cy']\n  }\n\n  /**\n   * Different pluralisation rule sets\n   *\n   * Returns the appropriate suffix for the plural form associated with `n`.\n   * Possible suffixes: 'zero', 'one', 'two', 'few', 'many', 'other' (the actual\n   * meaning of each differs per locale). 'other' should always exist, even in\n   * languages without plurals, such as Chinese.\n   * {@link https://cldr.unicode.org/index/cldr-spec/plural-rules}\n   *\n   * The count must be a positive integer. Negative numbers and decimals aren't accounted for\n   *\n   * @internal\n   * @type {{ [key: string]: (count: number) => PluralRule }}\n   */\n  static pluralRules = {\n    arabic(n) {\n      if (n === 0) {\n        return 'zero'\n      }\n      if (n === 1) {\n        return 'one'\n      }\n      if (n === 2) {\n        return 'two'\n      }\n      if (n % 100 >= 3 && n % 100 <= 10) {\n        return 'few'\n      }\n      if (n % 100 >= 11 && n % 100 <= 99) {\n        return 'many'\n      }\n      return 'other'\n    },\n    chinese() {\n      return 'other'\n    },\n    french(n) {\n      return n === 0 || n === 1 ? 'one' : 'other'\n    },\n    german(n) {\n      return n === 1 ? 'one' : 'other'\n    },\n    irish(n) {\n      if (n === 1) {\n        return 'one'\n      }\n      if (n === 2) {\n        return 'two'\n      }\n      if (n >= 3 && n <= 6) {\n        return 'few'\n      }\n      if (n >= 7 && n <= 10) {\n        return 'many'\n      }\n      return 'other'\n    },\n    russian(n) {\n      const lastTwo = n % 100\n      const last = lastTwo % 10\n      if (last === 1 && lastTwo !== 11) {\n        return 'one'\n      }\n      if (last >= 2 && last <= 4 && !(lastTwo >= 12 && lastTwo <= 14)) {\n        return 'few'\n      }\n      if (\n        last === 0 ||\n        (last >= 5 && last <= 9) ||\n        (lastTwo >= 11 && lastTwo <= 14)\n      ) {\n        return 'many'\n      }\n      // Note: The 'other' suffix is only used by decimal numbers in Russian.\n      // We don't anticipate it being used, but it's here for consistency.\n      return 'other'\n    },\n    scottish(n) {\n      if (n === 1 || n === 11) {\n        return 'one'\n      }\n      if (n === 2 || n === 12) {\n        return 'two'\n      }\n      if ((n >= 3 && n <= 10) || (n >= 13 && n <= 19)) {\n        return 'few'\n      }\n      return 'other'\n    },\n    spanish(n) {\n      if (n === 1) {\n        return 'one'\n      }\n      if (n % 1000000 === 0 && n !== 0) {\n        return 'many'\n      }\n      return 'other'\n    },\n    welsh(n) {\n      if (n === 0) {\n        return 'zero'\n      }\n      if (n === 1) {\n        return 'one'\n      }\n      if (n === 2) {\n        return 'two'\n      }\n      if (n === 3) {\n        return 'few'\n      }\n      if (n === 6) {\n        return 'many'\n      }\n      return 'other'\n    }\n  }\n}\n\n/**\n * Plural rule category mnemonic tags\n *\n * @internal\n * @typedef {'zero' | 'one' | 'two' | 'few' | 'many' | 'other'} PluralRule\n */\n\n/**\n * Translated message by plural rule they correspond to.\n *\n * Allows to group pluralised messages under a single key when passing\n * translations to a component's constructor\n *\n * @internal\n * @typedef {object} TranslationPluralForms\n * @property {string} [other] - General plural form\n * @property {string} [zero] - Plural form used with 0\n * @property {string} [one] - Plural form used with 1\n * @property {string} [two] - Plural form used with 2\n * @property {string} [few] - Plural form used for a few\n * @property {string} [many] - Plural form used for many\n */\n","import { ConfigurableComponent } from '../../common/configuration.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { I18n } from '../../i18n.mjs'\n\n/**\n * Accordion component\n *\n * This allows a collection of sections to be collapsed by default, showing only\n * their headers. Sections can be expanded or collapsed individually by clicking\n * their headers. A \"Show all sections\" button is also added to the top of the\n * accordion, which switches to \"Hide all sections\" when all the sections are\n * expanded.\n *\n * The state of each section is saved to the DOM via the `aria-expanded`\n * attribute, which also provides accessibility.\n *\n * @preserve\n * @augments ConfigurableComponent<AccordionConfig>\n */\nexport class Accordion extends ConfigurableComponent {\n  /** @private */\n  i18n\n\n  /** @private */\n  controlsClass = 'govuk-accordion__controls'\n\n  /** @private */\n  showAllClass = 'govuk-accordion__show-all'\n\n  /** @private */\n  showAllTextClass = 'govuk-accordion__show-all-text'\n\n  /** @private */\n  sectionClass = 'govuk-accordion__section'\n\n  /** @private */\n  sectionExpandedClass = 'govuk-accordion__section--expanded'\n\n  /** @private */\n  sectionButtonClass = 'govuk-accordion__section-button'\n\n  /** @private */\n  sectionHeaderClass = 'govuk-accordion__section-header'\n\n  /** @private */\n  sectionHeadingClass = 'govuk-accordion__section-heading'\n\n  /** @private */\n  sectionHeadingDividerClass = 'govuk-accordion__section-heading-divider'\n\n  /** @private */\n  sectionHeadingTextClass = 'govuk-accordion__section-heading-text'\n\n  /** @private */\n  sectionHeadingTextFocusClass = 'govuk-accordion__section-heading-text-focus'\n\n  /** @private */\n  sectionShowHideToggleClass = 'govuk-accordion__section-toggle'\n\n  /** @private */\n  sectionShowHideToggleFocusClass = 'govuk-accordion__section-toggle-focus'\n\n  /** @private */\n  sectionShowHideTextClass = 'govuk-accordion__section-toggle-text'\n\n  /** @private */\n  upChevronIconClass = 'govuk-accordion-nav__chevron'\n\n  /** @private */\n  downChevronIconClass = 'govuk-accordion-nav__chevron--down'\n\n  /** @private */\n  sectionSummaryClass = 'govuk-accordion__section-summary'\n\n  /** @private */\n  sectionSummaryFocusClass = 'govuk-accordion__section-summary-focus'\n\n  /** @private */\n  sectionContentClass = 'govuk-accordion__section-content'\n\n  /** @private */\n  $sections\n\n  /**\n   * @private\n   * @type {HTMLButtonElement | null}\n   */\n  $showAllButton = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $showAllIcon = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $showAllText = null\n\n  /**\n   * @param {Element | null} $root - HTML element to use for accordion\n   * @param {AccordionConfig} [config] - Accordion config\n   */\n  constructor($root, config = {}) {\n    super($root, config)\n\n    this.i18n = new I18n(this.config.i18n)\n\n    const $sections = this.$root.querySelectorAll(`.${this.sectionClass}`)\n    if (!$sections.length) {\n      throw new ElementError({\n        component: Accordion,\n        identifier: `Sections (\\`<div class=\"${this.sectionClass}\">\\`)`\n      })\n    }\n\n    this.$sections = $sections\n\n    this.initControls()\n    this.initSectionHeaders()\n\n    this.updateShowAllButton(this.areAllSectionsOpen())\n  }\n\n  /**\n   * Initialise controls and set attributes\n   *\n   * @private\n   */\n  initControls() {\n    // Create \"Show all\" button and set attributes\n    this.$showAllButton = document.createElement('button')\n    this.$showAllButton.setAttribute('type', 'button')\n    this.$showAllButton.setAttribute('class', this.showAllClass)\n    this.$showAllButton.setAttribute('aria-expanded', 'false')\n\n    // Create icon, add to element\n    this.$showAllIcon = document.createElement('span')\n    this.$showAllIcon.classList.add(this.upChevronIconClass)\n    this.$showAllButton.appendChild(this.$showAllIcon)\n\n    // Create control wrapper and add controls to it\n    const $accordionControls = document.createElement('div')\n    $accordionControls.setAttribute('class', this.controlsClass)\n    $accordionControls.appendChild(this.$showAllButton)\n    this.$root.insertBefore($accordionControls, this.$root.firstChild)\n\n    // Build additional wrapper for Show all toggle text and place after icon\n    this.$showAllText = document.createElement('span')\n    this.$showAllText.classList.add(this.showAllTextClass)\n    this.$showAllButton.appendChild(this.$showAllText)\n\n    // Handle click events on the show/hide all button\n    this.$showAllButton.addEventListener('click', () =>\n      this.onShowOrHideAllToggle()\n    )\n\n    // Handle 'beforematch' events, if the user agent supports them\n    if ('onbeforematch' in document) {\n      document.addEventListener('beforematch', (event) =>\n        this.onBeforeMatch(event)\n      )\n    }\n  }\n\n  /**\n   * Initialise section headers\n   *\n   * @private\n   */\n  initSectionHeaders() {\n    this.$sections.forEach(($section, i) => {\n      const $header = $section.querySelector(`.${this.sectionHeaderClass}`)\n      if (!$header) {\n        throw new ElementError({\n          component: Accordion,\n          identifier: `Section headers (\\`<div class=\"${this.sectionHeaderClass}\">\\`)`\n        })\n      }\n\n      // Set header attributes\n      this.constructHeaderMarkup($header, i)\n      this.setExpanded(this.isExpanded($section), $section)\n\n      // Handle events\n      $header.addEventListener('click', () => this.onSectionToggle($section))\n\n      // See if there is any state stored in sessionStorage and set the sections\n      // to open or closed.\n      this.setInitialState($section)\n    })\n  }\n\n  /**\n   * Construct section header\n   *\n   * @private\n   * @param {Element} $header - Section header\n   * @param {number} index - Section index\n   */\n  constructHeaderMarkup($header, index) {\n    const $span = $header.querySelector(`.${this.sectionButtonClass}`)\n    const $heading = $header.querySelector(`.${this.sectionHeadingClass}`)\n    const $summary = $header.querySelector(`.${this.sectionSummaryClass}`)\n\n    if (!$heading) {\n      throw new ElementError({\n        component: Accordion,\n        identifier: `Section heading (\\`.${this.sectionHeadingClass}\\`)`\n      })\n    }\n\n    if (!$span) {\n      throw new ElementError({\n        component: Accordion,\n        identifier: `Section button placeholder (\\`<span class=\"${this.sectionButtonClass}\">\\`)`\n      })\n    }\n\n    // Create a button element that will replace the\n    // '.govuk-accordion__section-button' span\n    const $button = document.createElement('button')\n    $button.setAttribute('type', 'button')\n    $button.setAttribute(\n      'aria-controls',\n      `${this.$root.id}-content-${index + 1}`\n    )\n\n    // Copy all attributes from $span to $button (except `id`, which gets added\n    // to the `$headingText` element)\n    for (const attr of Array.from($span.attributes)) {\n      if (attr.name !== 'id') {\n        $button.setAttribute(attr.name, attr.value)\n      }\n    }\n\n    // Create container for heading text so it can be styled\n    const $headingText = document.createElement('span')\n    $headingText.classList.add(this.sectionHeadingTextClass)\n    // Copy the span ID to the heading text to allow it to be referenced by\n    // `aria-labelledby` on the hidden content area without \"Show this section\"\n    $headingText.id = $span.id\n\n    // Create an inner heading text container to limit the width of the focus\n    // state\n    const $headingTextFocus = document.createElement('span')\n    $headingTextFocus.classList.add(this.sectionHeadingTextFocusClass)\n    $headingText.appendChild($headingTextFocus)\n    // span could contain HTML elements\n    // (see https://www.w3.org/TR/2011/WD-html5-20110525/content-models.html#phrasing-content)\n    Array.from($span.childNodes).forEach(($child) =>\n      $headingTextFocus.appendChild($child)\n    )\n\n    // Create container for show / hide icons and text.\n    const $showHideToggle = document.createElement('span')\n    $showHideToggle.classList.add(this.sectionShowHideToggleClass)\n    // Tell Google not to index the 'show' text as part of the heading. Must be\n    // set on the element before it's added to the DOM.\n    // See https://developers.google.com/search/docs/advanced/robots/robots_meta_tag#data-nosnippet-attr\n    $showHideToggle.setAttribute('data-nosnippet', '')\n    // Create an inner container to limit the width of the focus state\n    const $showHideToggleFocus = document.createElement('span')\n    $showHideToggleFocus.classList.add(this.sectionShowHideToggleFocusClass)\n    $showHideToggle.appendChild($showHideToggleFocus)\n    // Create wrapper for the show / hide text. Append text after the show/hide icon\n    const $showHideText = document.createElement('span')\n    const $showHideIcon = document.createElement('span')\n    $showHideIcon.classList.add(this.upChevronIconClass)\n    $showHideToggleFocus.appendChild($showHideIcon)\n    $showHideText.classList.add(this.sectionShowHideTextClass)\n    $showHideToggleFocus.appendChild($showHideText)\n\n    // Append elements to the button:\n    // 1. Heading text\n    // 2. Punctuation\n    // 3. (Optional: Summary line followed by punctuation)\n    // 4. Show / hide toggle\n    $button.appendChild($headingText)\n    $button.appendChild(this.getButtonPunctuationEl())\n\n    // If summary content exists add to DOM in correct order\n    if ($summary) {\n      // Create a new `span` element and copy the summary line content from the\n      // original `div` to the new `span`. This is because the summary line text\n      // is now inside a button element, which can only contain phrasing\n      // content.\n      const $summarySpan = document.createElement('span')\n      // Create an inner summary container to limit the width of the summary\n      // focus state\n      const $summarySpanFocus = document.createElement('span')\n      $summarySpanFocus.classList.add(this.sectionSummaryFocusClass)\n      $summarySpan.appendChild($summarySpanFocus)\n\n      // Get original attributes, and pass them to the replacement\n      for (const attr of Array.from($summary.attributes)) {\n        $summarySpan.setAttribute(attr.name, attr.value)\n      }\n\n      // Copy original contents of summary to the new summary span\n      Array.from($summary.childNodes).forEach(($child) =>\n        $summarySpanFocus.appendChild($child)\n      )\n\n      // Replace the original summary `div` with the new summary `span`\n      $summary.remove()\n\n      $button.appendChild($summarySpan)\n      $button.appendChild(this.getButtonPunctuationEl())\n    }\n\n    $button.appendChild($showHideToggle)\n\n    $heading.removeChild($span)\n    $heading.appendChild($button)\n  }\n\n  /**\n   * When a section is opened by the user agent via the 'beforematch' event\n   *\n   * @private\n   * @param {Event} event - Generic event\n   */\n  onBeforeMatch(event) {\n    const $fragment = event.target\n\n    // Handle elements with `.closest()` support only\n    if (!($fragment instanceof Element)) {\n      return\n    }\n\n    // Handle when fragment is inside section\n    const $section = $fragment.closest(`.${this.sectionClass}`)\n    if ($section) {\n      this.setExpanded(true, $section)\n    }\n  }\n\n  /**\n   * When section toggled, set and store state\n   *\n   * @private\n   * @param {Element} $section - Section element\n   */\n  onSectionToggle($section) {\n    const nowExpanded = !this.isExpanded($section)\n    this.setExpanded(nowExpanded, $section)\n\n    // Store the state in sessionStorage when a change is triggered\n    this.storeState($section, nowExpanded)\n  }\n\n  /**\n   * When Open/Close All toggled, set and store state\n   *\n   * @private\n   */\n  onShowOrHideAllToggle() {\n    const nowExpanded = !this.areAllSectionsOpen()\n\n    this.$sections.forEach(($section) => {\n      this.setExpanded(nowExpanded, $section)\n      this.storeState($section, nowExpanded)\n    })\n\n    this.updateShowAllButton(nowExpanded)\n  }\n\n  /**\n   * Set section attributes when opened/closed\n   *\n   * @private\n   * @param {boolean} expanded - Section expanded\n   * @param {Element} $section - Section element\n   */\n  setExpanded(expanded, $section) {\n    const $showHideIcon = $section.querySelector(`.${this.upChevronIconClass}`)\n    const $showHideText = $section.querySelector(\n      `.${this.sectionShowHideTextClass}`\n    )\n    const $button = $section.querySelector(`.${this.sectionButtonClass}`)\n    const $content = $section.querySelector(`.${this.sectionContentClass}`)\n\n    if (!$content) {\n      throw new ElementError({\n        component: Accordion,\n        identifier: `Section content (\\`<div class=\"${this.sectionContentClass}\">\\`)`\n      })\n    }\n\n    if (!$showHideIcon || !$showHideText || !$button) {\n      // Return early for elements we create\n      return\n    }\n\n    const newButtonText = expanded\n      ? this.i18n.t('hideSection')\n      : this.i18n.t('showSection')\n\n    $showHideText.textContent = newButtonText\n    $button.setAttribute('aria-expanded', `${expanded}`)\n\n    // Update aria-label combining\n    const ariaLabelParts = []\n\n    const $headingText = $section.querySelector(\n      `.${this.sectionHeadingTextClass}`\n    )\n    if ($headingText) {\n      ariaLabelParts.push(`${$headingText.textContent}`.trim())\n    }\n\n    const $summary = $section.querySelector(`.${this.sectionSummaryClass}`)\n    if ($summary) {\n      ariaLabelParts.push(`${$summary.textContent}`.trim())\n    }\n\n    const ariaLabelMessage = expanded\n      ? this.i18n.t('hideSectionAriaLabel')\n      : this.i18n.t('showSectionAriaLabel')\n    ariaLabelParts.push(ariaLabelMessage)\n\n    /*\n     * Join with a comma to add pause for assistive technology.\n     * Example: [heading]Section A ,[pause] Show this section.\n     * https://accessibility.blog.gov.uk/2017/12/18/what-working-on-gov-uk-navigation-taught-us-about-accessibility/\n     */\n    $button.setAttribute('aria-label', ariaLabelParts.join(' , '))\n\n    // Swap icon, change class\n    if (expanded) {\n      $content.removeAttribute('hidden')\n      $section.classList.add(this.sectionExpandedClass)\n      $showHideIcon.classList.remove(this.downChevronIconClass)\n    } else {\n      $content.setAttribute('hidden', 'until-found')\n      $section.classList.remove(this.sectionExpandedClass)\n      $showHideIcon.classList.add(this.downChevronIconClass)\n    }\n\n    // See if \"Show all sections\" button text should be updated\n    this.updateShowAllButton(this.areAllSectionsOpen())\n  }\n\n  /**\n   * Get state of section\n   *\n   * @private\n   * @param {Element} $section - Section element\n   * @returns {boolean} True if expanded\n   */\n  isExpanded($section) {\n    return $section.classList.contains(this.sectionExpandedClass)\n  }\n\n  /**\n   * Check if all sections are open\n   *\n   * @private\n   * @returns {boolean} True if all sections are open\n   */\n  areAllSectionsOpen() {\n    return Array.from(this.$sections).every(($section) =>\n      this.isExpanded($section)\n    )\n  }\n\n  /**\n   * Update \"Show all sections\" button\n   *\n   * @private\n   * @param {boolean} expanded - Section expanded\n   */\n  updateShowAllButton(expanded) {\n    if (!this.$showAllButton || !this.$showAllText || !this.$showAllIcon) {\n      return\n    }\n\n    this.$showAllButton.setAttribute('aria-expanded', expanded.toString())\n    this.$showAllText.textContent = expanded\n      ? this.i18n.t('hideAllSections')\n      : this.i18n.t('showAllSections')\n    this.$showAllIcon.classList.toggle(this.downChevronIconClass, !expanded)\n  }\n\n  /**\n   * Get the identifier for a section\n   *\n   * We need a unique way of identifying each content in the Accordion.\n   * Since an `#id` should be unique and an `id` is required for `aria-`\n   * attributes `id` can be safely used.\n   *\n   * @param {Element} $section - Section element\n   * @returns {string | undefined | null} Identifier for section\n   */\n  getIdentifier($section) {\n    const $button = $section.querySelector(`.${this.sectionButtonClass}`)\n\n    return $button?.getAttribute('aria-controls')\n  }\n\n  /**\n   * Set the state of the accordions in sessionStorage\n   *\n   * @private\n   * @param {Element} $section - Section element\n   * @param {boolean} isExpanded - Whether the section is expanded\n   */\n  storeState($section, isExpanded) {\n    if (!this.config.rememberExpanded) {\n      return\n    }\n\n    const id = this.getIdentifier($section)\n\n    if (id) {\n      try {\n        window.sessionStorage.setItem(id, isExpanded.toString())\n      } catch (exception) {}\n    }\n  }\n\n  /**\n   * Read the state of the accordions from sessionStorage\n   *\n   * @private\n   * @param {Element} $section - Section element\n   */\n  setInitialState($section) {\n    if (!this.config.rememberExpanded) {\n      return\n    }\n\n    const id = this.getIdentifier($section)\n\n    if (id) {\n      try {\n        const state = window.sessionStorage.getItem(id)\n\n        if (state !== null) {\n          this.setExpanded(state === 'true', $section)\n        }\n      } catch (exception) {}\n    }\n  }\n\n  /**\n   * Create an element to improve semantics of the section button with\n   * punctuation\n   *\n   * Adding punctuation to the button can also improve its general semantics by\n   * dividing its contents into thematic chunks. See\n   * https://github.com/alphagov/govuk-frontend/issues/2327#issuecomment-922957442\n   *\n   * @private\n   * @returns {Element} DOM element\n   */\n  getButtonPunctuationEl() {\n    const $punctuationEl = document.createElement('span')\n    $punctuationEl.classList.add(\n      'govuk-visually-hidden',\n      this.sectionHeadingDividerClass\n    )\n    $punctuationEl.textContent = ', '\n    return $punctuationEl\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-accordion'\n\n  /**\n   * Accordion default config\n   *\n   * @see {@link AccordionConfig}\n   * @constant\n   * @type {AccordionConfig}\n   */\n  static defaults = Object.freeze({\n    i18n: {\n      hideAllSections: 'Hide all sections',\n      hideSection: 'Hide',\n      hideSectionAriaLabel: 'Hide this section',\n      showAllSections: 'Show all sections',\n      showSection: 'Show',\n      showSectionAriaLabel: 'Show this section'\n    },\n    rememberExpanded: true\n  })\n\n  /**\n   * Accordion config schema\n   *\n   * @constant\n   * @satisfies {Schema<AccordionConfig>}\n   */\n  static schema = Object.freeze({\n    properties: {\n      i18n: { type: 'object' },\n      rememberExpanded: { type: 'boolean' }\n    }\n  })\n}\n\n/**\n * Accordion config\n *\n * @see {@link Accordion.defaults}\n * @typedef {object} AccordionConfig\n * @property {AccordionTranslations} [i18n=Accordion.defaults.i18n] - Accordion translations\n * @property {boolean} [rememberExpanded] - Whether the expanded and collapsed\n *   state of each section is remembered and restored when navigating.\n */\n\n/**\n * Accordion translations\n *\n * @see {@link Accordion.defaults.i18n}\n * @typedef {object} AccordionTranslations\n *\n * Messages used by the component for the labels of its buttons. This includes\n * the visible text shown on screen, and text to help assistive technology users\n * for the buttons toggling each section.\n * @property {string} [hideAllSections] - The text content for the 'Hide all\n *   sections' button, used when at least one section is expanded.\n * @property {string} [hideSection] - The text content for the 'Hide'\n *   button, used when a section is expanded.\n * @property {string} [hideSectionAriaLabel] - The text content appended to the\n *   'Hide' button's accessible name when a section is expanded.\n * @property {string} [showAllSections] - The text content for the 'Show all\n *   sections' button, used when all sections are collapsed.\n * @property {string} [showSection] - The text content for the 'Show'\n *   button, used when a section is collapsed.\n * @property {string} [showSectionAriaLabel] - The text content appended to the\n *   'Show' button's accessible name when a section is expanded.\n */\n\n/**\n * @import { Schema } from '../../common/configuration.mjs'\n */\n","import { ConfigurableComponent } from '../../common/configuration.mjs'\n\nconst DEBOUNCE_TIMEOUT_IN_SECONDS = 1\n\n/**\n * JavaScript enhancements for the Button component\n *\n * @preserve\n * @augments ConfigurableComponent<ButtonConfig>\n */\nexport class Button extends ConfigurableComponent {\n  /**\n   * @private\n   * @type {number | null}\n   */\n  debounceFormSubmitTimer = null\n\n  /**\n   * @param {Element | null} $root - HTML element to use for button\n   * @param {ButtonConfig} [config] - Button config\n   */\n  constructor($root, config = {}) {\n    super($root, config)\n\n    this.$root.addEventListener('keydown', (event) => this.handleKeyDown(event))\n    this.$root.addEventListener('click', (event) => this.debounce(event))\n  }\n\n  /**\n   * Trigger a click event when the space key is pressed\n   *\n   * Some screen readers tell users they can use the space bar to activate\n   * things with the 'button' role, so we need to match the functionality of\n   * native HTML buttons.\n   *\n   * See https://github.com/alphagov/govuk_elements/pull/272#issuecomment-233028270\n   *\n   * @private\n   * @param {KeyboardEvent} event - Keydown event\n   */\n  handleKeyDown(event) {\n    const $target = event.target\n\n    // Handle space bar only\n    if (event.key !== ' ') {\n      return\n    }\n\n    // Handle elements with [role=\"button\"] only\n    if (\n      $target instanceof HTMLElement &&\n      $target.getAttribute('role') === 'button'\n    ) {\n      event.preventDefault() // prevent the page from scrolling\n      $target.click()\n    }\n  }\n\n  /**\n   * Debounce double-clicks\n   *\n   * If the click quickly succeeds a previous click then nothing will happen.\n   * This stops people accidentally causing multiple form submissions by double\n   * clicking buttons.\n   *\n   * @private\n   * @param {MouseEvent} event - Mouse click event\n   * @returns {undefined | false} Returns undefined, or false when debounced\n   */\n  debounce(event) {\n    // Check the button that was clicked has preventDoubleClick enabled\n    if (!this.config.preventDoubleClick) {\n      return\n    }\n\n    // If the timer is still running, prevent the click from submitting the form\n    if (this.debounceFormSubmitTimer) {\n      event.preventDefault()\n      return false\n    }\n\n    this.debounceFormSubmitTimer = window.setTimeout(() => {\n      this.debounceFormSubmitTimer = null\n    }, DEBOUNCE_TIMEOUT_IN_SECONDS * 1000)\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-button'\n\n  /**\n   * Button default config\n   *\n   * @see {@link ButtonConfig}\n   * @constant\n   * @type {ButtonConfig}\n   */\n  static defaults = Object.freeze({\n    preventDoubleClick: false\n  })\n\n  /**\n   * Button config schema\n   *\n   * @constant\n   * @satisfies {Schema<ButtonConfig>}\n   */\n  static schema = Object.freeze({\n    properties: {\n      preventDoubleClick: { type: 'boolean' }\n    }\n  })\n}\n\n/**\n * Button config\n *\n * @typedef {object} ButtonConfig\n * @property {boolean} [preventDoubleClick=false] - Prevent accidental double\n *   clicks on submit buttons from submitting forms multiple times.\n */\n\n/**\n * @import { Schema } from '../../common/configuration.mjs'\n */\n","/**\n * Returns the value of the given attribute closest to the given element (including itself)\n *\n * @internal\n * @param {Element} $element - The element to start walking the DOM tree up\n * @param {string} attributeName - The name of the attribute\n * @returns {string | null} Attribute value\n */\nexport function closestAttributeValue($element, attributeName) {\n  const $closestElementWithAttribute = $element.closest(`[${attributeName}]`)\n  return $closestElementWithAttribute\n    ? $closestElementWithAttribute.getAttribute(attributeName)\n    : null\n}\n","import { closestAttributeValue } from '../../common/closest-attribute-value.mjs'\nimport {\n  validateConfig,\n  ConfigurableComponent,\n  configOverride\n} from '../../common/configuration.mjs'\nimport { formatErrorMessage } from '../../common/index.mjs'\nimport { ConfigError, ElementError } from '../../errors/index.mjs'\nimport { I18n } from '../../i18n.mjs'\n\n/**\n * Character count component\n *\n * Tracks the number of characters or words in the `.govuk-js-character-count`\n * `<textarea>` inside the element. Displays a message with the remaining number\n * of characters/words available, or the number of characters/words in excess.\n *\n * You can configure the message to only appear after a certain percentage\n * of the available characters/words has been entered.\n *\n * @preserve\n * @augments ConfigurableComponent<CharacterCountConfig>\n */\nexport class CharacterCount extends ConfigurableComponent {\n  /** @private */\n  $textarea\n\n  /** @private */\n  $visibleCountMessage\n\n  /** @private */\n  $screenReaderCountMessage\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  lastInputTimestamp = null\n\n  /** @private */\n  lastInputValue = ''\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  valueChecker = null\n\n  /** @private */\n  i18n\n\n  /** @private */\n  maxLength;\n\n  /**\n   * Character count config override\n   *\n   * To ensure data-attributes take complete precedence, even if they change\n   * the type of count, we need to reset the `maxlength` and `maxwords` from\n   * the JavaScript config.\n   *\n   * @internal\n   * @param {CharacterCountConfig} datasetConfig - configuration specified by dataset\n   * @returns {CharacterCountConfig} - configuration to override by dataset\n   */\n  [configOverride](datasetConfig) {\n    let configOverrides = {}\n    if ('maxwords' in datasetConfig || 'maxlength' in datasetConfig) {\n      configOverrides = {\n        maxlength: undefined,\n        maxwords: undefined\n      }\n    }\n\n    return configOverrides\n  }\n\n  /**\n   * @param {Element | null} $root - HTML element to use for character count\n   * @param {CharacterCountConfig} [config] - Character count config\n   */\n  constructor($root, config = {}) {\n    super($root, config)\n\n    const $textarea = this.$root.querySelector('.govuk-js-character-count')\n    if (\n      !(\n        $textarea instanceof HTMLTextAreaElement ||\n        $textarea instanceof HTMLInputElement\n      )\n    ) {\n      throw new ElementError({\n        component: CharacterCount,\n        element: $textarea,\n        expectedType: 'HTMLTextareaElement or HTMLInputElement',\n        identifier: 'Form field (`.govuk-js-character-count`)'\n      })\n    }\n\n    // Check for valid config\n    const errors = validateConfig(CharacterCount.schema, this.config)\n    if (errors[0]) {\n      throw new ConfigError(formatErrorMessage(CharacterCount, errors[0]))\n    }\n\n    this.i18n = new I18n(this.config.i18n, {\n      // Read the fallback if necessary rather than have it set in the defaults\n      locale: closestAttributeValue(this.$root, 'lang')\n    })\n\n    // Determine the limit attribute (characters or words)\n    this.maxLength = this.config.maxwords ?? this.config.maxlength ?? Infinity\n\n    this.$textarea = $textarea\n\n    const textareaDescriptionId = `${this.$textarea.id}-info`\n    const $textareaDescription = document.getElementById(textareaDescriptionId)\n    if (!$textareaDescription) {\n      throw new ElementError({\n        component: CharacterCount,\n        element: $textareaDescription,\n        identifier: `Count message (\\`id=\"${textareaDescriptionId}\"\\`)`\n      })\n    }\n\n    // Inject a description for the textarea if none is present already\n    // for when the component was rendered with no maxlength, maxwords\n    // nor custom textareaDescriptionText\n    if (`${$textareaDescription.textContent}`.match(/^\\s*$/)) {\n      $textareaDescription.textContent = this.i18n.t('textareaDescription', {\n        count: this.maxLength\n      })\n    }\n\n    // Move the textarea description to be immediately after the textarea\n    // Kept for backwards compatibility\n    this.$textarea.insertAdjacentElement('afterend', $textareaDescription)\n\n    // Create the *screen reader* specific live-updating counter\n    // This doesn't need any styling classes, as it is never visible\n    const $screenReaderCountMessage = document.createElement('div')\n    $screenReaderCountMessage.className =\n      'govuk-character-count__sr-status govuk-visually-hidden'\n    $screenReaderCountMessage.setAttribute('aria-live', 'polite')\n    this.$screenReaderCountMessage = $screenReaderCountMessage\n    $textareaDescription.insertAdjacentElement(\n      'afterend',\n      $screenReaderCountMessage\n    )\n\n    // Create our live-updating counter element, copying the classes from the\n    // textarea description for backwards compatibility as these may have been\n    // configured\n    const $visibleCountMessage = document.createElement('div')\n    $visibleCountMessage.className = $textareaDescription.className\n    $visibleCountMessage.classList.add('govuk-character-count__status')\n    $visibleCountMessage.setAttribute('aria-hidden', 'true')\n    this.$visibleCountMessage = $visibleCountMessage\n    $textareaDescription.insertAdjacentElement('afterend', $visibleCountMessage)\n\n    // Hide the textarea description\n    $textareaDescription.classList.add('govuk-visually-hidden')\n\n    // Remove hard limit if set\n    this.$textarea.removeAttribute('maxlength')\n\n    this.bindChangeEvents()\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event.\n    window.addEventListener('pageshow', () => this.updateCountMessage())\n\n    // Although we've set up handlers to sync state on the pageshow event, init\n    // could be called after those events have fired, for example if they are\n    // added to the page dynamically, so update now too.\n    this.updateCountMessage()\n  }\n\n  /**\n   * Bind change events\n   *\n   * Set up event listeners on the $textarea so that the count messages update\n   * when the user types.\n   *\n   * @private\n   */\n  bindChangeEvents() {\n    this.$textarea.addEventListener('keyup', () => this.handleKeyUp())\n\n    // Bind focus/blur events to start/stop polling\n    this.$textarea.addEventListener('focus', () => this.handleFocus())\n    this.$textarea.addEventListener('blur', () => this.handleBlur())\n  }\n\n  /**\n   * Handle key up event\n   *\n   * Update the visible character counter and keep track of when the last update\n   * happened for each keypress\n   *\n   * @private\n   */\n  handleKeyUp() {\n    this.updateVisibleCountMessage()\n    this.lastInputTimestamp = Date.now()\n  }\n\n  /**\n   * Handle focus event\n   *\n   * Speech recognition software such as Dragon NaturallySpeaking will modify\n   * the fields by directly changing its `value`. These changes don't trigger\n   * events in JavaScript, so we need to poll to handle when and if they occur.\n   *\n   * Once the keyup event hasn't been detected for at least 1000 ms (1s), check\n   * if the textarea value has changed and update the count message if it has.\n   *\n   * This is so that the update triggered by the manual comparison doesn't\n   * conflict with debounced KeyboardEvent updates.\n   *\n   * @private\n   */\n  handleFocus() {\n    this.valueChecker = window.setInterval(() => {\n      if (\n        !this.lastInputTimestamp ||\n        Date.now() - 500 >= this.lastInputTimestamp\n      ) {\n        this.updateIfValueChanged()\n      }\n    }, 1000)\n  }\n\n  /**\n   * Handle blur event\n   *\n   * Stop checking the textarea value once the textarea no longer has focus\n   *\n   * @private\n   */\n  handleBlur() {\n    // Cancel value checking on blur\n    if (this.valueChecker) {\n      window.clearInterval(this.valueChecker)\n    }\n  }\n\n  /**\n   * Update count message if textarea value has changed\n   *\n   * @private\n   */\n  updateIfValueChanged() {\n    if (this.$textarea.value !== this.lastInputValue) {\n      this.lastInputValue = this.$textarea.value\n      this.updateCountMessage()\n    }\n  }\n\n  /**\n   * Update count message\n   *\n   * Helper function to update both the visible and screen reader-specific\n   * counters simultaneously (e.g. on init)\n   *\n   * @private\n   */\n  updateCountMessage() {\n    this.updateVisibleCountMessage()\n    this.updateScreenReaderCountMessage()\n  }\n\n  /**\n   * Update visible count message\n   *\n   * @private\n   */\n  updateVisibleCountMessage() {\n    const remainingNumber = this.maxLength - this.count(this.$textarea.value)\n    const isError = remainingNumber < 0\n\n    // If input is over the threshold, remove the disabled class which renders\n    // the counter invisible.\n    this.$visibleCountMessage.classList.toggle(\n      'govuk-character-count__message--disabled',\n      !this.isOverThreshold()\n    )\n\n    // Update styles\n    this.$textarea.classList.toggle('govuk-textarea--error', isError)\n    this.$visibleCountMessage.classList.toggle('govuk-error-message', isError)\n    this.$visibleCountMessage.classList.toggle('govuk-hint', !isError)\n\n    // Update message\n    this.$visibleCountMessage.textContent = this.getCountMessage()\n  }\n\n  /**\n   * Update screen reader count message\n   *\n   * @private\n   */\n  updateScreenReaderCountMessage() {\n    // If over the threshold, remove the aria-hidden attribute, allowing screen\n    // readers to announce the content of the element.\n    if (this.isOverThreshold()) {\n      this.$screenReaderCountMessage.removeAttribute('aria-hidden')\n    } else {\n      this.$screenReaderCountMessage.setAttribute('aria-hidden', 'true')\n    }\n\n    // Update message\n    this.$screenReaderCountMessage.textContent = this.getCountMessage()\n  }\n\n  /**\n   * Count the number of characters (or words, if `config.maxwords` is set)\n   * in the given text\n   *\n   * @private\n   * @param {string} text - The text to count the characters of\n   * @returns {number} the number of characters (or words) in the text\n   */\n  count(text) {\n    if (this.config.maxwords) {\n      const tokens = text.match(/\\S+/g) ?? [] // Matches consecutive non-whitespace chars\n      return tokens.length\n    }\n\n    return text.length\n  }\n\n  /**\n   * Get count message\n   *\n   * @private\n   * @returns {string} Status message\n   */\n  getCountMessage() {\n    const remainingNumber = this.maxLength - this.count(this.$textarea.value)\n    const countType = this.config.maxwords ? 'words' : 'characters'\n    return this.formatCountMessage(remainingNumber, countType)\n  }\n\n  /**\n   * Formats the message shown to users according to what's counted\n   * and how many remain\n   *\n   * @private\n   * @param {number} remainingNumber - The number of words/characaters remaining\n   * @param {string} countType - \"words\" or \"characters\"\n   * @returns {string} Status message\n   */\n  formatCountMessage(remainingNumber, countType) {\n    if (remainingNumber === 0) {\n      return this.i18n.t(`${countType}AtLimit`)\n    }\n\n    const translationKeySuffix =\n      remainingNumber < 0 ? 'OverLimit' : 'UnderLimit'\n\n    return this.i18n.t(`${countType}${translationKeySuffix}`, {\n      count: Math.abs(remainingNumber)\n    })\n  }\n\n  /**\n   * Check if count is over threshold\n   *\n   * Checks whether the value is over the configured threshold for the input.\n   * If there is no configured threshold, it is set to 0 and this function will\n   * always return true.\n   *\n   * @private\n   * @returns {boolean} true if the current count is over the config.threshold\n   *   (or no threshold is set)\n   */\n  isOverThreshold() {\n    // No threshold means we're always above threshold so save some computation\n    if (!this.config.threshold) {\n      return true\n    }\n\n    // Determine the remaining number of characters/words\n    const currentLength = this.count(this.$textarea.value)\n    const maxLength = this.maxLength\n\n    const thresholdValue = (maxLength * this.config.threshold) / 100\n\n    return thresholdValue <= currentLength\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-character-count'\n\n  /**\n   * Character count default config\n   *\n   * @see {@link CharacterCountConfig}\n   * @constant\n   * @type {CharacterCountConfig}\n   */\n  static defaults = Object.freeze({\n    threshold: 0,\n    i18n: {\n      // Characters\n      charactersUnderLimit: {\n        one: 'You have %{count} character remaining',\n        other: 'You have %{count} characters remaining'\n      },\n      charactersAtLimit: 'You have 0 characters remaining',\n      charactersOverLimit: {\n        one: 'You have %{count} character too many',\n        other: 'You have %{count} characters too many'\n      },\n      // Words\n      wordsUnderLimit: {\n        one: 'You have %{count} word remaining',\n        other: 'You have %{count} words remaining'\n      },\n      wordsAtLimit: 'You have 0 words remaining',\n      wordsOverLimit: {\n        one: 'You have %{count} word too many',\n        other: 'You have %{count} words too many'\n      },\n      textareaDescription: {\n        other: ''\n      }\n    }\n  })\n\n  /**\n   * Character count config schema\n   *\n   * @constant\n   * @satisfies {Schema<CharacterCountConfig>}\n   */\n  static schema = Object.freeze({\n    properties: {\n      i18n: { type: 'object' },\n      maxwords: { type: 'number' },\n      maxlength: { type: 'number' },\n      threshold: { type: 'number' }\n    },\n    anyOf: [\n      {\n        required: ['maxwords'],\n        errorMessage: 'Either \"maxlength\" or \"maxwords\" must be provided'\n      },\n      {\n        required: ['maxlength'],\n        errorMessage: 'Either \"maxlength\" or \"maxwords\" must be provided'\n      }\n    ]\n  })\n}\n\n/**\n * Character count config\n *\n * @see {@link CharacterCount.defaults}\n * @typedef {object} CharacterCountConfig\n * @property {number} [maxlength] - The maximum number of characters.\n *   If maxwords is provided, the maxlength option will be ignored.\n * @property {number} [maxwords] - The maximum number of words. If maxwords is\n *   provided, the maxlength option will be ignored.\n * @property {number} [threshold=0] - The percentage value of the limit at\n *   which point the count message is displayed. If this attribute is set, the\n *   count message will be hidden by default.\n * @property {CharacterCountTranslations} [i18n=CharacterCount.defaults.i18n] - Character count translations\n */\n\n/**\n * Character count translations\n *\n * @see {@link CharacterCount.defaults.i18n}\n * @typedef {object} CharacterCountTranslations\n *\n * Messages shown to users as they type. It provides feedback on how many words\n * or characters they have remaining or if they are over the limit. This also\n * includes a message used as an accessible description for the textarea.\n * @property {TranslationPluralForms} [charactersUnderLimit] - Message displayed\n *   when the number of characters is under the configured maximum, `maxlength`.\n *   This message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining characters. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {string} [charactersAtLimit] - Message displayed when the number of\n *   characters reaches the configured maximum, `maxlength`. This message is\n *   displayed visually and through assistive technologies.\n * @property {TranslationPluralForms} [charactersOverLimit] - Message displayed\n *   when the number of characters is over the configured maximum, `maxlength`.\n *   This message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining characters. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {TranslationPluralForms} [wordsUnderLimit] - Message displayed when\n *   the number of words is under the configured maximum, `maxlength`. This\n *   message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining words. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {string} [wordsAtLimit] - Message displayed when the number of\n *   words reaches the configured maximum, `maxlength`. This message is\n *   displayed visually and through assistive technologies.\n * @property {TranslationPluralForms} [wordsOverLimit] - Message displayed when\n *   the number of words is over the configured maximum, `maxlength`. This\n *   message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining words. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {TranslationPluralForms} [textareaDescription] - Message made\n *   available to assistive technologies, if none is already present in the\n *   HTML, to describe that the component accepts only a limited amount of\n *   content. It is visible on the page when JavaScript is unavailable. The\n *   component will replace the `%{count}` placeholder with the value of the\n *   `maxlength` or `maxwords` parameter.\n */\n\n/**\n * @import { Schema } from '../../common/configuration.mjs'\n * @import { TranslationPluralForms } from '../../i18n.mjs'\n */\n","import { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\n\n/**\n * Checkboxes component\n *\n * @preserve\n */\nexport class Checkboxes extends GOVUKFrontendComponent {\n  /** @private */\n  $inputs\n\n  /**\n   * Checkboxes can be associated with a 'conditionally revealed' content block\n   * – for example, a checkbox for 'Phone' could reveal an additional form field\n   * for the user to enter their phone number.\n   *\n   * These associations are made using a `data-aria-controls` attribute, which\n   * is promoted to an aria-controls attribute during initialisation.\n   *\n   * We also need to restore the state of any conditional reveals on the page\n   * (for example if the user has navigated back), and set up event handlers to\n   * keep the reveal in sync with the checkbox state.\n   *\n   * @param {Element | null} $root - HTML element to use for checkboxes\n   */\n  constructor($root) {\n    super($root)\n\n    const $inputs = this.$root.querySelectorAll('input[type=\"checkbox\"]')\n    if (!$inputs.length) {\n      throw new ElementError({\n        component: Checkboxes,\n        identifier: 'Form inputs (`<input type=\"checkbox\">`)'\n      })\n    }\n\n    this.$inputs = $inputs\n\n    this.$inputs.forEach(($input) => {\n      const targetId = $input.getAttribute('data-aria-controls')\n\n      // Skip radios without data-aria-controls attributes\n      if (!targetId) {\n        return\n      }\n\n      // Throw if target conditional element does not exist.\n      if (!document.getElementById(targetId)) {\n        throw new ElementError({\n          component: Checkboxes,\n          identifier: `Conditional reveal (\\`id=\"${targetId}\"\\`)`\n        })\n      }\n\n      // Promote the data-aria-controls attribute to a aria-controls attribute\n      // so that the relationship is exposed in the AOM\n      $input.setAttribute('aria-controls', targetId)\n      $input.removeAttribute('data-aria-controls')\n    })\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event.\n    window.addEventListener('pageshow', () => this.syncAllConditionalReveals())\n\n    // Although we've set up handlers to sync state on the pageshow event, init\n    // could be called after those events have fired, for example if they are\n    // added to the page dynamically, so sync now too.\n    this.syncAllConditionalReveals()\n\n    // Handle events\n    this.$root.addEventListener('click', (event) => this.handleClick(event))\n  }\n\n  /**\n   * Sync the conditional reveal states for all checkboxes in this component.\n   *\n   * @private\n   */\n  syncAllConditionalReveals() {\n    this.$inputs.forEach(($input) =>\n      this.syncConditionalRevealWithInputState($input)\n    )\n  }\n\n  /**\n   * Sync conditional reveal with the input state\n   *\n   * Synchronise the visibility of the conditional reveal, and its accessible\n   * state, with the input's checked state.\n   *\n   * @private\n   * @param {HTMLInputElement} $input - Checkbox input\n   */\n  syncConditionalRevealWithInputState($input) {\n    const targetId = $input.getAttribute('aria-controls')\n    if (!targetId) {\n      return\n    }\n\n    const $target = document.getElementById(targetId)\n    if ($target?.classList.contains('govuk-checkboxes__conditional')) {\n      const inputIsChecked = $input.checked\n\n      $input.setAttribute('aria-expanded', inputIsChecked.toString())\n      $target.classList.toggle(\n        'govuk-checkboxes__conditional--hidden',\n        !inputIsChecked\n      )\n    }\n  }\n\n  /**\n   * Uncheck other checkboxes\n   *\n   * Find any other checkbox inputs with the same name value, and uncheck them.\n   * This is useful for when a “None of these\" checkbox is checked.\n   *\n   * @private\n   * @param {HTMLInputElement} $input - Checkbox input\n   */\n  unCheckAllInputsExcept($input) {\n    const allInputsWithSameName = document.querySelectorAll(\n      `input[type=\"checkbox\"][name=\"${$input.name}\"]`\n    )\n\n    allInputsWithSameName.forEach(($inputWithSameName) => {\n      const hasSameFormOwner = $input.form === $inputWithSameName.form\n      if (hasSameFormOwner && $inputWithSameName !== $input) {\n        $inputWithSameName.checked = false\n        this.syncConditionalRevealWithInputState($inputWithSameName)\n      }\n    })\n  }\n\n  /**\n   * Uncheck exclusive checkboxes\n   *\n   * Find any checkbox inputs with the same name value and the 'exclusive'\n   * behaviour, and uncheck them. This helps prevent someone checking both a\n   * regular checkbox and a \"None of these\" checkbox in the same fieldset.\n   *\n   * @private\n   * @param {HTMLInputElement} $input - Checkbox input\n   */\n  unCheckExclusiveInputs($input) {\n    const allInputsWithSameNameAndExclusiveBehaviour =\n      document.querySelectorAll(\n        `input[data-behaviour=\"exclusive\"][type=\"checkbox\"][name=\"${$input.name}\"]`\n      )\n\n    allInputsWithSameNameAndExclusiveBehaviour.forEach(($exclusiveInput) => {\n      const hasSameFormOwner = $input.form === $exclusiveInput.form\n      if (hasSameFormOwner) {\n        $exclusiveInput.checked = false\n        this.syncConditionalRevealWithInputState($exclusiveInput)\n      }\n    })\n  }\n\n  /**\n   * Click event handler\n   *\n   * Handle a click within the component root – if the click occurred on a checkbox,\n   * sync the state of any associated conditional reveal with the checkbox\n   * state.\n   *\n   * @private\n   * @param {MouseEvent} event - Click event\n   */\n  handleClick(event) {\n    const $clickedInput = event.target\n\n    // Ignore clicks on things that aren't checkbox inputs\n    if (\n      !($clickedInput instanceof HTMLInputElement) ||\n      $clickedInput.type !== 'checkbox'\n    ) {\n      return\n    }\n\n    // If the checkbox conditionally-reveals some content, sync the state\n    const hasAriaControls = $clickedInput.getAttribute('aria-controls')\n    if (hasAriaControls) {\n      this.syncConditionalRevealWithInputState($clickedInput)\n    }\n\n    // No further behaviour needed for unchecking\n    if (!$clickedInput.checked) {\n      return\n    }\n\n    // Handle 'exclusive' checkbox behaviour (ie \"None of these\")\n    const hasBehaviourExclusive =\n      $clickedInput.getAttribute('data-behaviour') === 'exclusive'\n    if (hasBehaviourExclusive) {\n      this.unCheckAllInputsExcept($clickedInput)\n    } else {\n      this.unCheckExclusiveInputs($clickedInput)\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-checkboxes'\n}\n","import { ConfigurableComponent } from '../../common/configuration.mjs'\nimport { getFragmentFromUrl, setFocus } from '../../common/index.mjs'\n\n/**\n * Error summary component\n *\n * Takes focus on initialisation for accessible announcement, unless disabled in\n * configuration.\n *\n * @preserve\n * @augments ConfigurableComponent<ErrorSummaryConfig>\n */\nexport class ErrorSummary extends ConfigurableComponent {\n  /**\n   * @param {Element | null} $root - HTML element to use for error summary\n   * @param {ErrorSummaryConfig} [config] - Error summary config\n   */\n  constructor($root, config = {}) {\n    super($root, config)\n\n    /**\n     * Focus the error summary\n     */\n    if (!this.config.disableAutoFocus) {\n      setFocus(this.$root)\n    }\n\n    this.$root.addEventListener('click', (event) => this.handleClick(event))\n  }\n\n  /**\n   * Click event handler\n   *\n   * @private\n   * @param {MouseEvent} event - Click event\n   */\n  handleClick(event) {\n    const $target = event.target\n    if ($target && this.focusTarget($target)) {\n      event.preventDefault()\n    }\n  }\n\n  /**\n   * Focus the target element\n   *\n   * By default, the browser will scroll the target into view. Because our\n   * labels or legends appear above the input, this means the user will be\n   * presented with an input without any context, as the label or legend will be\n   * off the top of the screen.\n   *\n   * Manually handling the click event, scrolling the question into view and\n   * then focussing the element solves this.\n   *\n   * This also results in the label and/or legend being announced correctly in\n   * NVDA (as tested in 2018.3.2) - without this only the field type is\n   * announced (e.g. \"Edit, has autocomplete\").\n   *\n   * @private\n   * @param {EventTarget} $target - Event target\n   * @returns {boolean} True if the target was able to be focussed\n   */\n  focusTarget($target) {\n    // If the element that was clicked was not a link, return early\n    if (!($target instanceof HTMLAnchorElement)) {\n      return false\n    }\n\n    const inputId = getFragmentFromUrl($target.href)\n    if (!inputId) {\n      return false\n    }\n\n    const $input = document.getElementById(inputId)\n    if (!$input) {\n      return false\n    }\n\n    const $legendOrLabel = this.getAssociatedLegendOrLabel($input)\n    if (!$legendOrLabel) {\n      return false\n    }\n\n    // Scroll the legend or label into view *before* calling focus on the input\n    // to avoid extra scrolling in browsers that don't support `preventScroll`\n    // (which at time of writing is most of them...)\n    $legendOrLabel.scrollIntoView()\n    $input.focus({ preventScroll: true })\n\n    return true\n  }\n\n  /**\n   * Get associated legend or label\n   *\n   * Returns the first element that exists from this list:\n   *\n   * - The `<legend>` associated with the closest `<fieldset>` ancestor, as long\n   *   as the top of it is no more than half a viewport height away from the\n   *   bottom of the input\n   * - The first `<label>` that is associated with the input using for=\"inputId\"\n   * - The closest parent `<label>`\n   *\n   * @private\n   * @param {Element} $input - The input\n   * @returns {Element | null} Associated legend or label, or null if no\n   *   associated legend or label can be found\n   */\n  getAssociatedLegendOrLabel($input) {\n    const $fieldset = $input.closest('fieldset')\n\n    if ($fieldset) {\n      const $legends = $fieldset.getElementsByTagName('legend')\n\n      if ($legends.length) {\n        const $candidateLegend = $legends[0]\n\n        // If the input type is radio or checkbox, always use the legend if\n        // there is one.\n        if (\n          $input instanceof HTMLInputElement &&\n          ($input.type === 'checkbox' || $input.type === 'radio')\n        ) {\n          return $candidateLegend\n        }\n\n        // For other input types, only scroll to the fieldset’s legend (instead\n        // of the label associated with the input) if the input would end up in\n        // the top half of the screen.\n        //\n        // This should avoid situations where the input either ends up off the\n        // screen, or obscured by a software keyboard.\n        const legendTop = $candidateLegend.getBoundingClientRect().top\n        const inputRect = $input.getBoundingClientRect()\n\n        // If the browser doesn't support Element.getBoundingClientRect().height\n        // or window.innerHeight (like IE8), bail and just link to the label.\n        if (inputRect.height && window.innerHeight) {\n          const inputBottom = inputRect.top + inputRect.height\n\n          if (inputBottom - legendTop < window.innerHeight / 2) {\n            return $candidateLegend\n          }\n        }\n      }\n    }\n\n    return (\n      document.querySelector(`label[for='${$input.getAttribute('id')}']`) ??\n      $input.closest('label')\n    )\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-error-summary'\n\n  /**\n   * Error summary default config\n   *\n   * @see {@link ErrorSummaryConfig}\n   * @constant\n   * @type {ErrorSummaryConfig}\n   */\n  static defaults = Object.freeze({\n    disableAutoFocus: false\n  })\n\n  /**\n   * Error summary config schema\n   *\n   * @constant\n   * @satisfies {Schema<ErrorSummaryConfig>}\n   */\n  static schema = Object.freeze({\n    properties: {\n      disableAutoFocus: { type: 'boolean' }\n    }\n  })\n}\n\n/**\n * Error summary config\n *\n * @typedef {object} ErrorSummaryConfig\n * @property {boolean} [disableAutoFocus=false] - If set to `true` the error\n *   summary will not be focussed when the page loads.\n */\n\n/**\n * @import { Schema } from '../../common/configuration.mjs'\n */\n","import { ConfigurableComponent } from '../../common/configuration.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { I18n } from '../../i18n.mjs'\n\n/**\n * Exit this page component\n *\n * @preserve\n * @augments ConfigurableComponent<ExitThisPageConfig>\n */\nexport class ExitThisPage extends ConfigurableComponent {\n  /** @private */\n  i18n\n\n  /** @private */\n  $button\n\n  /**\n   * @private\n   * @type {HTMLAnchorElement | null}\n   */\n  $skiplinkButton = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $updateSpan = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $indicatorContainer = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $overlay = null\n\n  /** @private */\n  keypressCounter = 0\n\n  /** @private */\n  lastKeyWasModified = false\n\n  /** @private */\n  timeoutTime = 5000 // milliseconds\n\n  // Store the timeout events so that we can clear them to avoid user keypresses overlapping\n  // setTimeout returns an id that we can use to clear it with clearTimeout,\n  // hence the 'Id' suffix\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  keypressTimeoutId = null\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  timeoutMessageId = null\n\n  /**\n   * @param {Element | null} $root - HTML element that wraps the Exit This Page button\n   * @param {ExitThisPageConfig} [config] - Exit This Page config\n   */\n  constructor($root, config = {}) {\n    super($root, config)\n\n    const $button = this.$root.querySelector('.govuk-exit-this-page__button')\n    if (!($button instanceof HTMLAnchorElement)) {\n      throw new ElementError({\n        component: ExitThisPage,\n        element: $button,\n        expectedType: 'HTMLAnchorElement',\n        identifier: 'Button (`.govuk-exit-this-page__button`)'\n      })\n    }\n\n    this.i18n = new I18n(this.config.i18n)\n    this.$button = $button\n\n    const $skiplinkButton = document.querySelector(\n      '.govuk-js-exit-this-page-skiplink'\n    )\n    if ($skiplinkButton instanceof HTMLAnchorElement) {\n      this.$skiplinkButton = $skiplinkButton\n    }\n\n    this.buildIndicator()\n    this.initUpdateSpan()\n    this.initButtonClickHandler()\n\n    // Check to see if this has already been done by a previous initialisation of ExitThisPage\n    if (!('govukFrontendExitThisPageKeypress' in document.body.dataset)) {\n      document.addEventListener('keyup', this.handleKeypress.bind(this), true)\n      document.body.dataset.govukFrontendExitThisPageKeypress = 'true'\n    }\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // blank overlay remains present, rendering the page unusable. Here, we check\n    // to see if it's present on page (re)load, and remove it if so.\n    window.addEventListener('pageshow', this.resetPage.bind(this))\n  }\n\n  /**\n   * Create the <span> we use for screen reader announcements.\n   *\n   * @private\n   */\n  initUpdateSpan() {\n    this.$updateSpan = document.createElement('span')\n    this.$updateSpan.setAttribute('role', 'status')\n    this.$updateSpan.className = 'govuk-visually-hidden'\n\n    this.$root.appendChild(this.$updateSpan)\n  }\n\n  /**\n   * Create button click handlers.\n   *\n   * @private\n   */\n  initButtonClickHandler() {\n    // Main EtP button\n    this.$button.addEventListener('click', this.handleClick.bind(this))\n\n    // EtP secondary link\n    if (this.$skiplinkButton) {\n      this.$skiplinkButton.addEventListener(\n        'click',\n        this.handleClick.bind(this)\n      )\n    }\n  }\n\n  /**\n   * Create the HTML for the 'three lights' indicator on the button.\n   *\n   * @private\n   */\n  buildIndicator() {\n    // Build container\n    // Putting `aria-hidden` on it as it won't contain any readable information\n    this.$indicatorContainer = document.createElement('div')\n    this.$indicatorContainer.className = 'govuk-exit-this-page__indicator'\n    this.$indicatorContainer.setAttribute('aria-hidden', 'true')\n\n    // Create three 'lights' and place them within the container\n    for (let i = 0; i < 3; i++) {\n      const $indicator = document.createElement('div')\n      $indicator.className = 'govuk-exit-this-page__indicator-light'\n      this.$indicatorContainer.appendChild($indicator)\n    }\n\n    // Append it all to the module\n    this.$button.appendChild(this.$indicatorContainer)\n  }\n\n  /**\n   * Update whether the lights are visible and which ones are lit up depending on\n   * the value of `keypressCounter`.\n   *\n   * @private\n   */\n  updateIndicator() {\n    if (!this.$indicatorContainer) {\n      return\n    }\n\n    // Show or hide the indicator container depending on keypressCounter value\n    this.$indicatorContainer.classList.toggle(\n      'govuk-exit-this-page__indicator--visible',\n      this.keypressCounter > 0\n    )\n\n    // Turn on only the indicators we want on\n    const $indicators = this.$indicatorContainer.querySelectorAll(\n      '.govuk-exit-this-page__indicator-light'\n    )\n    $indicators.forEach(($indicator, index) => {\n      $indicator.classList.toggle(\n        'govuk-exit-this-page__indicator-light--on',\n        index < this.keypressCounter\n      )\n    })\n  }\n\n  /**\n   * Initiates the redirection away from the current page.\n   * Includes the loading overlay functionality, which covers the current page with a\n   * white overlay so that the contents are not visible during the loading\n   * process. This is particularly important on slow network connections.\n   *\n   * @private\n   */\n  exitPage() {\n    if (!this.$updateSpan) {\n      return\n    }\n\n    this.$updateSpan.textContent = ''\n\n    // Blank the page\n    // As well as creating an overlay with text, we also set the body to hidden\n    // to prevent screen reader and sequential navigation users potentially\n    // navigating through the page behind the overlay during loading\n    document.body.classList.add('govuk-exit-this-page-hide-content')\n    this.$overlay = document.createElement('div')\n    this.$overlay.className = 'govuk-exit-this-page-overlay'\n    this.$overlay.setAttribute('role', 'alert')\n\n    // we do these this way round, thus incurring a second paint, because changing\n    // the element text after adding it means that screen readers pick up the\n    // announcement more reliably.\n    document.body.appendChild(this.$overlay)\n    this.$overlay.textContent = this.i18n.t('activated')\n\n    window.location.href = this.$button.href\n  }\n\n  /**\n   * Pre-activation logic for when the button is clicked/activated via mouse or\n   * pointer.\n   *\n   * We do this to differentiate it from the keyboard activation event because we\n   * need to run `e.preventDefault` as the button or skiplink are both links and we\n   * want to apply some additional logic in `exitPage` before navigating.\n   *\n   * @private\n   * @param {MouseEvent} event - mouse click event\n   */\n  handleClick(event) {\n    event.preventDefault()\n    this.exitPage()\n  }\n\n  /**\n   * Logic for the 'quick escape' keyboard sequence functionality (pressing the\n   * Shift key three times without interruption, within a time limit).\n   *\n   * @private\n   * @param {KeyboardEvent} event - keyup event\n   */\n  handleKeypress(event) {\n    if (!this.$updateSpan) {\n      return\n    }\n\n    // Detect if the 'Shift' key has been pressed. We want to only do things if it\n    // was pressed by itself and not in a combination with another key—so we keep\n    // track of whether the preceding keyup had shiftKey: true on it, and if it\n    // did, we ignore the next Shift keyup event.\n    //\n    // This works because using Shift as a modifier key (e.g. pressing Shift + A)\n    // will fire TWO keyup events, one for A (with e.shiftKey: true) and the other\n    // for Shift (with e.shiftKey: false).\n    if (event.key === 'Shift' && !this.lastKeyWasModified) {\n      this.keypressCounter += 1\n\n      // Update the indicator before the below if statement can reset it back to 0\n      this.updateIndicator()\n\n      // Clear the timeout for the keypress timeout message clearing itself\n      if (this.timeoutMessageId) {\n        window.clearTimeout(this.timeoutMessageId)\n        this.timeoutMessageId = null\n      }\n\n      if (this.keypressCounter >= 3) {\n        this.keypressCounter = 0\n\n        if (this.keypressTimeoutId) {\n          window.clearTimeout(this.keypressTimeoutId)\n          this.keypressTimeoutId = null\n        }\n\n        this.exitPage()\n      } else {\n        if (this.keypressCounter === 1) {\n          this.$updateSpan.textContent = this.i18n.t('pressTwoMoreTimes')\n        } else {\n          this.$updateSpan.textContent = this.i18n.t('pressOneMoreTime')\n        }\n      }\n\n      this.setKeypressTimer()\n    } else if (this.keypressTimeoutId) {\n      // If the user pressed any key other than 'Shift', after having pressed\n      // 'Shift' and activating the timer, stop and reset the timer.\n      this.resetKeypressTimer()\n    }\n\n    // Keep track of whether the Shift modifier key was held during this keypress\n    this.lastKeyWasModified = event.shiftKey\n  }\n\n  /**\n   * Starts the 'quick escape' keyboard sequence timer.\n   *\n   * This can be invoked several times. We want this to be possible so that the\n   * timer is restarted each time the shortcut key is pressed (e.g. the user has\n   * up to n seconds between each keypress, rather than n seconds to invoke the\n   * entire sequence.)\n   *\n   * @private\n   */\n  setKeypressTimer() {\n    // Clear any existing timeout. This is so only one timer is running even if\n    // there are multiple keypresses in quick succession.\n    if (this.keypressTimeoutId) {\n      window.clearTimeout(this.keypressTimeoutId)\n    }\n\n    // Set a fresh timeout\n    this.keypressTimeoutId = window.setTimeout(\n      this.resetKeypressTimer.bind(this),\n      this.timeoutTime\n    )\n  }\n\n  /**\n   * Stops and resets the 'quick escape' keyboard sequence timer.\n   *\n   * @private\n   */\n  resetKeypressTimer() {\n    if (!this.$updateSpan) {\n      return\n    }\n\n    if (this.keypressTimeoutId) {\n      window.clearTimeout(this.keypressTimeoutId)\n      this.keypressTimeoutId = null\n    }\n\n    const $updateSpan = this.$updateSpan\n\n    this.keypressCounter = 0\n    $updateSpan.textContent = this.i18n.t('timedOut')\n\n    this.timeoutMessageId = window.setTimeout(() => {\n      $updateSpan.textContent = ''\n    }, this.timeoutTime)\n\n    this.updateIndicator()\n  }\n\n  /**\n   * Reset the page using the EtP button\n   *\n   * We use this in situations where a user may re-enter a page using the browser\n   * back button. In these cases, the browser can choose to restore the state of\n   * the page as it was previously, including restoring the 'ghost page' overlay,\n   * the announcement span having it's role set to \"alert\" and the keypress\n   * indicator still active, leaving the page in an unusable state.\n   *\n   * By running this check when the page is shown, we can programatically restore\n   * the page and the component to a \"default\" state\n   *\n   * @private\n   */\n  resetPage() {\n    // If an overlay is set, remove it and reset the value\n    document.body.classList.remove('govuk-exit-this-page-hide-content')\n\n    if (this.$overlay) {\n      this.$overlay.remove()\n      this.$overlay = null\n    }\n\n    // Ensure the announcement span's role is status, not alert and clear any text\n    if (this.$updateSpan) {\n      this.$updateSpan.setAttribute('role', 'status')\n      this.$updateSpan.textContent = ''\n    }\n\n    // Sync the keypress indicator lights\n    this.updateIndicator()\n\n    // If the timeouts are active, clear them\n    if (this.keypressTimeoutId) {\n      window.clearTimeout(this.keypressTimeoutId)\n    }\n\n    if (this.timeoutMessageId) {\n      window.clearTimeout(this.timeoutMessageId)\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-exit-this-page'\n\n  /**\n   * Exit this page default config\n   *\n   * @see {@link ExitThisPageConfig}\n   * @constant\n   * @type {ExitThisPageConfig}\n   */\n  static defaults = Object.freeze({\n    i18n: {\n      activated: 'Loading.',\n      timedOut: 'Exit this page expired.',\n      pressTwoMoreTimes: 'Shift, press 2 more times to exit.',\n      pressOneMoreTime: 'Shift, press 1 more time to exit.'\n    }\n  })\n\n  /**\n   * Exit this page config schema\n   *\n   * @constant\n   * @satisfies {Schema<ExitThisPageConfig>}\n   */\n  static schema = Object.freeze({\n    properties: {\n      i18n: { type: 'object' }\n    }\n  })\n}\n\n/**\n * Exit this Page config\n *\n * @see {@link ExitThisPage.defaults}\n * @typedef {object} ExitThisPageConfig\n * @property {ExitThisPageTranslations} [i18n=ExitThisPage.defaults.i18n] - Exit this page translations\n */\n\n/**\n * Exit this Page translations\n *\n * @see {@link ExitThisPage.defaults.i18n}\n * @typedef {object} ExitThisPageTranslations\n *\n * Messages used by the component programatically inserted text, including\n * overlay text and screen reader announcements.\n * @property {string} [activated] - Screen reader announcement for when EtP\n *   keypress functionality has been successfully activated.\n * @property {string} [timedOut] - Screen reader announcement for when the EtP\n *   keypress functionality has timed out.\n * @property {string} [pressTwoMoreTimes] - Screen reader announcement informing\n *   the user they must press the activation key two more times.\n * @property {string} [pressOneMoreTime] - Screen reader announcement informing\n *   the user they must press the activation key one more time.\n */\n\n/**\n * @import { Schema } from '../../common/configuration.mjs'\n */\n","import { getBreakpoint } from '../../common/index.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\n\n/**\n * Header component\n *\n * @preserve\n */\nexport class Header extends GOVUKFrontendComponent {\n  /** @private */\n  $menuButton\n\n  /** @private */\n  $menu\n\n  /**\n   * Save the opened/closed state for the nav in memory so that we can\n   * accurately maintain state when the screen is changed from small to big and\n   * back to small\n   *\n   * @private\n   */\n  menuIsOpen = false\n\n  /**\n   * A global const for storing a matchMedia instance which we'll use to detect\n   * when a screen size change happens. We rely on it being null if the feature\n   * isn't available to initially apply hidden attributes\n   *\n   * @private\n   * @type {MediaQueryList | null}\n   */\n  mql = null\n\n  /**\n   * Apply a matchMedia for desktop which will trigger a state sync if the\n   * browser viewport moves between states.\n   *\n   * @param {Element | null} $root - HTML element to use for header\n   */\n  constructor($root) {\n    super($root)\n\n    const $menuButton = this.$root.querySelector('.govuk-js-header-toggle')\n\n    // Headers don't necessarily have a navigation. When they don't, the menu\n    // toggle won't be rendered by our macro (or may be omitted when writing\n    // plain HTML)\n    if (!$menuButton) {\n      return this\n    }\n\n    const menuId = $menuButton.getAttribute('aria-controls')\n    if (!menuId) {\n      throw new ElementError({\n        component: Header,\n        identifier:\n          'Navigation button (`<button class=\"govuk-js-header-toggle\">`) attribute (`aria-controls`)'\n      })\n    }\n\n    const $menu = document.getElementById(menuId)\n    if (!$menu) {\n      throw new ElementError({\n        component: Header,\n        element: $menu,\n        identifier: `Navigation (\\`<ul id=\"${menuId}\">\\`)`\n      })\n    }\n\n    this.$menu = $menu\n    this.$menuButton = $menuButton\n\n    this.setupResponsiveChecks()\n\n    this.$menuButton.addEventListener('click', () =>\n      this.handleMenuButtonClick()\n    )\n  }\n\n  /**\n   * Setup viewport resize check\n   *\n   * @private\n   */\n  setupResponsiveChecks() {\n    const breakpoint = getBreakpoint('desktop')\n\n    if (!breakpoint.value) {\n      throw new ElementError({\n        component: Header,\n        identifier: `CSS custom property (\\`${breakpoint.property}\\`) on pseudo-class \\`:root\\``\n      })\n    }\n\n    // Media query list for GOV.UK Frontend desktop breakpoint\n    this.mql = window.matchMedia(`(min-width: ${breakpoint.value})`)\n\n    // MediaQueryList.addEventListener isn't supported by Safari < 14 so we need\n    // to be able to fall back to the deprecated MediaQueryList.addListener\n    if ('addEventListener' in this.mql) {\n      this.mql.addEventListener('change', () => this.checkMode())\n    } else {\n      // @ts-expect-error Property 'addListener' does not exist\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      this.mql.addListener(() => this.checkMode())\n    }\n\n    this.checkMode()\n  }\n\n  /**\n   * Sync menu state\n   *\n   * Uses the global variable menuIsOpen to correctly set the accessible and\n   * visual states of the menu and the menu button.\n   * Additionally will force the menu to be visible and the menu button to be\n   * hidden if the matchMedia is triggered to desktop.\n   *\n   * @private\n   */\n  checkMode() {\n    if (!this.mql || !this.$menu || !this.$menuButton) {\n      return\n    }\n\n    if (this.mql.matches) {\n      this.$menu.removeAttribute('hidden')\n      this.$menuButton.setAttribute('hidden', '')\n    } else {\n      this.$menuButton.removeAttribute('hidden')\n      this.$menuButton.setAttribute('aria-expanded', this.menuIsOpen.toString())\n\n      if (this.menuIsOpen) {\n        this.$menu.removeAttribute('hidden')\n      } else {\n        this.$menu.setAttribute('hidden', '')\n      }\n    }\n  }\n\n  /**\n   * Handle menu button click\n   *\n   * When the menu button is clicked, change the visibility of the menu and then\n   * sync the accessibility state and menu button state\n   *\n   * @private\n   */\n  handleMenuButtonClick() {\n    this.menuIsOpen = !this.menuIsOpen\n    this.checkMode()\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-header'\n}\n","import { ConfigurableComponent } from '../../common/configuration.mjs'\nimport { setFocus } from '../../common/index.mjs'\n\n/**\n * Notification Banner component\n *\n * @preserve\n * @augments ConfigurableComponent<NotificationBannerConfig>\n */\nexport class NotificationBanner extends ConfigurableComponent {\n  /**\n   * @param {Element | null} $root - HTML element to use for notification banner\n   * @param {NotificationBannerConfig} [config] - Notification banner config\n   */\n  constructor($root, config = {}) {\n    super($root, config)\n\n    /**\n     * Focus the notification banner\n     *\n     * If `role=\"alert\"` is set, focus the element to help some assistive\n     * technologies prioritise announcing it.\n     *\n     * You can turn off the auto-focus functionality by setting\n     * `data-disable-auto-focus=\"true\"` in the component HTML. You might wish to\n     * do this based on user research findings, or to avoid a clash with another\n     * element which should be focused when the page loads.\n     */\n    if (\n      this.$root.getAttribute('role') === 'alert' &&\n      !this.config.disableAutoFocus\n    ) {\n      setFocus(this.$root)\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-notification-banner'\n\n  /**\n   * Notification banner default config\n   *\n   * @see {@link NotificationBannerConfig}\n   * @constant\n   * @type {NotificationBannerConfig}\n   */\n  static defaults = Object.freeze({\n    disableAutoFocus: false\n  })\n\n  /**\n   * Notification banner config schema\n   *\n   * @constant\n   * @satisfies {Schema<NotificationBannerConfig>}\n   */\n  static schema = Object.freeze({\n    properties: {\n      disableAutoFocus: { type: 'boolean' }\n    }\n  })\n}\n\n/**\n * Notification banner config\n *\n * @typedef {object} NotificationBannerConfig\n * @property {boolean} [disableAutoFocus=false] - If set to `true` the\n *   notification banner will not be focussed when the page loads. This only\n *   applies if the component has a `role` of `alert` – in other cases the\n *   component will not be focused on page load, regardless of this option.\n */\n\n/**\n * @import { Schema } from '../../common/configuration.mjs'\n */\n","import { closestAttributeValue } from '../../common/closest-attribute-value.mjs'\nimport { ConfigurableComponent } from '../../common/configuration.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { I18n } from '../../i18n.mjs'\n\n/**\n * Password input component\n *\n * @preserve\n * @augments ConfigurableComponent<PasswordInputConfig>\n */\nexport class PasswordInput extends ConfigurableComponent {\n  /** @private */\n  i18n\n\n  /**\n   * @private\n   * @type {HTMLInputElement}\n   */\n  $input\n\n  /**\n   * @private\n   * @type {HTMLButtonElement}\n   */\n  $showHideButton\n\n  /** @private */\n  $screenReaderStatusMessage\n\n  /**\n   * @param {Element | null} $root - HTML element to use for password input\n   * @param {PasswordInputConfig} [config] - Password input config\n   */\n  constructor($root, config = {}) {\n    super($root, config)\n\n    const $input = this.$root.querySelector('.govuk-js-password-input-input')\n    if (!($input instanceof HTMLInputElement)) {\n      throw new ElementError({\n        component: PasswordInput,\n        element: $input,\n        expectedType: 'HTMLInputElement',\n        identifier: 'Form field (`.govuk-js-password-input-input`)'\n      })\n    }\n\n    if ($input.type !== 'password') {\n      throw new ElementError(\n        'Password input: Form field (`.govuk-js-password-input-input`) must be of type `password`.'\n      )\n    }\n\n    const $showHideButton = this.$root.querySelector(\n      '.govuk-js-password-input-toggle'\n    )\n    if (!($showHideButton instanceof HTMLButtonElement)) {\n      throw new ElementError({\n        component: PasswordInput,\n        element: $showHideButton,\n        expectedType: 'HTMLButtonElement',\n        identifier: 'Button (`.govuk-js-password-input-toggle`)'\n      })\n    }\n\n    if ($showHideButton.type !== 'button') {\n      throw new ElementError(\n        'Password input: Button (`.govuk-js-password-input-toggle`) must be of type `button`.'\n      )\n    }\n\n    this.$input = $input\n    this.$showHideButton = $showHideButton\n\n    this.i18n = new I18n(this.config.i18n, {\n      // Read the fallback if necessary rather than have it set in the defaults\n      locale: closestAttributeValue(this.$root, 'lang')\n    })\n\n    // Show the toggle button element\n    this.$showHideButton.removeAttribute('hidden')\n\n    // Create and append the status text for screen readers.\n    // This is injected between the input and button so that users get a sensible reading order if\n    // moving through the page content linearly:\n    // [password input] -> [your password is visible/hidden] -> [show/hide password]\n    const $screenReaderStatusMessage = document.createElement('div')\n    $screenReaderStatusMessage.className =\n      'govuk-password-input__sr-status govuk-visually-hidden'\n    $screenReaderStatusMessage.setAttribute('aria-live', 'polite')\n    this.$screenReaderStatusMessage = $screenReaderStatusMessage\n    this.$input.insertAdjacentElement('afterend', $screenReaderStatusMessage)\n\n    // Bind toggle button\n    this.$showHideButton.addEventListener('click', this.toggle.bind(this))\n\n    // Bind event to revert the password visibility to hidden\n    if (this.$input.form) {\n      this.$input.form.addEventListener('submit', () => this.hide())\n    }\n\n    // If the page is restored from bfcache and the password is visible, hide it again\n    window.addEventListener('pageshow', (event) => {\n      if (event.persisted && this.$input.type !== 'password') {\n        this.hide()\n      }\n    })\n\n    // Default the component to having the password hidden.\n    this.hide()\n  }\n\n  /**\n   * Toggle the visibility of the password input\n   *\n   * @private\n   * @param {MouseEvent} event - Click event\n   */\n  toggle(event) {\n    event.preventDefault()\n\n    // If on this click, the field is type=\"password\", show the value\n    if (this.$input.type === 'password') {\n      this.show()\n      return\n    }\n\n    // Otherwise, hide it\n    // Being defensive - hiding should always be the default\n    this.hide()\n  }\n\n  /**\n   * Show the password input value in plain text.\n   *\n   * @private\n   */\n  show() {\n    this.setType('text')\n  }\n\n  /**\n   * Hide the password input value.\n   *\n   * @private\n   */\n  hide() {\n    this.setType('password')\n  }\n\n  /**\n   * Set the password input type\n   *\n   * @param {'text' | 'password'} type - Input type\n   * @private\n   */\n  setType(type) {\n    if (type === this.$input.type) {\n      return\n    }\n\n    // Update input type\n    this.$input.setAttribute('type', type)\n\n    const isHidden = type === 'password'\n    const prefixButton = isHidden ? 'show' : 'hide'\n    const prefixStatus = isHidden ? 'passwordHidden' : 'passwordShown'\n\n    // Update button text\n    this.$showHideButton.innerText = this.i18n.t(`${prefixButton}Password`)\n\n    // Update button aria-label\n    this.$showHideButton.setAttribute(\n      'aria-label',\n      this.i18n.t(`${prefixButton}PasswordAriaLabel`)\n    )\n\n    // Update status change text\n    this.$screenReaderStatusMessage.innerText = this.i18n.t(\n      `${prefixStatus}Announcement`\n    )\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-password-input'\n\n  /**\n   * Password input default config\n   *\n   * @see {@link PasswordInputConfig}\n   * @constant\n   * @default\n   * @type {PasswordInputConfig}\n   */\n  static defaults = Object.freeze({\n    i18n: {\n      showPassword: 'Show',\n      hidePassword: 'Hide',\n      showPasswordAriaLabel: 'Show password',\n      hidePasswordAriaLabel: 'Hide password',\n      passwordShownAnnouncement: 'Your password is visible',\n      passwordHiddenAnnouncement: 'Your password is hidden'\n    }\n  })\n\n  /**\n   * Password input config schema\n   *\n   * @constant\n   * @satisfies {Schema<PasswordInputConfig>}\n   */\n  static schema = Object.freeze({\n    properties: {\n      i18n: { type: 'object' }\n    }\n  })\n}\n\n/**\n * Password input config\n *\n * @typedef {object} PasswordInputConfig\n * @property {PasswordInputTranslations} [i18n=PasswordInput.defaults.i18n] - Password input translations\n */\n\n/**\n * Password input translations\n *\n * @see {@link PasswordInput.defaults.i18n}\n * @typedef {object} PasswordInputTranslations\n *\n * Messages displayed to the user indicating the state of the show/hide toggle.\n * @property {string} [showPassword] - Visible text of the button when the\n *   password is currently hidden. Plain text only.\n * @property {string} [hidePassword] - Visible text of the button when the\n *   password is currently visible. Plain text only.\n * @property {string} [showPasswordAriaLabel] - aria-label of the button when\n *   the password is currently hidden. Plain text only.\n * @property {string} [hidePasswordAriaLabel] - aria-label of the button when\n *   the password is currently visible. Plain text only.\n * @property {string} [passwordShownAnnouncement] - Screen reader\n *   announcement to make when the password has just become visible.\n *   Plain text only.\n * @property {string} [passwordHiddenAnnouncement] - Screen reader\n *   announcement to make when the password has just been hidden.\n *   Plain text only.\n */\n\n/**\n * @import { Schema } from '../../common/configuration.mjs'\n */\n","import { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\n\n/**\n * Radios component\n *\n * @preserve\n */\nexport class Radios extends GOVUKFrontendComponent {\n  /** @private */\n  $inputs\n\n  /**\n   * Radios can be associated with a 'conditionally revealed' content block –\n   * for example, a radio for 'Phone' could reveal an additional form field for\n   * the user to enter their phone number.\n   *\n   * These associations are made using a `data-aria-controls` attribute, which\n   * is promoted to an aria-controls attribute during initialisation.\n   *\n   * We also need to restore the state of any conditional reveals on the page\n   * (for example if the user has navigated back), and set up event handlers to\n   * keep the reveal in sync with the radio state.\n   *\n   * @param {Element | null} $root - HTML element to use for radios\n   */\n  constructor($root) {\n    super($root)\n\n    const $inputs = this.$root.querySelectorAll('input[type=\"radio\"]')\n    if (!$inputs.length) {\n      throw new ElementError({\n        component: Radios,\n        identifier: 'Form inputs (`<input type=\"radio\">`)'\n      })\n    }\n\n    this.$inputs = $inputs\n\n    this.$inputs.forEach(($input) => {\n      const targetId = $input.getAttribute('data-aria-controls')\n\n      // Skip radios without data-aria-controls attributes\n      if (!targetId) {\n        return\n      }\n\n      // Throw if target conditional element does not exist.\n      if (!document.getElementById(targetId)) {\n        throw new ElementError({\n          component: Radios,\n          identifier: `Conditional reveal (\\`id=\"${targetId}\"\\`)`\n        })\n      }\n\n      // Promote the data-aria-controls attribute to a aria-controls attribute\n      // so that the relationship is exposed in the AOM\n      $input.setAttribute('aria-controls', targetId)\n      $input.removeAttribute('data-aria-controls')\n    })\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event.\n    window.addEventListener('pageshow', () => this.syncAllConditionalReveals())\n\n    // Although we've set up handlers to sync state on the pageshow event, init\n    // could be called after those events have fired, for example if they are\n    // added to the page dynamically, so sync now too.\n    this.syncAllConditionalReveals()\n\n    // Handle events\n    this.$root.addEventListener('click', (event) => this.handleClick(event))\n  }\n\n  /**\n   * Sync the conditional reveal states for all radio buttons in this component.\n   *\n   * @private\n   */\n  syncAllConditionalReveals() {\n    this.$inputs.forEach(($input) =>\n      this.syncConditionalRevealWithInputState($input)\n    )\n  }\n\n  /**\n   * Sync conditional reveal with the input state\n   *\n   * Synchronise the visibility of the conditional reveal, and its accessible\n   * state, with the input's checked state.\n   *\n   * @private\n   * @param {HTMLInputElement} $input - Radio input\n   */\n  syncConditionalRevealWithInputState($input) {\n    const targetId = $input.getAttribute('aria-controls')\n    if (!targetId) {\n      return\n    }\n\n    const $target = document.getElementById(targetId)\n    if ($target?.classList.contains('govuk-radios__conditional')) {\n      const inputIsChecked = $input.checked\n\n      $input.setAttribute('aria-expanded', inputIsChecked.toString())\n      $target.classList.toggle(\n        'govuk-radios__conditional--hidden',\n        !inputIsChecked\n      )\n    }\n  }\n\n  /**\n   * Click event handler\n   *\n   * Handle a click within the component root – if the click occurred on a radio, sync\n   * the state of the conditional reveal for all radio buttons in the same form\n   * with the same name (because checking one radio could have un-checked a\n   * radio under the root of another Radio component)\n   *\n   * @private\n   * @param {MouseEvent} event - Click event\n   */\n  handleClick(event) {\n    const $clickedInput = event.target\n\n    // Ignore clicks on things that aren't radio buttons\n    if (\n      !($clickedInput instanceof HTMLInputElement) ||\n      $clickedInput.type !== 'radio'\n    ) {\n      return\n    }\n\n    // We only need to consider radios with conditional reveals, which will have\n    // aria-controls attributes.\n    const $allInputs = document.querySelectorAll(\n      'input[type=\"radio\"][aria-controls]'\n    )\n\n    const $clickedInputForm = $clickedInput.form\n    const $clickedInputName = $clickedInput.name\n\n    $allInputs.forEach(($input) => {\n      const hasSameFormOwner = $input.form === $clickedInputForm\n      const hasSameName = $input.name === $clickedInputName\n\n      if (hasSameName && hasSameFormOwner) {\n        this.syncConditionalRevealWithInputState($input)\n      }\n    })\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-radios'\n}\n","import { getBreakpoint } from '../../common/index.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\n\n/**\n * Service Navigation component\n *\n * @preserve\n */\nexport class ServiceNavigation extends GOVUKFrontendComponent {\n  /** @private */\n  $menuButton\n\n  /** @private */\n  $menu\n\n  /**\n   * Remember the open/closed state of the nav so we can maintain it when the\n   * screen is resized.\n   *\n   * @private\n   */\n  menuIsOpen = false\n\n  /**\n   * A global const for storing a matchMedia instance which we'll use to detect\n   * when a screen size change happens. We rely on it being null if the feature\n   * isn't available to initially apply hidden attributes\n   *\n   * @private\n   * @type {MediaQueryList | null}\n   */\n  mql = null\n\n  /**\n   * @param {Element | null} $root - HTML element to use for header\n   */\n  constructor($root) {\n    super($root)\n\n    const $menuButton = this.$root.querySelector(\n      '.govuk-js-service-navigation-toggle'\n    )\n\n    // Headers don't necessarily have a navigation. When they don't, the menu\n    // toggle won't be rendered by our macro (or may be omitted when writing\n    // plain HTML)\n    if (!$menuButton) {\n      return this\n    }\n\n    const menuId = $menuButton.getAttribute('aria-controls')\n    if (!menuId) {\n      throw new ElementError({\n        component: ServiceNavigation,\n        identifier:\n          'Navigation button (`<button class=\"govuk-js-service-navigation-toggle\">`) attribute (`aria-controls`)'\n      })\n    }\n\n    const $menu = document.getElementById(menuId)\n    if (!$menu) {\n      throw new ElementError({\n        component: ServiceNavigation,\n        element: $menu,\n        identifier: `Navigation (\\`<ul id=\"${menuId}\">\\`)`\n      })\n    }\n\n    this.$menu = $menu\n    this.$menuButton = $menuButton\n\n    this.setupResponsiveChecks()\n\n    this.$menuButton.addEventListener('click', () =>\n      this.handleMenuButtonClick()\n    )\n  }\n\n  /**\n   * Setup viewport resize check\n   *\n   * @private\n   */\n  setupResponsiveChecks() {\n    const breakpoint = getBreakpoint('tablet')\n\n    if (!breakpoint.value) {\n      throw new ElementError({\n        component: ServiceNavigation,\n        identifier: `CSS custom property (\\`${breakpoint.property}\\`) on pseudo-class \\`:root\\``\n      })\n    }\n\n    // Media query list for GOV.UK Frontend desktop breakpoint\n    this.mql = window.matchMedia(`(min-width: ${breakpoint.value})`)\n\n    // MediaQueryList.addEventListener isn't supported by Safari < 14 so we need\n    // to be able to fall back to the deprecated MediaQueryList.addListener\n    if ('addEventListener' in this.mql) {\n      this.mql.addEventListener('change', () => this.checkMode())\n    } else {\n      // @ts-expect-error Property 'addListener' does not exist\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      this.mql.addListener(() => this.checkMode())\n    }\n\n    this.checkMode()\n  }\n\n  /**\n   * Sync menu state\n   *\n   * Uses the global variable menuIsOpen to correctly set the accessible and\n   * visual states of the menu and the menu button.\n   * Additionally will force the menu to be visible and the menu button to be\n   * hidden if the matchMedia is triggered to desktop.\n   *\n   * @private\n   */\n  checkMode() {\n    if (!this.mql || !this.$menu || !this.$menuButton) {\n      return\n    }\n\n    if (this.mql.matches) {\n      this.$menu.removeAttribute('hidden')\n      this.$menuButton.setAttribute('hidden', '')\n    } else {\n      this.$menuButton.removeAttribute('hidden')\n      this.$menuButton.setAttribute('aria-expanded', this.menuIsOpen.toString())\n\n      if (this.menuIsOpen) {\n        this.$menu.removeAttribute('hidden')\n      } else {\n        this.$menu.setAttribute('hidden', '')\n      }\n    }\n  }\n\n  /**\n   * Handle menu button click\n   *\n   * When the menu button is clicked, change the visibility of the menu and then\n   * sync the accessibility state and menu button state\n   *\n   * @private\n   */\n  handleMenuButtonClick() {\n    this.menuIsOpen = !this.menuIsOpen\n    this.checkMode()\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-service-navigation'\n}\n","import { getFragmentFromUrl, setFocus } from '../../common/index.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\n\n/**\n * Skip link component\n *\n * @preserve\n * @augments GOVUKFrontendComponent<HTMLAnchorElement>\n */\nexport class SkipLink extends GOVUKFrontendComponent {\n  static elementType = HTMLAnchorElement\n\n  /**\n   * @param {Element | null} $root - HTML element to use for skip link\n   * @throws {ElementError} when $root is not set or the wrong type\n   * @throws {ElementError} when $root.hash does not contain a hash\n   * @throws {ElementError} when the linked element is missing or the wrong type\n   */\n  constructor($root) {\n    super($root)\n\n    const hash = this.$root.hash\n    const href = this.$root.getAttribute('href') ?? ''\n\n    /** @type {URL | undefined} */\n    let url\n\n    /**\n     * Check for valid link URL\n     *\n     * {@link https://caniuse.com/url}\n     * {@link https://url.spec.whatwg.org}\n     *\n     */\n    try {\n      url = new window.URL(this.$root.href)\n    } catch (error) {\n      throw new ElementError(\n        `Skip link: Target link (\\`href=\"${href}\"\\`) is invalid`\n      )\n    }\n\n    // Return early for external URLs or links to other pages\n    if (\n      url.origin !== window.location.origin ||\n      url.pathname !== window.location.pathname\n    ) {\n      return\n    }\n\n    const linkedElementId = getFragmentFromUrl(hash)\n\n    // Check link path matching current page\n    if (!linkedElementId) {\n      throw new ElementError(\n        `Skip link: Target link (\\`href=\"${href}\"\\`) has no hash fragment`\n      )\n    }\n\n    const $linkedElement = document.getElementById(linkedElementId)\n\n    // Check for link target element\n    if (!$linkedElement) {\n      throw new ElementError({\n        component: SkipLink,\n        element: $linkedElement,\n        identifier: `Target content (\\`id=\"${linkedElementId}\"\\`)`\n      })\n    }\n\n    /**\n     * Focus the linked element on click\n     *\n     * Adds a helper CSS class to hide native focus styles,\n     * but removes it on blur to restore native focus styles\n     */\n    this.$root.addEventListener('click', () =>\n      setFocus($linkedElement, {\n        onBeforeFocus() {\n          $linkedElement.classList.add('govuk-skip-link-focused-element')\n        },\n        onBlur() {\n          $linkedElement.classList.remove('govuk-skip-link-focused-element')\n        }\n      })\n    )\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-skip-link'\n}\n","import { getBreakpoint, getFragmentFromUrl } from '../../common/index.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\n\n/**\n * Tabs component\n *\n * @preserve\n */\nexport class Tabs extends GOVUKFrontendComponent {\n  /** @private */\n  $tabs\n\n  /** @private */\n  $tabList\n\n  /** @private */\n  $tabListItems\n\n  /** @private */\n  jsHiddenClass = 'govuk-tabs__panel--hidden'\n\n  /** @private */\n  changingHash = false\n\n  /** @private */\n  boundTabClick\n\n  /** @private */\n  boundTabKeydown\n\n  /** @private */\n  boundOnHashChange\n\n  /**\n   * @private\n   * @type {MediaQueryList | null}\n   */\n  mql = null\n\n  /**\n   * @param {Element | null} $root - HTML element to use for tabs\n   */\n  constructor($root) {\n    super($root)\n\n    const $tabs = this.$root.querySelectorAll('a.govuk-tabs__tab')\n    if (!$tabs.length) {\n      throw new ElementError({\n        component: Tabs,\n        identifier: 'Links (`<a class=\"govuk-tabs__tab\">`)'\n      })\n    }\n\n    this.$tabs = $tabs\n\n    // Save bound functions so we can remove event listeners during teardown\n    this.boundTabClick = this.onTabClick.bind(this)\n    this.boundTabKeydown = this.onTabKeydown.bind(this)\n    this.boundOnHashChange = this.onHashChange.bind(this)\n\n    const $tabList = this.$root.querySelector('.govuk-tabs__list')\n    const $tabListItems = this.$root.querySelectorAll(\n      'li.govuk-tabs__list-item'\n    )\n\n    if (!$tabList) {\n      throw new ElementError({\n        component: Tabs,\n        identifier: 'List (`<ul class=\"govuk-tabs__list\">`)'\n      })\n    }\n\n    if (!$tabListItems.length) {\n      throw new ElementError({\n        component: Tabs,\n        identifier: 'List items (`<li class=\"govuk-tabs__list-item\">`)'\n      })\n    }\n\n    this.$tabList = $tabList\n    this.$tabListItems = $tabListItems\n\n    this.setupResponsiveChecks()\n  }\n\n  /**\n   * Setup viewport resize check\n   *\n   * @private\n   */\n  setupResponsiveChecks() {\n    const breakpoint = getBreakpoint('tablet')\n\n    if (!breakpoint.value) {\n      throw new ElementError({\n        component: Tabs,\n        identifier: `CSS custom property (\\`${breakpoint.property}\\`) on pseudo-class \\`:root\\``\n      })\n    }\n\n    // Media query list for GOV.UK Frontend tablet breakpoint\n    this.mql = window.matchMedia(`(min-width: ${breakpoint.value})`)\n\n    // MediaQueryList.addEventListener isn't supported by Safari < 14 so we need\n    // to be able to fall back to the deprecated MediaQueryList.addListener\n    if ('addEventListener' in this.mql) {\n      this.mql.addEventListener('change', () => this.checkMode())\n    } else {\n      // @ts-expect-error Property 'addListener' does not exist\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      this.mql.addListener(() => this.checkMode())\n    }\n\n    this.checkMode()\n  }\n\n  /**\n   * Setup or teardown handler for viewport resize check\n   *\n   * @private\n   */\n  checkMode() {\n    if (this.mql?.matches) {\n      this.setup()\n    } else {\n      this.teardown()\n    }\n  }\n\n  /**\n   * Setup tab component\n   *\n   * @private\n   */\n  setup() {\n    this.$tabList.setAttribute('role', 'tablist')\n\n    this.$tabListItems.forEach(($item) => {\n      $item.setAttribute('role', 'presentation')\n    })\n\n    this.$tabs.forEach(($tab) => {\n      // Set HTML attributes\n      this.setAttributes($tab)\n\n      // Handle events\n      $tab.addEventListener('click', this.boundTabClick, true)\n      $tab.addEventListener('keydown', this.boundTabKeydown, true)\n\n      // Remove old active panels\n      this.hideTab($tab)\n    })\n\n    // Show either the active tab according to the URL's hash or the first tab\n    const $activeTab = this.getTab(window.location.hash) ?? this.$tabs[0]\n\n    this.showTab($activeTab)\n\n    // Handle hashchange events\n    window.addEventListener('hashchange', this.boundOnHashChange, true)\n  }\n\n  /**\n   * Teardown tab component\n   *\n   * @private\n   */\n  teardown() {\n    this.$tabList.removeAttribute('role')\n\n    this.$tabListItems.forEach(($item) => {\n      $item.removeAttribute('role')\n    })\n\n    this.$tabs.forEach(($tab) => {\n      // Remove events\n      $tab.removeEventListener('click', this.boundTabClick, true)\n      $tab.removeEventListener('keydown', this.boundTabKeydown, true)\n\n      // Unset HTML attributes\n      this.unsetAttributes($tab)\n    })\n\n    // Remove hashchange event handler\n    window.removeEventListener('hashchange', this.boundOnHashChange, true)\n  }\n\n  /**\n   * Handle hashchange event\n   *\n   * @private\n   * @returns {void | undefined} Returns void, or undefined when prevented\n   */\n  onHashChange() {\n    const hash = window.location.hash\n    const $tabWithHash = this.getTab(hash)\n    if (!$tabWithHash) {\n      return\n    }\n\n    // Prevent changing the hash\n    if (this.changingHash) {\n      this.changingHash = false\n      return\n    }\n\n    // Show either the active tab according to the URL's hash or the first tab\n    const $previousTab = this.getCurrentTab()\n    if (!$previousTab) {\n      return\n    }\n\n    this.hideTab($previousTab)\n    this.showTab($tabWithHash)\n    $tabWithHash.focus()\n  }\n\n  /**\n   * Hide panel for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  hideTab($tab) {\n    this.unhighlightTab($tab)\n    this.hidePanel($tab)\n  }\n\n  /**\n   * Show panel for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  showTab($tab) {\n    this.highlightTab($tab)\n    this.showPanel($tab)\n  }\n\n  /**\n   * Get tab link by hash\n   *\n   * @private\n   * @param {string} hash - Hash fragment including #\n   * @returns {HTMLAnchorElement | null} Tab link\n   */\n  getTab(hash) {\n    return this.$root.querySelector(`a.govuk-tabs__tab[href=\"${hash}\"]`)\n  }\n\n  /**\n   * Set tab link and panel attributes\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  setAttributes($tab) {\n    const panelId = getFragmentFromUrl($tab.href)\n    if (!panelId) {\n      return\n    }\n\n    // Set tab attributes\n    $tab.setAttribute('id', `tab_${panelId}`)\n    $tab.setAttribute('role', 'tab')\n    $tab.setAttribute('aria-controls', panelId)\n    $tab.setAttribute('aria-selected', 'false')\n    $tab.setAttribute('tabindex', '-1')\n\n    // Set panel attributes\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.setAttribute('role', 'tabpanel')\n    $panel.setAttribute('aria-labelledby', $tab.id)\n    $panel.classList.add(this.jsHiddenClass)\n  }\n\n  /**\n   * Unset tab link and panel attributes\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  unsetAttributes($tab) {\n    // unset tab attributes\n    $tab.removeAttribute('id')\n    $tab.removeAttribute('role')\n    $tab.removeAttribute('aria-controls')\n    $tab.removeAttribute('aria-selected')\n    $tab.removeAttribute('tabindex')\n\n    // unset panel attributes\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.removeAttribute('role')\n    $panel.removeAttribute('aria-labelledby')\n    $panel.classList.remove(this.jsHiddenClass)\n  }\n\n  /**\n   * Handle tab link clicks\n   *\n   * @private\n   * @param {MouseEvent} event - Mouse click event\n   * @returns {void} Returns void\n   */\n  onTabClick(event) {\n    const $currentTab = this.getCurrentTab()\n    const $nextTab = event.currentTarget\n\n    if (!$currentTab || !($nextTab instanceof HTMLAnchorElement)) {\n      return\n    }\n\n    event.preventDefault()\n\n    this.hideTab($currentTab)\n    this.showTab($nextTab)\n    this.createHistoryEntry($nextTab)\n  }\n\n  /**\n   * Update browser URL hash fragment for tab\n   *\n   * - Allows back/forward to navigate tabs\n   * - Avoids page jump when hash changes\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  createHistoryEntry($tab) {\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    // Save and restore the id so the page doesn't jump when a user clicks a tab\n    // (which changes the hash)\n    const panelId = $panel.id\n    $panel.id = ''\n    this.changingHash = true\n    window.location.hash = panelId\n    $panel.id = panelId\n  }\n\n  /**\n   * Handle tab keydown event\n   *\n   * - Press right arrow for next tab\n   * - Press left arrow for previous tab\n   *\n   * @private\n   * @param {KeyboardEvent} event - Keydown event\n   */\n  onTabKeydown(event) {\n    switch (event.key) {\n      // 'Left' and 'Right' required for Edge 16 support.\n      case 'ArrowLeft':\n      case 'Left':\n        this.activatePreviousTab()\n        event.preventDefault()\n        break\n      case 'ArrowRight':\n      case 'Right':\n        this.activateNextTab()\n        event.preventDefault()\n        break\n    }\n  }\n\n  /**\n   * Activate next tab\n   *\n   * @private\n   */\n  activateNextTab() {\n    const $currentTab = this.getCurrentTab()\n    if (!$currentTab?.parentElement) {\n      return\n    }\n\n    const $nextTabListItem = $currentTab.parentElement.nextElementSibling\n    if (!$nextTabListItem) {\n      return\n    }\n\n    const $nextTab = $nextTabListItem.querySelector('a.govuk-tabs__tab')\n    if (!$nextTab) {\n      return\n    }\n\n    this.hideTab($currentTab)\n    this.showTab($nextTab)\n    $nextTab.focus()\n    this.createHistoryEntry($nextTab)\n  }\n\n  /**\n   * Activate previous tab\n   *\n   * @private\n   */\n  activatePreviousTab() {\n    const $currentTab = this.getCurrentTab()\n    if (!$currentTab?.parentElement) {\n      return\n    }\n\n    const $previousTabListItem =\n      $currentTab.parentElement.previousElementSibling\n    if (!$previousTabListItem) {\n      return\n    }\n\n    const $previousTab = $previousTabListItem.querySelector('a.govuk-tabs__tab')\n    if (!$previousTab) {\n      return\n    }\n\n    this.hideTab($currentTab)\n    this.showTab($previousTab)\n    $previousTab.focus()\n    this.createHistoryEntry($previousTab)\n  }\n\n  /**\n   * Get tab panel for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   * @returns {Element | null} Tab panel\n   */\n  getPanel($tab) {\n    const panelId = getFragmentFromUrl($tab.href)\n    if (!panelId) {\n      return null\n    }\n\n    return this.$root.querySelector(`#${panelId}`)\n  }\n\n  /**\n   * Show tab panel for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  showPanel($tab) {\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.classList.remove(this.jsHiddenClass)\n  }\n\n  /**\n   * Hide tab panel for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  hidePanel($tab) {\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.classList.add(this.jsHiddenClass)\n  }\n\n  /**\n   * Unset 'selected' state for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  unhighlightTab($tab) {\n    if (!$tab.parentElement) {\n      return\n    }\n\n    $tab.setAttribute('aria-selected', 'false')\n    $tab.parentElement.classList.remove('govuk-tabs__list-item--selected')\n    $tab.setAttribute('tabindex', '-1')\n  }\n\n  /**\n   * Set 'selected' state for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  highlightTab($tab) {\n    if (!$tab.parentElement) {\n      return\n    }\n\n    $tab.setAttribute('aria-selected', 'true')\n    $tab.parentElement.classList.add('govuk-tabs__list-item--selected')\n    $tab.setAttribute('tabindex', '0')\n  }\n\n  /**\n   * Get current tab link\n   *\n   * @private\n   * @returns {HTMLAnchorElement | null} Tab link\n   */\n  getCurrentTab() {\n    return this.$root.querySelector(\n      '.govuk-tabs__list-item--selected a.govuk-tabs__tab'\n    )\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-tabs'\n}\n","import { isSupported } from './common/index.mjs'\nimport { Accordion } from './components/accordion/accordion.mjs'\nimport { Button } from './components/button/button.mjs'\nimport { CharacterCount } from './components/character-count/character-count.mjs'\nimport { Checkboxes } from './components/checkboxes/checkboxes.mjs'\nimport { ErrorSummary } from './components/error-summary/error-summary.mjs'\nimport { ExitThisPage } from './components/exit-this-page/exit-this-page.mjs'\nimport { Header } from './components/header/header.mjs'\nimport { NotificationBanner } from './components/notification-banner/notification-banner.mjs'\nimport { PasswordInput } from './components/password-input/password-input.mjs'\nimport { Radios } from './components/radios/radios.mjs'\nimport { ServiceNavigation } from './components/service-navigation/service-navigation.mjs'\nimport { SkipLink } from './components/skip-link/skip-link.mjs'\nimport { Tabs } from './components/tabs/tabs.mjs'\nimport { SupportError } from './errors/index.mjs'\n\n/**\n * Initialise all components\n *\n * Use the `data-module` attributes to find, instantiate and init all of the\n * components provided as part of GOV.UK Frontend.\n *\n * @param {Config & { scope?: Element, onError?: OnErrorCallback<CompatibleClass> }} [config] - Config for all components (with optional scope)\n */\nfunction initAll(config) {\n  config = typeof config !== 'undefined' ? config : {}\n\n  // Skip initialisation when GOV.UK Frontend is not supported\n  if (!isSupported()) {\n    if (config.onError) {\n      config.onError(new SupportError(), {\n        config\n      })\n    } else {\n      console.log(new SupportError())\n    }\n    return\n  }\n\n  const components = /** @type {const} */ ([\n    [Accordion, config.accordion],\n    [Button, config.button],\n    [CharacterCount, config.characterCount],\n    [Checkboxes],\n    [ErrorSummary, config.errorSummary],\n    [ExitThisPage, config.exitThisPage],\n    [Header],\n    [NotificationBanner, config.notificationBanner],\n    [PasswordInput, config.passwordInput],\n    [Radios],\n    [ServiceNavigation],\n    [SkipLink],\n    [Tabs]\n  ])\n\n  // Allow the user to initialise GOV.UK Frontend in only certain sections of the page\n  // Defaults to the entire document if nothing is set.\n  // const $scope = config.scope ?? document\n\n  const options = {\n    scope: config.scope ?? document,\n    onError: config.onError\n  }\n\n  components.forEach(([Component, config]) => {\n    createAll(Component, config, options)\n  })\n}\n\n/**\n * Create all instances of a specific component on the page\n *\n * Uses the `data-module` attribute to find all elements matching the specified\n * component on the page, creating instances of the component object for each\n * of them.\n *\n * Any component errors will be caught and logged to the console.\n *\n * @template {CompatibleClass} ComponentClass\n * @param {ComponentClass} Component - class of the component to create\n * @param {ComponentConfig<ComponentClass>} [config] - Config supplied to component\n * @param {OnErrorCallback<ComponentClass> | Element | Document | CreateAllOptions<ComponentClass> } [createAllOptions] - options for createAll including scope of the document to search within and callback function if error throw by component on init\n * @returns {Array<InstanceType<ComponentClass>>} - array of instantiated components\n */\nfunction createAll(Component, config, createAllOptions) {\n  let /** @type {Element | Document} */ $scope = document\n  let /** @type {OnErrorCallback<Component> | undefined} */ onError\n\n  if (typeof createAllOptions === 'object') {\n    createAllOptions = /** @type {CreateAllOptions<Component>} */ (\n      // eslint-disable-next-line no-self-assign\n      createAllOptions\n    )\n\n    $scope = createAllOptions.scope ?? $scope\n    onError = createAllOptions.onError\n  }\n\n  if (typeof createAllOptions === 'function') {\n    onError = createAllOptions\n  }\n\n  if (createAllOptions instanceof HTMLElement) {\n    $scope = createAllOptions\n  }\n\n  const $elements = $scope.querySelectorAll(\n    `[data-module=\"${Component.moduleName}\"]`\n  )\n\n  // Skip initialisation when GOV.UK Frontend is not supported\n  if (!isSupported()) {\n    if (onError) {\n      onError(new SupportError(), {\n        component: Component,\n        config\n      })\n    } else {\n      console.log(new SupportError())\n    }\n    return []\n  }\n\n  /* eslint-disable-next-line @typescript-eslint/no-unsafe-return --\n   * We can't define CompatibleClass as `{new(): CompatibleClass, moduleName: string}`,\n   * as when doing `typeof Accordion` (or any component), TypeScript doesn't seem\n   * to acknowledge the static `moduleName` that's set in our component classes.\n   * This means we have to set the constructor of `CompatibleClass` as `{new(): any}`,\n   * leading to ESLint frowning that we're returning `any[]`.\n   */\n  return Array.from($elements)\n    .map(($element) => {\n      try {\n        // Only pass config to components that accept it\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return typeof config !== 'undefined'\n          ? new Component($element, config)\n          : new Component($element)\n      } catch (error) {\n        if (onError) {\n          onError(error, {\n            element: $element,\n            component: Component,\n            config\n          })\n        } else {\n          console.log(error)\n        }\n\n        return null\n      }\n    })\n    .filter(Boolean) // Exclude components that errored\n}\n\nexport { initAll, createAll }\n\n/* eslint-disable jsdoc/valid-types --\n * `{new(...args: any[] ): object}` is not recognised as valid\n * https://github.com/gajus/eslint-plugin-jsdoc/issues/145#issuecomment-1308722878\n * https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/issues/131\n **/\n\n/**\n * @typedef {{new (...args: any[]): any, moduleName: string}} CompatibleClass\n */\n\n/* eslint-enable jsdoc/valid-types */\n\n/**\n * Config for all components via `initAll()`\n *\n * @typedef {object} Config\n * @property {AccordionConfig} [accordion] - Accordion config\n * @property {ButtonConfig} [button] - Button config\n * @property {CharacterCountConfig} [characterCount] - Character Count config\n * @property {ErrorSummaryConfig} [errorSummary] - Error Summary config\n * @property {ExitThisPageConfig} [exitThisPage] - Exit This Page config\n * @property {NotificationBannerConfig} [notificationBanner] - Notification Banner config\n * @property {PasswordInputConfig} [passwordInput] - Password input config\n */\n\n/**\n * Config for individual components\n *\n * @import { AccordionConfig } from './components/accordion/accordion.mjs'\n * @import { ButtonConfig } from './components/button/button.mjs'\n * @import { CharacterCountConfig } from './components/character-count/character-count.mjs'\n * @import { ErrorSummaryConfig } from './components/error-summary/error-summary.mjs'\n * @import { ExitThisPageConfig } from './components/exit-this-page/exit-this-page.mjs'\n * @import { NotificationBannerConfig } from './components/notification-banner/notification-banner.mjs'\n * @import { PasswordInputConfig } from './components/password-input/password-input.mjs'\n */\n\n/**\n * Component config keys, e.g. `accordion` and `characterCount`\n *\n * @typedef {keyof Config} ConfigKey\n */\n\n/**\n * @template {CompatibleClass} ComponentClass\n * @typedef {ConstructorParameters<ComponentClass>[1]} ComponentConfig\n */\n\n/**\n * @template {CompatibleClass} ComponentClass\n * @typedef {object} ErrorContext\n * @property {Element} [element] - Element used for component module initialisation\n * @property {ComponentClass} [component] - Class of component\n * @property {ComponentConfig<ComponentClass>} config - Config supplied to component\n */\n\n/**\n * @template {CompatibleClass} ComponentClass\n * @callback OnErrorCallback\n * @param {unknown} error - Thrown error\n * @param {ErrorContext<ComponentClass>} context - Object containing the element, component class and configuration\n */\n\n/**\n * @template {CompatibleClass} ComponentClass\n * @typedef {object} CreateAllOptions\n * @property {Element | Document} [scope] - scope of the document to search within\n * @property {OnErrorCallback<ComponentClass>} [onError] - callback function if error throw by component on init\n */\n"],"names":["version","getFragmentFromUrl","url","includes","split","pop","getBreakpoint","name","property","value","window","getComputedStyle","document","documentElement","getPropertyValue","undefined","setFocus","$element","options","_options$onBeforeFocu","isFocusable","getAttribute","onBlur","_options$onBlur","call","removeAttribute","setAttribute","addEventListener","once","onBeforeFocus","focus","isSupported","$scope","body","classList","contains","isObject","option","Array","isArray","formatErrorMessage","Component","message","moduleName","GOVUKFrontendError","Error","constructor","args","super","this","SupportError","supportMessage","HTMLScriptElement","prototype","ConfigError","ElementError","messageOrOptions","component","identifier","element","expectedType","InitError","componentOrMessage","GOVUKFrontendComponent","$root","_$root","childConstructor","elementType","checkSupport","checkInitialised","HTMLElement","hasAttribute","isInitialised","configOverride","Symbol","for","ConfigurableComponent","param","config","_config","defaults","datasetConfig","dataset","schema","out","entries","Object","properties","entry","namespace","field","toString","normaliseString","type","extractConfigByNamespace","normaliseDataset","mergeConfigs","trimmedValue","trim","output","outputType","length","isFinite","Number","configObjects","formattedConfigObject","configObject","key","keys","override","newObject","current","keyParts","index","I18n","translations","_config$locale","locale","lang","t","lookupKey","translation","count","translationPluralForm","getPluralSuffix","match","replacePlaceholders","translationString","formatter","Intl","NumberFormat","supportedLocalesOf","replace","placeholderWithBraces","placeholderKey","hasOwnProperty","placeholderValue","format","hasIntlPluralRulesSupport","Boolean","PluralRules","preferredForm","select","selectPluralFormUsingFallbackRules","console","warn","Math","abs","floor","ruleset","getPluralRulesForLocale","pluralRules","localeShort","pluralRule","pluralRulesMap","languages","arabic","chinese","french","german","irish","russian","scottish","spanish","welsh","n","lastTwo","last","Accordion","i18n","controlsClass","showAllClass","showAllTextClass","sectionClass","sectionExpandedClass","sectionButtonClass","sectionHeaderClass","sectionHeadingClass","sectionHeadingDividerClass","sectionHeadingTextClass","sectionHeadingTextFocusClass","sectionShowHideToggleClass","sectionShowHideToggleFocusClass","sectionShowHideTextClass","upChevronIconClass","downChevronIconClass","sectionSummaryClass","sectionSummaryFocusClass","sectionContentClass","$sections","$showAllButton","$showAllIcon","$showAllText","querySelectorAll","initControls","initSectionHeaders","updateShowAllButton","areAllSectionsOpen","createElement","add","appendChild","$accordionControls","insertBefore","firstChild","onShowOrHideAllToggle","event","onBeforeMatch","forEach","$section","i","$header","querySelector","constructHeaderMarkup","setExpanded","isExpanded","onSectionToggle","setInitialState","$span","$heading","$summary","$button","id","attr","from","attributes","$headingText","$headingTextFocus","childNodes","$child","$showHideToggle","$showHideToggleFocus","$showHideText","$showHideIcon","getButtonPunctuationEl","$summarySpan","$summarySpanFocus","remove","removeChild","$fragment","target","Element","closest","nowExpanded","storeState","expanded","$content","newButtonText","textContent","ariaLabelParts","push","ariaLabelMessage","join","every","toggle","getIdentifier","rememberExpanded","sessionStorage","setItem","exception","state","getItem","$punctuationEl","freeze","hideAllSections","hideSection","hideSectionAriaLabel","showAllSections","showSection","showSectionAriaLabel","Button","debounceFormSubmitTimer","handleKeyDown","debounce","$target","preventDefault","click","preventDoubleClick","setTimeout","DEBOUNCE_TIMEOUT_IN_SECONDS","closestAttributeValue","attributeName","$closestElementWithAttribute","CharacterCount","configOverrides","maxlength","maxwords","_ref","_this$config$maxwords","$textarea","$visibleCountMessage","$screenReaderCountMessage","lastInputTimestamp","lastInputValue","valueChecker","maxLength","HTMLTextAreaElement","HTMLInputElement","errors","validationErrors","conditions","required","errorMessage","validateConfig","Infinity","textareaDescriptionId","$textareaDescription","getElementById","insertAdjacentElement","className","bindChangeEvents","updateCountMessage","handleKeyUp","handleFocus","handleBlur","updateVisibleCountMessage","Date","now","setInterval","updateIfValueChanged","clearInterval","updateScreenReaderCountMessage","isError","isOverThreshold","getCountMessage","text","_text$match","remainingNumber","countType","formatCountMessage","translationKeySuffix","threshold","currentLength","charactersUnderLimit","one","other","charactersAtLimit","charactersOverLimit","wordsUnderLimit","wordsAtLimit","wordsOverLimit","textareaDescription","anyOf","Checkboxes","$inputs","$input","targetId","syncAllConditionalReveals","handleClick","syncConditionalRevealWithInputState","inputIsChecked","checked","unCheckAllInputsExcept","$inputWithSameName","form","unCheckExclusiveInputs","$exclusiveInput","$clickedInput","ErrorSummary","disableAutoFocus","focusTarget","HTMLAnchorElement","inputId","href","$legendOrLabel","getAssociatedLegendOrLabel","scrollIntoView","preventScroll","_document$querySelect","$fieldset","$legends","getElementsByTagName","$candidateLegend","legendTop","getBoundingClientRect","top","inputRect","height","innerHeight","ExitThisPage","$skiplinkButton","$updateSpan","$indicatorContainer","$overlay","keypressCounter","lastKeyWasModified","timeoutTime","keypressTimeoutId","timeoutMessageId","buildIndicator","initUpdateSpan","initButtonClickHandler","handleKeypress","bind","govukFrontendExitThisPageKeypress","resetPage","$indicator","updateIndicator","exitPage","location","resetKeypressTimer","clearTimeout","setKeypressTimer","shiftKey","activated","timedOut","pressTwoMoreTimes","pressOneMoreTime","Header","$menuButton","$menu","menuIsOpen","mql","menuId","setupResponsiveChecks","handleMenuButtonClick","breakpoint","matchMedia","checkMode","addListener","matches","NotificationBanner","PasswordInput","$showHideButton","$screenReaderStatusMessage","HTMLButtonElement","hide","persisted","show","setType","isHidden","prefixButton","prefixStatus","innerText","showPassword","hidePassword","showPasswordAriaLabel","hidePasswordAriaLabel","passwordShownAnnouncement","passwordHiddenAnnouncement","Radios","$allInputs","$clickedInputForm","$clickedInputName","hasSameFormOwner","ServiceNavigation","SkipLink","_this$$root$getAttrib","hash","URL","error","origin","pathname","linkedElementId","$linkedElement","Tabs","$tabs","$tabList","$tabListItems","jsHiddenClass","changingHash","boundTabClick","boundTabKeydown","boundOnHashChange","onTabClick","onTabKeydown","onHashChange","_this$mql","setup","teardown","_this$getTab","$item","$tab","setAttributes","hideTab","$activeTab","getTab","showTab","removeEventListener","unsetAttributes","$tabWithHash","$previousTab","getCurrentTab","unhighlightTab","hidePanel","highlightTab","showPanel","panelId","$panel","getPanel","$currentTab","$nextTab","currentTarget","createHistoryEntry","activatePreviousTab","activateNextTab","parentElement","$nextTabListItem","nextElementSibling","$previousTabListItem","previousElementSibling","initAll","_config$scope","onError","log","components","accordion","button","characterCount","errorSummary","exitThisPage","notificationBanner","passwordInput","scope","createAll","createAllOptions","_createAllOptions$sco","$elements","map","filter"],"mappings":"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"}