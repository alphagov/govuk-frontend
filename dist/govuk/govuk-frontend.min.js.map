{"version":3,"file":"govuk-frontend.min.js","sources":["../../src/govuk/common/govuk-frontend-version.mjs","../../src/govuk/common/index.mjs","../../src/govuk/errors/index.mjs","../../src/govuk/component.mjs","../../src/govuk/common/configuration.mjs","../../src/govuk/i18n.mjs","../../src/govuk/components/accordion/accordion.mjs","../../src/govuk/components/button/button.mjs","../../src/govuk/common/closest-attribute-value.mjs","../../src/govuk/components/character-count/character-count.mjs","../../src/govuk/components/checkboxes/checkboxes.mjs","../../src/govuk/components/error-summary/error-summary.mjs","../../src/govuk/components/exit-this-page/exit-this-page.mjs","../../src/govuk/components/file-upload/file-upload.mjs","../../src/govuk/components/header/header.mjs","../../src/govuk/components/notification-banner/notification-banner.mjs","../../src/govuk/components/password-input/password-input.mjs","../../src/govuk/components/radios/radios.mjs","../../src/govuk/components/service-navigation/service-navigation.mjs","../../src/govuk/components/skip-link/skip-link.mjs","../../src/govuk/components/tabs/tabs.mjs","../../src/govuk/init.mjs"],"sourcesContent":["/*\n * This variable is automatically overwritten during builds and releases.\n * It doesn't need to be updated manually.\n */\n\n/**\n * GOV.UK Frontend release version\n *\n * {@link https://github.com/alphagov/govuk-frontend/releases}\n */\nexport const version = 'development'\n","/**\n * Common helpers which do not require polyfill.\n *\n * IMPORTANT: If a helper require a polyfill, please isolate it in its own module\n * so that the polyfill can be properly tree-shaken and does not burden\n * the components that do not need that helper\n */\n\n/**\n * Get GOV.UK Frontend breakpoint value from CSS custom property\n *\n * @private\n * @param {string} name - Breakpoint name\n * @returns {{ property: string, value?: string }} Breakpoint object\n */\nexport function getBreakpoint(name) {\n  const property = `--govuk-breakpoint-${name}`\n\n  // Get value from `<html>` with breakpoints on CSS :root\n  const value = window\n    .getComputedStyle(document.documentElement)\n    .getPropertyValue(property)\n\n  return {\n    property,\n    value: value || undefined\n  }\n}\n\n/**\n * Move focus to element\n *\n * Sets tabindex to -1 to make the element programmatically focusable,\n * but removes it on blur as the element doesn't need to be focused again.\n *\n * @private\n * @template {HTMLElement} FocusElement\n * @param {FocusElement} $element - HTML element\n * @param {object} [options] - Handler options\n * @param {function(this: FocusElement): void} [options.onBeforeFocus] - Callback before focus\n * @param {function(this: FocusElement): void} [options.onBlur] - Callback on blur\n */\nexport function setFocus($element, options = {}) {\n  const isFocusable = $element.getAttribute('tabindex')\n\n  if (!isFocusable) {\n    $element.setAttribute('tabindex', '-1')\n  }\n\n  /**\n   * Handle element focus\n   */\n  function onFocus() {\n    $element.addEventListener('blur', onBlur, { once: true })\n  }\n\n  /**\n   * Handle element blur\n   */\n  function onBlur() {\n    options.onBlur?.call($element)\n\n    if (!isFocusable) {\n      $element.removeAttribute('tabindex')\n    }\n  }\n\n  // Add listener to reset element on blur, after focus\n  $element.addEventListener('focus', onFocus, { once: true })\n\n  // Focus element\n  options.onBeforeFocus?.call($element)\n  $element.focus()\n}\n\n/**\n * Checks if component is already initialised\n *\n * @internal\n * @param {Element} $root - HTML element to be checked\n * @param {string} moduleName - name of component module\n * @returns {boolean} Whether component is already initialised\n */\nexport function isInitialised($root, moduleName) {\n  return (\n    $root instanceof HTMLElement &&\n    $root.hasAttribute(`data-${moduleName}-init`)\n  )\n}\n\n/**\n * Checks if GOV.UK Frontend is supported on this page\n *\n * Some browsers will load and run our JavaScript but GOV.UK Frontend\n * won't be supported.\n *\n * @param {HTMLElement | null} [$scope] - (internal) `<body>` HTML element checked for browser support\n * @returns {boolean} Whether GOV.UK Frontend is supported on this page\n */\nexport function isSupported($scope = document.body) {\n  if (!$scope) {\n    return false\n  }\n\n  return $scope.classList.contains('govuk-frontend-supported')\n}\n\n/**\n * Check for an array\n *\n * @internal\n * @param {unknown} option - Option to check\n * @returns {boolean} Whether the option is an array\n */\nfunction isArray(option) {\n  return Array.isArray(option)\n}\n\n/**\n * Check for an object\n *\n * @internal\n * @template {Partial<Record<keyof ObjectType, unknown>>} ObjectType\n * @param {unknown | ObjectType} option - Option to check\n * @returns {option is ObjectType} Whether the option is an object\n */\nexport function isObject(option) {\n  return !!option && typeof option === 'object' && !isArray(option)\n}\n\n/**\n * Check for valid scope\n *\n * @internal\n * @template {Element | Document} ScopeType\n * @param {unknown | ScopeType} $scope - Scope of the document to search within\n * @returns {$scope is ScopeType} Whether the scope can be queried\n */\nexport function isScope($scope) {\n  return !!$scope && ($scope instanceof Element || $scope instanceof Document)\n}\n\n/**\n * Format error message\n *\n * @internal\n * @param {ComponentWithModuleName} Component - Component that threw the error\n * @param {string} message - Error message\n * @returns {string} - Formatted error message\n */\nexport function formatErrorMessage(Component, message) {\n  return `${Component.moduleName}: ${message}`\n}\n\n/* eslint-disable jsdoc/valid-types --\n * `{new(...args: any[] ): object}` is not recognised as valid\n * https://github.com/gajus/eslint-plugin-jsdoc/issues/145#issuecomment-1308722878\n * https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/issues/131\n **/\n\n/**\n * @typedef ComponentWithModuleName\n * @property {string} moduleName - Name of the component\n */\n\n/* eslint-enable jsdoc/valid-types */\n","import { formatErrorMessage, isObject } from '../common/index.mjs'\n\n/**\n * GOV.UK Frontend error\n *\n * A base class for `Error`s thrown by GOV.UK Frontend.\n *\n * It is meant to be extended into specific types of errors\n * to be thrown by our code.\n *\n * @example\n * ```js\n * class MissingRootError extends GOVUKFrontendError {\n *   // Setting an explicit name is important as extending the class will not\n *   // set a new `name` on the subclass. The `name` property is important\n *   // to ensure intelligible error names even if the class name gets\n *   // mangled by a minifier\n *   name = \"MissingRootError\"\n * }\n * ```\n * @virtual\n */\nexport class GOVUKFrontendError extends Error {\n  name = 'GOVUKFrontendError'\n}\n\n/**\n * Indicates that GOV.UK Frontend is not supported\n */\nexport class SupportError extends GOVUKFrontendError {\n  name = 'SupportError'\n\n  /**\n   * Checks if GOV.UK Frontend is supported on this page\n   *\n   * @param {HTMLElement | null} [$scope] - HTML element `<body>` checked for browser support\n   */\n  constructor($scope = document.body) {\n    const supportMessage =\n      'noModule' in HTMLScriptElement.prototype\n        ? 'GOV.UK Frontend initialised without `<body class=\"govuk-frontend-supported\">` from template `<script>` snippet'\n        : 'GOV.UK Frontend is not supported in this browser'\n\n    super(\n      $scope\n        ? supportMessage\n        : 'GOV.UK Frontend initialised without `<script type=\"module\">`'\n    )\n  }\n}\n\n/**\n * Indicates that a component has received an illegal configuration\n */\nexport class ConfigError extends GOVUKFrontendError {\n  name = 'ConfigError'\n}\n\n/**\n * Indicates an issue with an element (possibly `null` or `undefined`)\n */\nexport class ElementError extends GOVUKFrontendError {\n  name = 'ElementError'\n\n  /**\n   * @internal\n   * @overload\n   * @param {string} message - Element error message\n   */\n\n  /**\n   * @internal\n   * @overload\n   * @param {ElementErrorOptions} options - Element error options\n   */\n\n  /**\n   * @internal\n   * @param {string | ElementErrorOptions} messageOrOptions - Element error message or options\n   */\n  constructor(messageOrOptions) {\n    let message = typeof messageOrOptions === 'string' ? messageOrOptions : ''\n\n    // Build message from options\n    if (isObject(messageOrOptions)) {\n      const { component, identifier, element, expectedType } = messageOrOptions\n\n      message = identifier\n\n      // Append reason\n      message += element\n        ? ` is not of type ${expectedType ?? 'HTMLElement'}`\n        : ' not found'\n\n      // Prepend with module name (optional)\n      if (component) {\n        message = formatErrorMessage(component, message)\n      }\n    }\n\n    super(message)\n  }\n}\n\n/**\n * Indicates that a component is already initialised\n */\nexport class InitError extends GOVUKFrontendError {\n  name = 'InitError'\n\n  /**\n   * @internal\n   * @param {ComponentWithModuleName | string} componentOrMessage - name of the component module\n   */\n  constructor(componentOrMessage) {\n    const message =\n      typeof componentOrMessage === 'string'\n        ? componentOrMessage\n        : formatErrorMessage(\n            componentOrMessage,\n            `Root element (\\`$root\\`) already initialised`\n          )\n\n    super(message)\n  }\n}\n\n/**\n * Element error options\n *\n * @internal\n * @typedef {object} ElementErrorOptions\n * @property {Element | Document | null} [element] - The element in error (optional)\n * @property {ComponentWithModuleName} [component] - Component throwing the error (optional)\n * @property {string} identifier - An identifier that'll let the user understand which element has an error. This is whatever makes the most sense\n * @property {string} [expectedType] - The type that was expected for the identifier (optional)\n */\n\n/**\n * @import { ComponentWithModuleName } from '../common/index.mjs'\n */\n","import { isInitialised, isSupported } from './common/index.mjs'\nimport { ElementError, InitError, SupportError } from './errors/index.mjs'\n\n/**\n * Base Component class\n *\n * Centralises the behaviours shared by our components\n *\n * @virtual\n * @template {Element} [RootElementType=HTMLElement]\n */\nexport class Component {\n  /**\n   * @type {typeof Element}\n   */\n  static elementType = HTMLElement\n\n  // allows Typescript user to work around the lack of types\n  // in GOVUKFrontend package, Typescript is not aware of $root\n  // in components that extend GOVUKFrontendComponent\n  /**\n   * Returns the root element of the component\n   *\n   * @protected\n   * @returns {RootElementType} - the root element of component\n   */\n  get $root() {\n    return this._$root\n  }\n\n  /**\n   * @protected\n   * @type {RootElementType}\n   */\n  _$root\n\n  /**\n   * Constructs a new component, validating that GOV.UK Frontend is supported\n   *\n   * @internal\n   * @param {Element | null} [$root] - HTML element to use for component\n   */\n  constructor($root) {\n    const childConstructor = /** @type {ChildClassConstructor} */ (\n      this.constructor\n    )\n\n    // TypeScript does not enforce that inheriting classes will define a `moduleName`\n    // (even if we add a `@virtual` `static moduleName` property to this class).\n    // While we trust users to do this correctly, we do a little check to provide them\n    // a helpful error message.\n    //\n    // After this, we'll be sure that `childConstructor` has a `moduleName`\n    // as expected of the `ChildClassConstructor` we've cast `this.constructor` to.\n    if (typeof childConstructor.moduleName !== 'string') {\n      throw new InitError(`\\`moduleName\\` not defined in component`)\n    }\n\n    if (!($root instanceof childConstructor.elementType)) {\n      throw new ElementError({\n        element: $root,\n        component: childConstructor,\n        identifier: 'Root element (`$root`)',\n        expectedType: childConstructor.elementType.name\n      })\n    } else {\n      this._$root = /** @type {RootElementType} */ ($root)\n    }\n\n    childConstructor.checkSupport()\n\n    this.checkInitialised()\n\n    const moduleName = childConstructor.moduleName\n\n    this.$root.setAttribute(`data-${moduleName}-init`, '')\n  }\n\n  /**\n   * Validates whether component is already initialised\n   *\n   * @private\n   * @throws {InitError} when component is already initialised\n   */\n  checkInitialised() {\n    const constructor = /** @type {ChildClassConstructor} */ (this.constructor)\n    const moduleName = constructor.moduleName\n\n    if (moduleName && isInitialised(this.$root, moduleName)) {\n      throw new InitError(constructor)\n    }\n  }\n\n  /**\n   * Validates whether components are supported\n   *\n   * @throws {SupportError} when the components are not supported\n   */\n  static checkSupport() {\n    if (!isSupported()) {\n      throw new SupportError()\n    }\n  }\n}\n\n/**\n * @typedef ChildClass\n * @property {string} moduleName - The module name that'll be looked for in the DOM when initialising the component\n */\n\n/**\n * @typedef {typeof Component & ChildClass} ChildClassConstructor\n */\n","import { Component } from '../component.mjs'\nimport { ConfigError } from '../errors/index.mjs'\n\nimport { isObject, isScope, formatErrorMessage } from './index.mjs'\n\nexport const configOverride = Symbol.for('configOverride')\n\n/**\n * Base Component class\n *\n * Centralises the behaviours shared by our components\n *\n * @virtual\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} [ConfigurationType=ObjectNested]\n * @template {Element & { dataset: DOMStringMap }} [RootElementType=HTMLElement]\n * @augments Component<RootElementType>\n */\nexport class ConfigurableComponent extends Component {\n  /**\n   * configOverride\n   *\n   * Function which defines configuration overrides to prioritize\n   * properties from the root element's dataset.\n   *\n   * It should take a subset of configuration as input and return\n   * a new configuration object with properties that should be\n   * overridden based on the root element's dataset. A Symbol\n   * is used for indexing to prevent conflicts.\n   *\n   * @internal\n   * @virtual\n   * @param {Partial<ConfigurationType>} [param] - Configuration object\n   * @returns {Partial<ConfigurationType>} return - Configuration object\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  [configOverride](param) {\n    return {}\n  }\n\n  /**\n   * Returns the root element of the component\n   *\n   * @protected\n   * @returns {ConfigurationType} - the root element of component\n   */\n  get config() {\n    return this._config\n  }\n\n  /**\n   *\n   * @type {ConfigurationType}\n   */\n  _config\n\n  /**\n   * Constructs a new component, validating that GOV.UK Frontend is supported\n   *\n   * @internal\n   * @param {Element | null} [$root] - HTML element to use for component\n   * @param {ConfigurationType} [config] - HTML element to use for component\n   */\n  constructor($root, config) {\n    super($root)\n\n    const childConstructor =\n      /** @type {ChildClassConstructor<ConfigurationType>} */ (this.constructor)\n\n    if (!isObject(childConstructor.defaults)) {\n      throw new ConfigError(\n        formatErrorMessage(\n          childConstructor,\n          'Config passed as parameter into constructor but no defaults defined'\n        )\n      )\n    }\n\n    const datasetConfig = /** @type {ConfigurationType} */ (\n      normaliseDataset(childConstructor, this._$root.dataset)\n    )\n\n    this._config = /** @type {ConfigurationType} */ (\n      mergeConfigs(\n        childConstructor.defaults,\n        config ?? {},\n        this[configOverride](datasetConfig),\n        datasetConfig\n      )\n    )\n  }\n}\n\n/**\n * Normalise string\n *\n * 'If it looks like a duck, and it quacks like a duck…' 🦆\n *\n * If the passed value looks like a boolean or a number, convert it to a boolean\n * or number.\n *\n * Designed to be used to convert config passed via data attributes (which are\n * always strings) into something sensible.\n *\n * @internal\n * @param {DOMStringMap[string]} value - The value to normalise\n * @param {SchemaProperty} [property] - Component schema property\n * @returns {string | boolean | number | undefined} Normalised data\n */\nexport function normaliseString(value, property) {\n  const trimmedValue = value ? value.trim() : ''\n\n  let output\n  let outputType = property?.type\n\n  // No schema type set? Determine automatically\n  if (!outputType) {\n    if (['true', 'false'].includes(trimmedValue)) {\n      outputType = 'boolean'\n    }\n\n    // Empty / whitespace-only strings are considered finite so we need to check\n    // the length of the trimmed string as well\n    if (trimmedValue.length > 0 && isFinite(Number(trimmedValue))) {\n      outputType = 'number'\n    }\n  }\n\n  switch (outputType) {\n    case 'boolean':\n      output = trimmedValue === 'true'\n      break\n\n    case 'number':\n      output = Number(trimmedValue)\n      break\n\n    default:\n      output = value\n  }\n\n  return output\n}\n\n/**\n * Normalise dataset\n *\n * Loop over an object and normalise each value using {@link normaliseString},\n * optionally expanding nested `i18n.field`\n *\n * @internal\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} ConfigurationType\n * @template {[keyof ConfigurationType, SchemaProperty | undefined][]} SchemaEntryType\n * @param {{ schema?: Schema<ConfigurationType>, moduleName: string }} Component - Component class\n * @param {DOMStringMap} dataset - HTML element dataset\n * @returns {ObjectNested} Normalised dataset\n */\nexport function normaliseDataset(Component, dataset) {\n  if (!isObject(Component.schema)) {\n    throw new ConfigError(\n      formatErrorMessage(\n        Component,\n        'Config passed as parameter into constructor but no schema defined'\n      )\n    )\n  }\n\n  const out = /** @type {ObjectNested} */ ({})\n  const entries = /** @type {SchemaEntryType} */ (\n    Object.entries(Component.schema.properties)\n  )\n\n  // Normalise top-level dataset ('data-*') values using schema types\n  for (const entry of entries) {\n    const [namespace, property] = entry\n\n    // Cast the `namespace` to string so it can be used to access the dataset\n    const field = namespace.toString()\n\n    if (field in dataset) {\n      out[field] = normaliseString(dataset[field], property)\n    }\n\n    /**\n     * Extract and normalise nested object values automatically using\n     * {@link normaliseString} but only schema object types are allowed\n     */\n    if (property?.type === 'object') {\n      out[field] = extractConfigByNamespace(\n        Component.schema,\n        dataset,\n        namespace\n      )\n    }\n  }\n\n  return out\n}\n\n/**\n * Normalise options passed to `initAll` or `createAll`\n *\n * @internal\n * @template {CompatibleClass} ComponentClass\n * @param {Config | CreateAllOptions<ComponentClass> | OnErrorCallback<ComponentClass> | Element | Document | null} [scopeOrOptions] - Scope of the document to search within, initialisation options or error callback function\n * @returns {CreateAllOptions<ComponentClass>} Normalised options\n */\nexport function normaliseOptions(scopeOrOptions) {\n  let /** @type {Element | Document | null} */ $scope = document\n  let /** @type {OnErrorCallback<ComponentClass> | undefined} */ onError\n\n  // Handle options object\n  if (isObject(scopeOrOptions)) {\n    const options = scopeOrOptions\n\n    // Scope must be valid or null\n    if (isScope(options.scope) || options.scope === null) {\n      $scope = options.scope\n    }\n\n    // Error handler must be a function\n    if (typeof options.onError === 'function') {\n      onError = options.onError\n    }\n  }\n\n  if (isScope(scopeOrOptions)) {\n    $scope = scopeOrOptions\n  } else if (scopeOrOptions === null) {\n    $scope = null\n  } else if (typeof scopeOrOptions === 'function') {\n    onError = scopeOrOptions\n  }\n\n  return {\n    scope: $scope,\n    onError\n  }\n}\n\n/**\n * Config merging function\n *\n * Takes any number of objects and combines them together, with\n * greatest priority on the LAST item passed in.\n *\n * @internal\n * @param {...{ [key: string]: unknown }} configObjects - Config objects to merge\n * @returns {{ [key: string]: unknown }} A merged config object\n */\nexport function mergeConfigs(...configObjects) {\n  // Start with an empty object as our base\n  /** @type {{ [key: string]: unknown }} */\n  const formattedConfigObject = {}\n\n  // Loop through each of the passed objects\n  for (const configObject of configObjects) {\n    for (const key of Object.keys(configObject)) {\n      const option = formattedConfigObject[key]\n      const override = configObject[key]\n\n      // Push their keys one-by-one into formattedConfigObject. Any duplicate\n      // keys with object values will be merged, otherwise the new value will\n      // override the existing value.\n      if (isObject(option) && isObject(override)) {\n        formattedConfigObject[key] = mergeConfigs(option, override)\n      } else {\n        // Apply override\n        formattedConfigObject[key] = override\n      }\n    }\n  }\n\n  return formattedConfigObject\n}\n\n/**\n * Validate component config by schema\n *\n * Follows limited examples in JSON schema for wider support in future\n *\n * {@link https://ajv.js.org/json-schema.html#compound-keywords}\n * {@link https://ajv.js.org/packages/ajv-errors.html#single-message}\n *\n * @internal\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} ConfigurationType\n * @param {Schema<ConfigurationType>} schema - The schema of a component\n * @param {ConfigurationType} config - Component config\n * @returns {string[]} List of validation errors\n */\nexport function validateConfig(schema, config) {\n  const validationErrors = []\n\n  // Check errors for each schema\n  for (const [name, conditions] of Object.entries(schema)) {\n    const errors = []\n\n    // Check errors for each schema condition\n    if (Array.isArray(conditions)) {\n      for (const { required, errorMessage } of conditions) {\n        if (!required.every((key) => !!config[key])) {\n          errors.push(errorMessage) // Missing config key value\n        }\n      }\n\n      // Check one condition passes or add errors\n      if (name === 'anyOf' && !(conditions.length - errors.length >= 1)) {\n        validationErrors.push(...errors)\n      }\n    }\n  }\n\n  return validationErrors\n}\n\n/**\n * Extracts keys starting with a particular namespace from dataset ('data-*')\n * object, removing the namespace in the process, normalising all values\n *\n * @internal\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} ConfigurationType\n * @param {Schema<ConfigurationType>} schema - The schema of a component\n * @param {DOMStringMap} dataset - The object to extract key-value pairs from\n * @param {keyof ConfigurationType} namespace - The namespace to filter keys with\n * @returns {ObjectNested | undefined} Nested object with dot-separated key namespace removed\n */\nexport function extractConfigByNamespace(schema, dataset, namespace) {\n  const property = schema.properties[namespace]\n\n  // Only extract configs for object schema properties\n  if (property?.type !== 'object') {\n    return\n  }\n\n  // Add default empty config\n  const newObject = /** @type {Record<typeof namespace, ObjectNested>} */ ({\n    [namespace]: {}\n  })\n\n  for (const [key, value] of Object.entries(dataset)) {\n    /** @type {ObjectNested | ObjectNested[NestedKey]} */\n    let current = newObject\n\n    // Split the key into parts, using . as our namespace separator\n    const keyParts = key.split('.')\n\n    /**\n     * Create new level per part\n     *\n     * e.g. 'i18n.textareaDescription.other' becomes\n     * `{ i18n: { textareaDescription: { other } } }`\n     */\n    for (const [index, name] of keyParts.entries()) {\n      if (isObject(current)) {\n        // Drop down to nested object until the last part\n        if (index < keyParts.length - 1) {\n          // New nested object (optionally) replaces existing value\n          if (!isObject(current[name])) {\n            current[name] = {}\n          }\n\n          // Drop down into new or existing nested object\n          current = current[name]\n        } else if (key !== namespace) {\n          // Normalised value (optionally) replaces existing value\n          current[name] = normaliseString(value)\n        }\n      }\n    }\n  }\n\n  return newObject[namespace]\n}\n\n/**\n * @internal\n * @typedef {keyof ObjectNested} NestedKey\n * @typedef {{ [key: string]: string | boolean | number | ObjectNested | undefined }} ObjectNested\n */\n\n/**\n * Schema for component config\n *\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} ConfigurationType\n * @typedef {object} Schema\n * @property {Record<keyof ConfigurationType, SchemaProperty | undefined>} properties - Schema properties\n * @property {SchemaCondition<ConfigurationType>[]} [anyOf] - List of schema conditions\n */\n\n/**\n * Schema property for component config\n *\n * @typedef {object} SchemaProperty\n * @property {'string' | 'boolean' | 'number' | 'object'} type - Property type\n */\n\n/**\n * Schema condition for component config\n *\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} ConfigurationType\n * @typedef {object} SchemaCondition\n * @property {(keyof ConfigurationType)[]} required - List of required config fields\n * @property {string} errorMessage - Error message when required config fields not provided\n */\n\n/**\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} [ConfigurationType=ObjectNested]\n * @typedef ChildClass\n * @property {string} moduleName - The module name that'll be looked for in the DOM when initialising the component\n * @property {Schema<ConfigurationType>} [schema] - The schema of the component configuration\n * @property {ConfigurationType} [defaults] - The default values of the configuration of the component\n */\n\n/**\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} [ConfigurationType=ObjectNested]\n * @typedef {typeof Component & ChildClass<ConfigurationType>} ChildClassConstructor<ConfigurationType>\n */\n\n/**\n * @import { CompatibleClass, Config, CreateAllOptions, OnErrorCallback } from '../init.mjs'\n */\n","import { isObject } from './common/index.mjs'\n\n/**\n * Internal support for selecting messages to render, with placeholder\n * interpolation and locale-aware number formatting and pluralisation\n *\n * @internal\n */\nexport class I18n {\n  translations\n  locale\n\n  /**\n   * @internal\n   * @param {{ [key: string]: string | TranslationPluralForms }} translations - Key-value pairs of the translation strings to use.\n   * @param {object} [config] - Configuration options for the function.\n   * @param {string | null} [config.locale] - An overriding locale for the PluralRules functionality.\n   */\n  constructor(translations = {}, config = {}) {\n    // Make list of translations available throughout function\n    this.translations = translations\n\n    // The locale to use for PluralRules and NumberFormat\n    this.locale = config.locale ?? (document.documentElement.lang || 'en')\n  }\n\n  /**\n   * The most used function - takes the key for a given piece of UI text and\n   * returns the appropriate string.\n   *\n   * @internal\n   * @param {string} lookupKey - The lookup key of the string to use.\n   * @param {{ [key: string]: unknown }} [options] - Any options passed with the translation string, e.g: for string interpolation.\n   * @returns {string} The appropriate translation string.\n   * @throws {Error} Lookup key required\n   * @throws {Error} Options required for `${}` placeholders\n   */\n  t(lookupKey, options) {\n    if (!lookupKey) {\n      // Print a console error if no lookup key has been provided\n      throw new Error('i18n: lookup key missing')\n    }\n\n    // Fetch the translation for that lookup key\n    let translation = this.translations[lookupKey]\n\n    // If the `count` option is set, determine which plural suffix is needed and\n    // change the lookupKey to match. We check to see if it's numeric instead of\n    // falsy, as this could legitimately be 0.\n    if (typeof options?.count === 'number' && isObject(translation)) {\n      const translationPluralForm =\n        translation[this.getPluralSuffix(lookupKey, options.count)]\n\n      // Update translation with plural suffix\n      if (translationPluralForm) {\n        translation = translationPluralForm\n      }\n    }\n\n    if (typeof translation === 'string') {\n      // Check for ${} placeholders in the translation string\n      // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec\n      if (translation.match(/%{(.\\S+)}/)) {\n        if (!options) {\n          throw new Error(\n            'i18n: cannot replace placeholders in string if no option data provided'\n          )\n        }\n\n        return this.replacePlaceholders(translation, options)\n      }\n\n      return translation\n    }\n\n    // If the key wasn't found in our translations object,\n    // return the lookup key itself as the fallback\n    return lookupKey\n  }\n\n  /**\n   * Takes a translation string with placeholders, and replaces the placeholders\n   * with the provided data\n   *\n   * @internal\n   * @param {string} translationString - The translation string\n   * @param {{ [key: string]: unknown }} options - Any options passed with the translation string, e.g: for string interpolation.\n   * @returns {string} The translation string to output, with $\\{\\} placeholders replaced\n   */\n  replacePlaceholders(translationString, options) {\n    const formatter = Intl.NumberFormat.supportedLocalesOf(this.locale).length\n      ? new Intl.NumberFormat(this.locale)\n      : undefined\n\n    return translationString.replace(\n      /%{(.\\S+)}/g,\n\n      /**\n       * Replace translation string placeholders\n       *\n       * @internal\n       * @param {string} placeholderWithBraces - Placeholder with braces\n       * @param {string} placeholderKey - Placeholder key\n       * @returns {string} Placeholder value\n       */\n      function (placeholderWithBraces, placeholderKey) {\n        if (Object.prototype.hasOwnProperty.call(options, placeholderKey)) {\n          const placeholderValue = options[placeholderKey]\n\n          // If a user has passed `false` as the value for the placeholder\n          // treat it as though the value should not be displayed\n          if (\n            placeholderValue === false ||\n            (typeof placeholderValue !== 'number' &&\n              typeof placeholderValue !== 'string')\n          ) {\n            return ''\n          }\n\n          // If the placeholder's value is a number, localise the number formatting\n          if (typeof placeholderValue === 'number') {\n            return formatter\n              ? formatter.format(placeholderValue)\n              : `${placeholderValue}`\n          }\n\n          return placeholderValue\n        }\n\n        throw new Error(\n          `i18n: no data found to replace ${placeholderWithBraces} placeholder in string`\n        )\n      }\n    )\n  }\n\n  /**\n   * Check to see if the browser supports Intl.PluralRules\n   *\n   * It requires all conditions to be met in order to be supported:\n   * - The implementation of Intl supports PluralRules (NOT true in Safari 10–12)\n   * - The browser/OS has plural rules for the current locale (browser dependent)\n   *\n   * {@link https://browsersl.ist/#q=supports+es6-module+and+not+supports+intl-pluralrules}\n   *\n   * @internal\n   * @returns {boolean} Returns true if all conditions are met. Returns false otherwise.\n   */\n  hasIntlPluralRulesSupport() {\n    return Boolean(\n      'PluralRules' in window.Intl &&\n        Intl.PluralRules.supportedLocalesOf(this.locale).length\n    )\n  }\n\n  /**\n   * Get the appropriate suffix for the plural form.\n   *\n   * Uses Intl.PluralRules (or our own fallback implementation) to get the\n   * 'preferred' form to use for the given count.\n   *\n   * Checks that a translation has been provided for that plural form – if it\n   * hasn't, it'll fall back to the 'other' plural form (unless that doesn't exist\n   * either, in which case an error will be thrown)\n   *\n   * @internal\n   * @param {string} lookupKey - The lookup key of the string to use.\n   * @param {number} count - Number used to determine which pluralisation to use.\n   * @returns {PluralRule} The suffix associated with the correct pluralisation for this locale.\n   * @throws {Error} Plural form `.other` required when preferred plural form is missing\n   */\n  getPluralSuffix(lookupKey, count) {\n    // Validate that the number is actually a number.\n    //\n    // Number(count) will turn anything that can't be converted to a Number type\n    // into 'NaN'. isFinite filters out NaN, as it isn't a finite number.\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-conversion\n    count = Number(count)\n    if (!isFinite(count)) {\n      return 'other'\n    }\n\n    // Fetch the translation for that lookup key\n    const translation = this.translations[lookupKey]\n\n    // Check to verify that all the requirements for Intl.PluralRules are met.\n    // If so, we can use that instead of our custom implementation. Otherwise,\n    // use the hardcoded fallback.\n    const preferredForm = this.hasIntlPluralRulesSupport()\n      ? new Intl.PluralRules(this.locale).select(count)\n      : 'other'\n\n    // Use the correct plural form if provided\n    if (isObject(translation)) {\n      if (preferredForm in translation) {\n        return preferredForm\n        // Fall back to `other` if the plural form is missing, but log a warning\n        // to the console\n      } else if ('other' in translation) {\n        console.warn(\n          `i18n: Missing plural form \".${preferredForm}\" for \"${this.locale}\" locale. Falling back to \".other\".`\n        )\n\n        return 'other'\n      }\n    }\n\n    // If the required `other` plural form is missing, all we can do is error\n    throw new Error(\n      `i18n: Plural form \".other\" is required for \"${this.locale}\" locale`\n    )\n  }\n}\n\n/**\n * Plural rule category mnemonic tags\n *\n * @internal\n * @typedef {'zero' | 'one' | 'two' | 'few' | 'many' | 'other'} PluralRule\n */\n\n/**\n * Translated message by plural rule they correspond to.\n *\n * Allows to group pluralised messages under a single key when passing\n * translations to a component's constructor\n *\n * @internal\n * @typedef {object} TranslationPluralForms\n * @property {string} [other] - General plural form\n * @property {string} [zero] - Plural form used with 0\n * @property {string} [one] - Plural form used with 1\n * @property {string} [two] - Plural form used with 2\n * @property {string} [few] - Plural form used for a few\n * @property {string} [many] - Plural form used for many\n */\n","import { ConfigurableComponent } from '../../common/configuration.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { I18n } from '../../i18n.mjs'\n\n/**\n * Accordion component\n *\n * This allows a collection of sections to be collapsed by default, showing only\n * their headers. Sections can be expanded or collapsed individually by clicking\n * their headers. A \"Show all sections\" button is also added to the top of the\n * accordion, which switches to \"Hide all sections\" when all the sections are\n * expanded.\n *\n * The state of each section is saved to the DOM via the `aria-expanded`\n * attribute, which also provides accessibility.\n *\n * @preserve\n * @augments ConfigurableComponent<AccordionConfig>\n */\nexport class Accordion extends ConfigurableComponent {\n  /** @private */\n  i18n\n\n  /** @private */\n  controlsClass = 'govuk-accordion__controls'\n\n  /** @private */\n  showAllClass = 'govuk-accordion__show-all'\n\n  /** @private */\n  showAllTextClass = 'govuk-accordion__show-all-text'\n\n  /** @private */\n  sectionClass = 'govuk-accordion__section'\n\n  /** @private */\n  sectionExpandedClass = 'govuk-accordion__section--expanded'\n\n  /** @private */\n  sectionButtonClass = 'govuk-accordion__section-button'\n\n  /** @private */\n  sectionHeaderClass = 'govuk-accordion__section-header'\n\n  /** @private */\n  sectionHeadingClass = 'govuk-accordion__section-heading'\n\n  /** @private */\n  sectionHeadingDividerClass = 'govuk-accordion__section-heading-divider'\n\n  /** @private */\n  sectionHeadingTextClass = 'govuk-accordion__section-heading-text'\n\n  /** @private */\n  sectionHeadingTextFocusClass = 'govuk-accordion__section-heading-text-focus'\n\n  /** @private */\n  sectionShowHideToggleClass = 'govuk-accordion__section-toggle'\n\n  /** @private */\n  sectionShowHideToggleFocusClass = 'govuk-accordion__section-toggle-focus'\n\n  /** @private */\n  sectionShowHideTextClass = 'govuk-accordion__section-toggle-text'\n\n  /** @private */\n  upChevronIconClass = 'govuk-accordion-nav__chevron'\n\n  /** @private */\n  downChevronIconClass = 'govuk-accordion-nav__chevron--down'\n\n  /** @private */\n  sectionSummaryClass = 'govuk-accordion__section-summary'\n\n  /** @private */\n  sectionSummaryFocusClass = 'govuk-accordion__section-summary-focus'\n\n  /** @private */\n  sectionContentClass = 'govuk-accordion__section-content'\n\n  /** @private */\n  $sections\n\n  /**\n   * @private\n   * @type {HTMLButtonElement | null}\n   */\n  $showAllButton = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $showAllIcon = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $showAllText = null\n\n  /**\n   * @param {Element | null} $root - HTML element to use for accordion\n   * @param {AccordionConfig} [config] - Accordion config\n   */\n  constructor($root, config = {}) {\n    super($root, config)\n\n    this.i18n = new I18n(this.config.i18n)\n\n    const $sections = this.$root.querySelectorAll(`.${this.sectionClass}`)\n    if (!$sections.length) {\n      throw new ElementError({\n        component: Accordion,\n        identifier: `Sections (\\`<div class=\"${this.sectionClass}\">\\`)`\n      })\n    }\n\n    this.$sections = $sections\n\n    this.initControls()\n    this.initSectionHeaders()\n\n    this.updateShowAllButton(this.areAllSectionsOpen())\n  }\n\n  /**\n   * Initialise controls and set attributes\n   *\n   * @private\n   */\n  initControls() {\n    // Create \"Show all\" button and set attributes\n    this.$showAllButton = document.createElement('button')\n    this.$showAllButton.setAttribute('type', 'button')\n    this.$showAllButton.setAttribute('class', this.showAllClass)\n    this.$showAllButton.setAttribute('aria-expanded', 'false')\n\n    // Create icon, add to element\n    this.$showAllIcon = document.createElement('span')\n    this.$showAllIcon.classList.add(this.upChevronIconClass)\n    this.$showAllButton.appendChild(this.$showAllIcon)\n\n    // Create control wrapper and add controls to it\n    const $accordionControls = document.createElement('div')\n    $accordionControls.setAttribute('class', this.controlsClass)\n    $accordionControls.appendChild(this.$showAllButton)\n    this.$root.insertBefore($accordionControls, this.$root.firstChild)\n\n    // Build additional wrapper for Show all toggle text and place after icon\n    this.$showAllText = document.createElement('span')\n    this.$showAllText.classList.add(this.showAllTextClass)\n    this.$showAllButton.appendChild(this.$showAllText)\n\n    // Handle click events on the show/hide all button\n    this.$showAllButton.addEventListener('click', () =>\n      this.onShowOrHideAllToggle()\n    )\n\n    // Handle 'beforematch' events, if the user agent supports them\n    if ('onbeforematch' in document) {\n      document.addEventListener('beforematch', (event) =>\n        this.onBeforeMatch(event)\n      )\n    }\n  }\n\n  /**\n   * Initialise section headers\n   *\n   * @private\n   */\n  initSectionHeaders() {\n    this.$sections.forEach(($section, i) => {\n      const $header = $section.querySelector(`.${this.sectionHeaderClass}`)\n      if (!$header) {\n        throw new ElementError({\n          component: Accordion,\n          identifier: `Section headers (\\`<div class=\"${this.sectionHeaderClass}\">\\`)`\n        })\n      }\n\n      // Set header attributes\n      this.constructHeaderMarkup($header, i)\n      this.setExpanded(this.isExpanded($section), $section)\n\n      // Handle events\n      $header.addEventListener('click', () => this.onSectionToggle($section))\n\n      // See if there is any state stored in sessionStorage and set the sections\n      // to open or closed.\n      this.setInitialState($section)\n    })\n  }\n\n  /**\n   * Construct section header\n   *\n   * @private\n   * @param {Element} $header - Section header\n   * @param {number} index - Section index\n   */\n  constructHeaderMarkup($header, index) {\n    const $span = $header.querySelector(`.${this.sectionButtonClass}`)\n    const $heading = $header.querySelector(`.${this.sectionHeadingClass}`)\n    const $summary = $header.querySelector(`.${this.sectionSummaryClass}`)\n\n    if (!$heading) {\n      throw new ElementError({\n        component: Accordion,\n        identifier: `Section heading (\\`.${this.sectionHeadingClass}\\`)`\n      })\n    }\n\n    if (!$span) {\n      throw new ElementError({\n        component: Accordion,\n        identifier: `Section button placeholder (\\`<span class=\"${this.sectionButtonClass}\">\\`)`\n      })\n    }\n\n    // Create a button element that will replace the\n    // '.govuk-accordion__section-button' span\n    const $button = document.createElement('button')\n    $button.setAttribute('type', 'button')\n    $button.setAttribute(\n      'aria-controls',\n      `${this.$root.id}-content-${index + 1}`\n    )\n\n    // Copy all attributes from $span to $button (except `id`, which gets added\n    // to the `$headingText` element)\n    for (const attr of Array.from($span.attributes)) {\n      if (attr.name !== 'id') {\n        $button.setAttribute(attr.name, attr.value)\n      }\n    }\n\n    // Create container for heading text so it can be styled\n    const $headingText = document.createElement('span')\n    $headingText.classList.add(this.sectionHeadingTextClass)\n    // Copy the span ID to the heading text to allow it to be referenced by\n    // `aria-labelledby` on the hidden content area without \"Show this section\"\n    $headingText.id = $span.id\n\n    // Create an inner heading text container to limit the width of the focus\n    // state\n    const $headingTextFocus = document.createElement('span')\n    $headingTextFocus.classList.add(this.sectionHeadingTextFocusClass)\n    $headingText.appendChild($headingTextFocus)\n    // span could contain HTML elements\n    // (see https://www.w3.org/TR/2011/WD-html5-20110525/content-models.html#phrasing-content)\n    Array.from($span.childNodes).forEach(($child) =>\n      $headingTextFocus.appendChild($child)\n    )\n\n    // Create container for show / hide icons and text.\n    const $showHideToggle = document.createElement('span')\n    $showHideToggle.classList.add(this.sectionShowHideToggleClass)\n    // Tell Google not to index the 'show' text as part of the heading. Must be\n    // set on the element before it's added to the DOM.\n    // See https://developers.google.com/search/docs/advanced/robots/robots_meta_tag#data-nosnippet-attr\n    $showHideToggle.setAttribute('data-nosnippet', '')\n    // Create an inner container to limit the width of the focus state\n    const $showHideToggleFocus = document.createElement('span')\n    $showHideToggleFocus.classList.add(this.sectionShowHideToggleFocusClass)\n    $showHideToggle.appendChild($showHideToggleFocus)\n    // Create wrapper for the show / hide text. Append text after the show/hide icon\n    const $showHideText = document.createElement('span')\n    const $showHideIcon = document.createElement('span')\n    $showHideIcon.classList.add(this.upChevronIconClass)\n    $showHideToggleFocus.appendChild($showHideIcon)\n    $showHideText.classList.add(this.sectionShowHideTextClass)\n    $showHideToggleFocus.appendChild($showHideText)\n\n    // Append elements to the button:\n    // 1. Heading text\n    // 2. Punctuation\n    // 3. (Optional: Summary line followed by punctuation)\n    // 4. Show / hide toggle\n    $button.appendChild($headingText)\n    $button.appendChild(this.getButtonPunctuationEl())\n\n    // If summary content exists add to DOM in correct order\n    if ($summary) {\n      // Create a new `span` element and copy the summary line content from the\n      // original `div` to the new `span`. This is because the summary line text\n      // is now inside a button element, which can only contain phrasing\n      // content.\n      const $summarySpan = document.createElement('span')\n      // Create an inner summary container to limit the width of the summary\n      // focus state\n      const $summarySpanFocus = document.createElement('span')\n      $summarySpanFocus.classList.add(this.sectionSummaryFocusClass)\n      $summarySpan.appendChild($summarySpanFocus)\n\n      // Get original attributes, and pass them to the replacement\n      for (const attr of Array.from($summary.attributes)) {\n        $summarySpan.setAttribute(attr.name, attr.value)\n      }\n\n      // Copy original contents of summary to the new summary span\n      Array.from($summary.childNodes).forEach(($child) =>\n        $summarySpanFocus.appendChild($child)\n      )\n\n      // Replace the original summary `div` with the new summary `span`\n      $summary.remove()\n\n      $button.appendChild($summarySpan)\n      $button.appendChild(this.getButtonPunctuationEl())\n    }\n\n    $button.appendChild($showHideToggle)\n\n    $heading.removeChild($span)\n    $heading.appendChild($button)\n  }\n\n  /**\n   * When a section is opened by the user agent via the 'beforematch' event\n   *\n   * @private\n   * @param {Event} event - Generic event\n   */\n  onBeforeMatch(event) {\n    const $fragment = event.target\n\n    // Handle elements with `.closest()` support only\n    if (!($fragment instanceof Element)) {\n      return\n    }\n\n    // Handle when fragment is inside section\n    const $section = $fragment.closest(`.${this.sectionClass}`)\n    if ($section) {\n      this.setExpanded(true, $section)\n    }\n  }\n\n  /**\n   * When section toggled, set and store state\n   *\n   * @private\n   * @param {Element} $section - Section element\n   */\n  onSectionToggle($section) {\n    const nowExpanded = !this.isExpanded($section)\n    this.setExpanded(nowExpanded, $section)\n\n    // Store the state in sessionStorage when a change is triggered\n    this.storeState($section, nowExpanded)\n  }\n\n  /**\n   * When Open/Close All toggled, set and store state\n   *\n   * @private\n   */\n  onShowOrHideAllToggle() {\n    const nowExpanded = !this.areAllSectionsOpen()\n\n    this.$sections.forEach(($section) => {\n      this.setExpanded(nowExpanded, $section)\n      this.storeState($section, nowExpanded)\n    })\n\n    this.updateShowAllButton(nowExpanded)\n  }\n\n  /**\n   * Set section attributes when opened/closed\n   *\n   * @private\n   * @param {boolean} expanded - Section expanded\n   * @param {Element} $section - Section element\n   */\n  setExpanded(expanded, $section) {\n    const $showHideIcon = $section.querySelector(`.${this.upChevronIconClass}`)\n    const $showHideText = $section.querySelector(\n      `.${this.sectionShowHideTextClass}`\n    )\n    const $button = $section.querySelector(`.${this.sectionButtonClass}`)\n    const $content = $section.querySelector(`.${this.sectionContentClass}`)\n\n    if (!$content) {\n      throw new ElementError({\n        component: Accordion,\n        identifier: `Section content (\\`<div class=\"${this.sectionContentClass}\">\\`)`\n      })\n    }\n\n    if (!$showHideIcon || !$showHideText || !$button) {\n      // Return early for elements we create\n      return\n    }\n\n    const newButtonText = expanded\n      ? this.i18n.t('hideSection')\n      : this.i18n.t('showSection')\n\n    $showHideText.textContent = newButtonText\n    $button.setAttribute('aria-expanded', `${expanded}`)\n\n    // Update aria-label combining\n    const ariaLabelParts = []\n\n    const $headingText = $section.querySelector(\n      `.${this.sectionHeadingTextClass}`\n    )\n    if ($headingText) {\n      ariaLabelParts.push($headingText.textContent.trim())\n    }\n\n    const $summary = $section.querySelector(`.${this.sectionSummaryClass}`)\n    if ($summary) {\n      ariaLabelParts.push($summary.textContent.trim())\n    }\n\n    const ariaLabelMessage = expanded\n      ? this.i18n.t('hideSectionAriaLabel')\n      : this.i18n.t('showSectionAriaLabel')\n    ariaLabelParts.push(ariaLabelMessage)\n\n    /*\n     * Join with a comma to add pause for assistive technology.\n     * Example: [heading]Section A ,[pause] Show this section.\n     * https://accessibility.blog.gov.uk/2017/12/18/what-working-on-gov-uk-navigation-taught-us-about-accessibility/\n     */\n    $button.setAttribute('aria-label', ariaLabelParts.join(' , '))\n\n    // Swap icon, change class\n    if (expanded) {\n      $content.removeAttribute('hidden')\n      $section.classList.add(this.sectionExpandedClass)\n      $showHideIcon.classList.remove(this.downChevronIconClass)\n    } else {\n      $content.setAttribute('hidden', 'until-found')\n      $section.classList.remove(this.sectionExpandedClass)\n      $showHideIcon.classList.add(this.downChevronIconClass)\n    }\n\n    // See if \"Show all sections\" button text should be updated\n    this.updateShowAllButton(this.areAllSectionsOpen())\n  }\n\n  /**\n   * Get state of section\n   *\n   * @private\n   * @param {Element} $section - Section element\n   * @returns {boolean} True if expanded\n   */\n  isExpanded($section) {\n    return $section.classList.contains(this.sectionExpandedClass)\n  }\n\n  /**\n   * Check if all sections are open\n   *\n   * @private\n   * @returns {boolean} True if all sections are open\n   */\n  areAllSectionsOpen() {\n    return Array.from(this.$sections).every(($section) =>\n      this.isExpanded($section)\n    )\n  }\n\n  /**\n   * Update \"Show all sections\" button\n   *\n   * @private\n   * @param {boolean} expanded - Section expanded\n   */\n  updateShowAllButton(expanded) {\n    if (!this.$showAllButton || !this.$showAllText || !this.$showAllIcon) {\n      return\n    }\n\n    this.$showAllButton.setAttribute('aria-expanded', expanded.toString())\n    this.$showAllText.textContent = expanded\n      ? this.i18n.t('hideAllSections')\n      : this.i18n.t('showAllSections')\n    this.$showAllIcon.classList.toggle(this.downChevronIconClass, !expanded)\n  }\n\n  /**\n   * Get the identifier for a section\n   *\n   * We need a unique way of identifying each content in the Accordion.\n   * Since an `#id` should be unique and an `id` is required for `aria-`\n   * attributes `id` can be safely used.\n   *\n   * @param {Element} $section - Section element\n   * @returns {string | undefined | null} Identifier for section\n   */\n  getIdentifier($section) {\n    const $button = $section.querySelector(`.${this.sectionButtonClass}`)\n\n    return $button?.getAttribute('aria-controls')\n  }\n\n  /**\n   * Set the state of the accordions in sessionStorage\n   *\n   * @private\n   * @param {Element} $section - Section element\n   * @param {boolean} isExpanded - Whether the section is expanded\n   */\n  storeState($section, isExpanded) {\n    if (!this.config.rememberExpanded) {\n      return\n    }\n\n    const id = this.getIdentifier($section)\n\n    if (id) {\n      try {\n        window.sessionStorage.setItem(id, isExpanded.toString())\n      } catch {}\n    }\n  }\n\n  /**\n   * Read the state of the accordions from sessionStorage\n   *\n   * @private\n   * @param {Element} $section - Section element\n   */\n  setInitialState($section) {\n    if (!this.config.rememberExpanded) {\n      return\n    }\n\n    const id = this.getIdentifier($section)\n\n    if (id) {\n      try {\n        const state = window.sessionStorage.getItem(id)\n\n        if (state !== null) {\n          this.setExpanded(state === 'true', $section)\n        }\n      } catch {}\n    }\n  }\n\n  /**\n   * Create an element to improve semantics of the section button with\n   * punctuation\n   *\n   * Adding punctuation to the button can also improve its general semantics by\n   * dividing its contents into thematic chunks. See\n   * https://github.com/alphagov/govuk-frontend/issues/2327#issuecomment-922957442\n   *\n   * @private\n   * @returns {Element} DOM element\n   */\n  getButtonPunctuationEl() {\n    const $punctuationEl = document.createElement('span')\n    $punctuationEl.classList.add(\n      'govuk-visually-hidden',\n      this.sectionHeadingDividerClass\n    )\n    $punctuationEl.textContent = ', '\n    return $punctuationEl\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-accordion'\n\n  /**\n   * Accordion default config\n   *\n   * @see {@link AccordionConfig}\n   * @constant\n   * @type {AccordionConfig}\n   */\n  static defaults = Object.freeze({\n    i18n: {\n      hideAllSections: 'Hide all sections',\n      hideSection: 'Hide',\n      hideSectionAriaLabel: 'Hide this section',\n      showAllSections: 'Show all sections',\n      showSection: 'Show',\n      showSectionAriaLabel: 'Show this section'\n    },\n    rememberExpanded: true\n  })\n\n  /**\n   * Accordion config schema\n   *\n   * @constant\n   * @satisfies {Schema<AccordionConfig>}\n   */\n  static schema = Object.freeze({\n    properties: {\n      i18n: { type: 'object' },\n      rememberExpanded: { type: 'boolean' }\n    }\n  })\n}\n\n/**\n * Accordion config\n *\n * @see {@link Accordion.defaults}\n * @typedef {object} AccordionConfig\n * @property {AccordionTranslations} [i18n=Accordion.defaults.i18n] - Accordion translations\n * @property {boolean} [rememberExpanded] - Whether the expanded and collapsed\n *   state of each section is remembered and restored when navigating.\n */\n\n/**\n * Accordion translations\n *\n * @see {@link Accordion.defaults.i18n}\n * @typedef {object} AccordionTranslations\n *\n * Messages used by the component for the labels of its buttons. This includes\n * the visible text shown on screen, and text to help assistive technology users\n * for the buttons toggling each section.\n * @property {string} [hideAllSections] - The text content for the 'Hide all\n *   sections' button, used when at least one section is expanded.\n * @property {string} [hideSection] - The text content for the 'Hide'\n *   button, used when a section is expanded.\n * @property {string} [hideSectionAriaLabel] - The text content appended to the\n *   'Hide' button's accessible name when a section is expanded.\n * @property {string} [showAllSections] - The text content for the 'Show all\n *   sections' button, used when all sections are collapsed.\n * @property {string} [showSection] - The text content for the 'Show'\n *   button, used when a section is collapsed.\n * @property {string} [showSectionAriaLabel] - The text content appended to the\n *   'Show' button's accessible name when a section is expanded.\n */\n\n/**\n * @import { Schema } from '../../common/configuration.mjs'\n */\n","import { ConfigurableComponent } from '../../common/configuration.mjs'\n\nconst DEBOUNCE_TIMEOUT_IN_SECONDS = 1\n\n/**\n * JavaScript enhancements for the Button component\n *\n * @preserve\n * @augments ConfigurableComponent<ButtonConfig>\n */\nexport class Button extends ConfigurableComponent {\n  /**\n   * @private\n   * @type {number | null}\n   */\n  debounceFormSubmitTimer = null\n\n  /**\n   * @param {Element | null} $root - HTML element to use for button\n   * @param {ButtonConfig} [config] - Button config\n   */\n  constructor($root, config = {}) {\n    super($root, config)\n\n    this.$root.addEventListener('keydown', (event) => this.handleKeyDown(event))\n    this.$root.addEventListener('click', (event) => this.debounce(event))\n  }\n\n  /**\n   * Trigger a click event when the space key is pressed\n   *\n   * Some screen readers tell users they can use the space bar to activate\n   * things with the 'button' role, so we need to match the functionality of\n   * native HTML buttons.\n   *\n   * See https://github.com/alphagov/govuk_elements/pull/272#issuecomment-233028270\n   *\n   * @private\n   * @param {KeyboardEvent} event - Keydown event\n   */\n  handleKeyDown(event) {\n    const $target = event.target\n\n    // Handle space bar only\n    if (event.key !== ' ') {\n      return\n    }\n\n    // Handle elements with [role=\"button\"] only\n    if (\n      $target instanceof HTMLElement &&\n      $target.getAttribute('role') === 'button'\n    ) {\n      event.preventDefault() // prevent the page from scrolling\n      $target.click()\n    }\n  }\n\n  /**\n   * Debounce double-clicks\n   *\n   * If the click quickly succeeds a previous click then nothing will happen.\n   * This stops people accidentally causing multiple form submissions by double\n   * clicking buttons.\n   *\n   * @private\n   * @param {MouseEvent} event - Mouse click event\n   * @returns {undefined | false} Returns undefined, or false when debounced\n   */\n  debounce(event) {\n    // Check the button that was clicked has preventDoubleClick enabled\n    if (!this.config.preventDoubleClick) {\n      return\n    }\n\n    // If the timer is still running, prevent the click from submitting the form\n    if (this.debounceFormSubmitTimer) {\n      event.preventDefault()\n      return false\n    }\n\n    this.debounceFormSubmitTimer = window.setTimeout(() => {\n      this.debounceFormSubmitTimer = null\n    }, DEBOUNCE_TIMEOUT_IN_SECONDS * 1000)\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-button'\n\n  /**\n   * Button default config\n   *\n   * @see {@link ButtonConfig}\n   * @constant\n   * @type {ButtonConfig}\n   */\n  static defaults = Object.freeze({\n    preventDoubleClick: false\n  })\n\n  /**\n   * Button config schema\n   *\n   * @constant\n   * @satisfies {Schema<ButtonConfig>}\n   */\n  static schema = Object.freeze({\n    properties: {\n      preventDoubleClick: { type: 'boolean' }\n    }\n  })\n}\n\n/**\n * Button config\n *\n * @typedef {object} ButtonConfig\n * @property {boolean} [preventDoubleClick=false] - Prevent accidental double\n *   clicks on submit buttons from submitting forms multiple times.\n */\n\n/**\n * @import { Schema } from '../../common/configuration.mjs'\n */\n","/**\n * Returns the value of the given attribute closest to the given element (including itself)\n *\n * @internal\n * @param {Element} $element - The element to start walking the DOM tree up\n * @param {string} attributeName - The name of the attribute\n * @returns {string | null} Attribute value\n */\nexport function closestAttributeValue($element, attributeName) {\n  const $closestElementWithAttribute = $element.closest(`[${attributeName}]`)\n  return $closestElementWithAttribute\n    ? $closestElementWithAttribute.getAttribute(attributeName)\n    : null\n}\n","import { closestAttributeValue } from '../../common/closest-attribute-value.mjs'\nimport {\n  validateConfig,\n  ConfigurableComponent,\n  configOverride\n} from '../../common/configuration.mjs'\nimport { formatErrorMessage } from '../../common/index.mjs'\nimport { ConfigError, ElementError } from '../../errors/index.mjs'\nimport { I18n } from '../../i18n.mjs'\n\n/**\n * Character count component\n *\n * Tracks the number of characters or words in the `.govuk-js-character-count`\n * `<textarea>` inside the element. Displays a message with the remaining number\n * of characters/words available, or the number of characters/words in excess.\n *\n * You can configure the message to only appear after a certain percentage\n * of the available characters/words has been entered.\n *\n * @preserve\n * @augments ConfigurableComponent<CharacterCountConfig>\n */\nexport class CharacterCount extends ConfigurableComponent {\n  /** @private */\n  $textarea\n\n  /** @private */\n  $visibleCountMessage\n\n  /** @private */\n  $screenReaderCountMessage\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  lastInputTimestamp = null\n\n  /** @private */\n  lastInputValue = ''\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  valueChecker = null\n\n  /** @private */\n  i18n\n\n  /** @private */\n  maxLength;\n\n  /**\n   * Character count config override\n   *\n   * To ensure data-attributes take complete precedence, even if they change\n   * the type of count, we need to reset the `maxlength` and `maxwords` from\n   * the JavaScript config.\n   *\n   * @internal\n   * @param {CharacterCountConfig} datasetConfig - configuration specified by dataset\n   * @returns {CharacterCountConfig} - configuration to override by dataset\n   */\n  [configOverride](datasetConfig) {\n    let configOverrides = {}\n    if ('maxwords' in datasetConfig || 'maxlength' in datasetConfig) {\n      configOverrides = {\n        maxlength: undefined,\n        maxwords: undefined\n      }\n    }\n\n    return configOverrides\n  }\n\n  /**\n   * @param {Element | null} $root - HTML element to use for character count\n   * @param {CharacterCountConfig} [config] - Character count config\n   */\n  constructor($root, config = {}) {\n    super($root, config)\n\n    const $textarea = this.$root.querySelector('.govuk-js-character-count')\n    if (\n      !(\n        $textarea instanceof HTMLTextAreaElement ||\n        $textarea instanceof HTMLInputElement\n      )\n    ) {\n      throw new ElementError({\n        component: CharacterCount,\n        element: $textarea,\n        expectedType: 'HTMLTextareaElement or HTMLInputElement',\n        identifier: 'Form field (`.govuk-js-character-count`)'\n      })\n    }\n\n    // Check for valid config\n    const errors = validateConfig(CharacterCount.schema, this.config)\n    if (errors[0]) {\n      throw new ConfigError(formatErrorMessage(CharacterCount, errors[0]))\n    }\n\n    this.i18n = new I18n(this.config.i18n, {\n      // Read the fallback if necessary rather than have it set in the defaults\n      locale: closestAttributeValue(this.$root, 'lang')\n    })\n\n    // Determine the limit attribute (characters or words)\n    this.maxLength = this.config.maxwords ?? this.config.maxlength ?? Infinity\n\n    this.$textarea = $textarea\n\n    const textareaDescriptionId = `${this.$textarea.id}-info`\n    const $textareaDescription = document.getElementById(textareaDescriptionId)\n    if (!$textareaDescription) {\n      throw new ElementError({\n        component: CharacterCount,\n        element: $textareaDescription,\n        identifier: `Count message (\\`id=\"${textareaDescriptionId}\"\\`)`\n      })\n    }\n\n    // Pre-existing validation error rendered from server\n    this.$errorMessage = this.$root.querySelector('.govuk-error-message')\n\n    // Inject a description for the textarea if none is present already\n    // for when the component was rendered with no maxlength, maxwords\n    // nor custom textareaDescriptionText\n    // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec\n    if ($textareaDescription.textContent.match(/^\\s*$/)) {\n      $textareaDescription.textContent = this.i18n.t('textareaDescription', {\n        count: this.maxLength\n      })\n    }\n\n    // Move the textarea description to be immediately after the textarea\n    // Kept for backwards compatibility\n    this.$textarea.insertAdjacentElement('afterend', $textareaDescription)\n\n    // Create the *screen reader* specific live-updating counter\n    // This doesn't need any styling classes, as it is never visible\n    const $screenReaderCountMessage = document.createElement('div')\n    $screenReaderCountMessage.className =\n      'govuk-character-count__sr-status govuk-visually-hidden'\n    $screenReaderCountMessage.setAttribute('aria-live', 'polite')\n    this.$screenReaderCountMessage = $screenReaderCountMessage\n    $textareaDescription.insertAdjacentElement(\n      'afterend',\n      $screenReaderCountMessage\n    )\n\n    // Create our live-updating counter element, copying the classes from the\n    // textarea description for backwards compatibility as these may have been\n    // configured\n    const $visibleCountMessage = document.createElement('div')\n    $visibleCountMessage.className = $textareaDescription.className\n    $visibleCountMessage.classList.add('govuk-character-count__status')\n    $visibleCountMessage.setAttribute('aria-hidden', 'true')\n    this.$visibleCountMessage = $visibleCountMessage\n    $textareaDescription.insertAdjacentElement('afterend', $visibleCountMessage)\n\n    // Hide the textarea description\n    $textareaDescription.classList.add('govuk-visually-hidden')\n\n    // Remove hard limit if set\n    this.$textarea.removeAttribute('maxlength')\n\n    this.bindChangeEvents()\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event.\n    window.addEventListener('pageshow', () => this.updateCountMessage())\n\n    // Although we've set up handlers to sync state on the pageshow event, init\n    // could be called after those events have fired, for example if they are\n    // added to the page dynamically, so update now too.\n    this.updateCountMessage()\n  }\n\n  /**\n   * Bind change events\n   *\n   * Set up event listeners on the $textarea so that the count messages update\n   * when the user types.\n   *\n   * @private\n   */\n  bindChangeEvents() {\n    this.$textarea.addEventListener('keyup', () => this.handleKeyUp())\n\n    // Bind focus/blur events to start/stop polling\n    this.$textarea.addEventListener('focus', () => this.handleFocus())\n    this.$textarea.addEventListener('blur', () => this.handleBlur())\n  }\n\n  /**\n   * Handle key up event\n   *\n   * Update the visible character counter and keep track of when the last update\n   * happened for each keypress\n   *\n   * @private\n   */\n  handleKeyUp() {\n    this.updateVisibleCountMessage()\n    this.lastInputTimestamp = Date.now()\n  }\n\n  /**\n   * Handle focus event\n   *\n   * Speech recognition software such as Dragon NaturallySpeaking will modify\n   * the fields by directly changing its `value`. These changes don't trigger\n   * events in JavaScript, so we need to poll to handle when and if they occur.\n   *\n   * Once the keyup event hasn't been detected for at least 1000 ms (1s), check\n   * if the textarea value has changed and update the count message if it has.\n   *\n   * This is so that the update triggered by the manual comparison doesn't\n   * conflict with debounced KeyboardEvent updates.\n   *\n   * @private\n   */\n  handleFocus() {\n    this.valueChecker = window.setInterval(() => {\n      if (\n        !this.lastInputTimestamp ||\n        Date.now() - 500 >= this.lastInputTimestamp\n      ) {\n        this.updateIfValueChanged()\n      }\n    }, 1000)\n  }\n\n  /**\n   * Handle blur event\n   *\n   * Stop checking the textarea value once the textarea no longer has focus\n   *\n   * @private\n   */\n  handleBlur() {\n    // Cancel value checking on blur\n    if (this.valueChecker) {\n      window.clearInterval(this.valueChecker)\n    }\n  }\n\n  /**\n   * Update count message if textarea value has changed\n   *\n   * @private\n   */\n  updateIfValueChanged() {\n    if (this.$textarea.value !== this.lastInputValue) {\n      this.lastInputValue = this.$textarea.value\n      this.updateCountMessage()\n    }\n  }\n\n  /**\n   * Update count message\n   *\n   * Helper function to update both the visible and screen reader-specific\n   * counters simultaneously (e.g. on init)\n   *\n   * @private\n   */\n  updateCountMessage() {\n    this.updateVisibleCountMessage()\n    this.updateScreenReaderCountMessage()\n  }\n\n  /**\n   * Update visible count message\n   *\n   * @private\n   */\n  updateVisibleCountMessage() {\n    const remainingNumber = this.maxLength - this.count(this.$textarea.value)\n    const isError = remainingNumber < 0\n\n    // If input is over the threshold, remove the disabled class which renders\n    // the counter invisible.\n    this.$visibleCountMessage.classList.toggle(\n      'govuk-character-count__message--disabled',\n      !this.isOverThreshold()\n    )\n\n    // Update styles\n    if (!this.$errorMessage) {\n      // Only toggle the textarea error class if there isn't an error message\n      // already, as it may be unrelated to the limit (eg: allowed characters)\n      // and would set the border colour back to black.\n      this.$textarea.classList.toggle('govuk-textarea--error', isError)\n    }\n    this.$visibleCountMessage.classList.toggle('govuk-error-message', isError)\n    this.$visibleCountMessage.classList.toggle('govuk-hint', !isError)\n\n    // Update message\n    this.$visibleCountMessage.textContent = this.getCountMessage()\n  }\n\n  /**\n   * Update screen reader count message\n   *\n   * @private\n   */\n  updateScreenReaderCountMessage() {\n    // If over the threshold, remove the aria-hidden attribute, allowing screen\n    // readers to announce the content of the element.\n    if (this.isOverThreshold()) {\n      this.$screenReaderCountMessage.removeAttribute('aria-hidden')\n    } else {\n      this.$screenReaderCountMessage.setAttribute('aria-hidden', 'true')\n    }\n\n    // Update message\n    this.$screenReaderCountMessage.textContent = this.getCountMessage()\n  }\n\n  /**\n   * Count the number of characters (or words, if `config.maxwords` is set)\n   * in the given text\n   *\n   * @private\n   * @param {string} text - The text to count the characters of\n   * @returns {number} the number of characters (or words) in the text\n   */\n  count(text) {\n    if (this.config.maxwords) {\n      const tokens = text.match(/\\S+/g) ?? [] // Matches consecutive non-whitespace chars\n      return tokens.length\n    }\n\n    return text.length\n  }\n\n  /**\n   * Get count message\n   *\n   * @private\n   * @returns {string} Status message\n   */\n  getCountMessage() {\n    const remainingNumber = this.maxLength - this.count(this.$textarea.value)\n    const countType = this.config.maxwords ? 'words' : 'characters'\n    return this.formatCountMessage(remainingNumber, countType)\n  }\n\n  /**\n   * Formats the message shown to users according to what's counted\n   * and how many remain\n   *\n   * @private\n   * @param {number} remainingNumber - The number of words/characaters remaining\n   * @param {string} countType - \"words\" or \"characters\"\n   * @returns {string} Status message\n   */\n  formatCountMessage(remainingNumber, countType) {\n    if (remainingNumber === 0) {\n      return this.i18n.t(`${countType}AtLimit`)\n    }\n\n    const translationKeySuffix =\n      remainingNumber < 0 ? 'OverLimit' : 'UnderLimit'\n\n    return this.i18n.t(`${countType}${translationKeySuffix}`, {\n      count: Math.abs(remainingNumber)\n    })\n  }\n\n  /**\n   * Check if count is over threshold\n   *\n   * Checks whether the value is over the configured threshold for the input.\n   * If there is no configured threshold, it is set to 0 and this function will\n   * always return true.\n   *\n   * @private\n   * @returns {boolean} true if the current count is over the config.threshold\n   *   (or no threshold is set)\n   */\n  isOverThreshold() {\n    // No threshold means we're always above threshold so save some computation\n    if (!this.config.threshold) {\n      return true\n    }\n\n    // Determine the remaining number of characters/words\n    const currentLength = this.count(this.$textarea.value)\n    const maxLength = this.maxLength\n\n    const thresholdValue = (maxLength * this.config.threshold) / 100\n\n    return thresholdValue <= currentLength\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-character-count'\n\n  /**\n   * Character count default config\n   *\n   * @see {@link CharacterCountConfig}\n   * @constant\n   * @type {CharacterCountConfig}\n   */\n  static defaults = Object.freeze({\n    threshold: 0,\n    i18n: {\n      // Characters\n      charactersUnderLimit: {\n        one: 'You have %{count} character remaining',\n        other: 'You have %{count} characters remaining'\n      },\n      charactersAtLimit: 'You have 0 characters remaining',\n      charactersOverLimit: {\n        one: 'You have %{count} character too many',\n        other: 'You have %{count} characters too many'\n      },\n      // Words\n      wordsUnderLimit: {\n        one: 'You have %{count} word remaining',\n        other: 'You have %{count} words remaining'\n      },\n      wordsAtLimit: 'You have 0 words remaining',\n      wordsOverLimit: {\n        one: 'You have %{count} word too many',\n        other: 'You have %{count} words too many'\n      },\n      textareaDescription: {\n        other: ''\n      }\n    }\n  })\n\n  /**\n   * Character count config schema\n   *\n   * @constant\n   * @satisfies {Schema<CharacterCountConfig>}\n   */\n  static schema = Object.freeze({\n    properties: {\n      i18n: { type: 'object' },\n      maxwords: { type: 'number' },\n      maxlength: { type: 'number' },\n      threshold: { type: 'number' }\n    },\n    anyOf: [\n      {\n        required: ['maxwords'],\n        errorMessage: 'Either \"maxlength\" or \"maxwords\" must be provided'\n      },\n      {\n        required: ['maxlength'],\n        errorMessage: 'Either \"maxlength\" or \"maxwords\" must be provided'\n      }\n    ]\n  })\n}\n\n/**\n * Character count config\n *\n * @see {@link CharacterCount.defaults}\n * @typedef {object} CharacterCountConfig\n * @property {number} [maxlength] - The maximum number of characters.\n *   If maxwords is provided, the maxlength option will be ignored.\n * @property {number} [maxwords] - The maximum number of words. If maxwords is\n *   provided, the maxlength option will be ignored.\n * @property {number} [threshold=0] - The percentage value of the limit at\n *   which point the count message is displayed. If this attribute is set, the\n *   count message will be hidden by default.\n * @property {CharacterCountTranslations} [i18n=CharacterCount.defaults.i18n] - Character count translations\n */\n\n/**\n * Character count translations\n *\n * @see {@link CharacterCount.defaults.i18n}\n * @typedef {object} CharacterCountTranslations\n *\n * Messages shown to users as they type. It provides feedback on how many words\n * or characters they have remaining or if they are over the limit. This also\n * includes a message used as an accessible description for the textarea.\n * @property {TranslationPluralForms} [charactersUnderLimit] - Message displayed\n *   when the number of characters is under the configured maximum, `maxlength`.\n *   This message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining characters. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {string} [charactersAtLimit] - Message displayed when the number of\n *   characters reaches the configured maximum, `maxlength`. This message is\n *   displayed visually and through assistive technologies.\n * @property {TranslationPluralForms} [charactersOverLimit] - Message displayed\n *   when the number of characters is over the configured maximum, `maxlength`.\n *   This message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining characters. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {TranslationPluralForms} [wordsUnderLimit] - Message displayed when\n *   the number of words is under the configured maximum, `maxlength`. This\n *   message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining words. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {string} [wordsAtLimit] - Message displayed when the number of\n *   words reaches the configured maximum, `maxlength`. This message is\n *   displayed visually and through assistive technologies.\n * @property {TranslationPluralForms} [wordsOverLimit] - Message displayed when\n *   the number of words is over the configured maximum, `maxlength`. This\n *   message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining words. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {TranslationPluralForms} [textareaDescription] - Message made\n *   available to assistive technologies, if none is already present in the\n *   HTML, to describe that the component accepts only a limited amount of\n *   content. It is visible on the page when JavaScript is unavailable. The\n *   component will replace the `%{count}` placeholder with the value of the\n *   `maxlength` or `maxwords` parameter.\n */\n\n/**\n * @import { Schema } from '../../common/configuration.mjs'\n * @import { TranslationPluralForms } from '../../i18n.mjs'\n */\n","import { Component } from '../../component.mjs'\nimport { ElementError } from '../../errors/index.mjs'\n\n/**\n * Checkboxes component\n *\n * @preserve\n */\nexport class Checkboxes extends Component {\n  /** @private */\n  $inputs\n\n  /**\n   * Checkboxes can be associated with a 'conditionally revealed' content block\n   * – for example, a checkbox for 'Phone' could reveal an additional form field\n   * for the user to enter their phone number.\n   *\n   * These associations are made using a `data-aria-controls` attribute, which\n   * is promoted to an aria-controls attribute during initialisation.\n   *\n   * We also need to restore the state of any conditional reveals on the page\n   * (for example if the user has navigated back), and set up event handlers to\n   * keep the reveal in sync with the checkbox state.\n   *\n   * @param {Element | null} $root - HTML element to use for checkboxes\n   */\n  constructor($root) {\n    super($root)\n\n    const $inputs = this.$root.querySelectorAll('input[type=\"checkbox\"]')\n    if (!$inputs.length) {\n      throw new ElementError({\n        component: Checkboxes,\n        identifier: 'Form inputs (`<input type=\"checkbox\">`)'\n      })\n    }\n\n    this.$inputs = $inputs\n\n    this.$inputs.forEach(($input) => {\n      const targetId = $input.getAttribute('data-aria-controls')\n\n      // Skip radios without data-aria-controls attributes\n      if (!targetId) {\n        return\n      }\n\n      // Throw if target conditional element does not exist.\n      if (!document.getElementById(targetId)) {\n        throw new ElementError({\n          component: Checkboxes,\n          identifier: `Conditional reveal (\\`id=\"${targetId}\"\\`)`\n        })\n      }\n\n      // Promote the data-aria-controls attribute to a aria-controls attribute\n      // so that the relationship is exposed in the AOM\n      $input.setAttribute('aria-controls', targetId)\n      $input.removeAttribute('data-aria-controls')\n    })\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event.\n    window.addEventListener('pageshow', () => this.syncAllConditionalReveals())\n\n    // Although we've set up handlers to sync state on the pageshow event, init\n    // could be called after those events have fired, for example if they are\n    // added to the page dynamically, so sync now too.\n    this.syncAllConditionalReveals()\n\n    // Handle events\n    this.$root.addEventListener('click', (event) => this.handleClick(event))\n  }\n\n  /**\n   * Sync the conditional reveal states for all checkboxes in this component.\n   *\n   * @private\n   */\n  syncAllConditionalReveals() {\n    this.$inputs.forEach(($input) =>\n      this.syncConditionalRevealWithInputState($input)\n    )\n  }\n\n  /**\n   * Sync conditional reveal with the input state\n   *\n   * Synchronise the visibility of the conditional reveal, and its accessible\n   * state, with the input's checked state.\n   *\n   * @private\n   * @param {HTMLInputElement} $input - Checkbox input\n   */\n  syncConditionalRevealWithInputState($input) {\n    const targetId = $input.getAttribute('aria-controls')\n    if (!targetId) {\n      return\n    }\n\n    const $target = document.getElementById(targetId)\n    if ($target?.classList.contains('govuk-checkboxes__conditional')) {\n      const inputIsChecked = $input.checked\n\n      $input.setAttribute('aria-expanded', inputIsChecked.toString())\n      $target.classList.toggle(\n        'govuk-checkboxes__conditional--hidden',\n        !inputIsChecked\n      )\n    }\n  }\n\n  /**\n   * Uncheck other checkboxes\n   *\n   * Find any other checkbox inputs with the same name value, and uncheck them.\n   * This is useful for when a “None of these\" checkbox is checked.\n   *\n   * @private\n   * @param {HTMLInputElement} $input - Checkbox input\n   */\n  unCheckAllInputsExcept($input) {\n    const allInputsWithSameName = document.querySelectorAll(\n      `input[type=\"checkbox\"][name=\"${$input.name}\"]`\n    )\n\n    allInputsWithSameName.forEach(($inputWithSameName) => {\n      const hasSameFormOwner = $input.form === $inputWithSameName.form\n      if (hasSameFormOwner && $inputWithSameName !== $input) {\n        $inputWithSameName.checked = false\n        this.syncConditionalRevealWithInputState($inputWithSameName)\n      }\n    })\n  }\n\n  /**\n   * Uncheck exclusive checkboxes\n   *\n   * Find any checkbox inputs with the same name value and the 'exclusive'\n   * behaviour, and uncheck them. This helps prevent someone checking both a\n   * regular checkbox and a \"None of these\" checkbox in the same fieldset.\n   *\n   * @private\n   * @param {HTMLInputElement} $input - Checkbox input\n   */\n  unCheckExclusiveInputs($input) {\n    const allInputsWithSameNameAndExclusiveBehaviour =\n      document.querySelectorAll(\n        `input[data-behaviour=\"exclusive\"][type=\"checkbox\"][name=\"${$input.name}\"]`\n      )\n\n    allInputsWithSameNameAndExclusiveBehaviour.forEach(($exclusiveInput) => {\n      const hasSameFormOwner = $input.form === $exclusiveInput.form\n      if (hasSameFormOwner) {\n        $exclusiveInput.checked = false\n        this.syncConditionalRevealWithInputState($exclusiveInput)\n      }\n    })\n  }\n\n  /**\n   * Click event handler\n   *\n   * Handle a click within the component root – if the click occurred on a checkbox,\n   * sync the state of any associated conditional reveal with the checkbox\n   * state.\n   *\n   * @private\n   * @param {MouseEvent} event - Click event\n   */\n  handleClick(event) {\n    const $clickedInput = event.target\n\n    // Ignore clicks on things that aren't checkbox inputs\n    if (\n      !($clickedInput instanceof HTMLInputElement) ||\n      $clickedInput.type !== 'checkbox'\n    ) {\n      return\n    }\n\n    // If the checkbox conditionally-reveals some content, sync the state\n    const hasAriaControls = $clickedInput.getAttribute('aria-controls')\n    if (hasAriaControls) {\n      this.syncConditionalRevealWithInputState($clickedInput)\n    }\n\n    // No further behaviour needed for unchecking\n    if (!$clickedInput.checked) {\n      return\n    }\n\n    // Handle 'exclusive' checkbox behaviour (ie \"None of these\")\n    const hasBehaviourExclusive =\n      $clickedInput.getAttribute('data-behaviour') === 'exclusive'\n    if (hasBehaviourExclusive) {\n      this.unCheckAllInputsExcept($clickedInput)\n    } else {\n      this.unCheckExclusiveInputs($clickedInput)\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-checkboxes'\n}\n","import { ConfigurableComponent } from '../../common/configuration.mjs'\nimport { setFocus } from '../../common/index.mjs'\n\n/**\n * Error summary component\n *\n * Takes focus on initialisation for accessible announcement, unless disabled in\n * configuration.\n *\n * @preserve\n * @augments ConfigurableComponent<ErrorSummaryConfig>\n */\nexport class ErrorSummary extends ConfigurableComponent {\n  /**\n   * @param {Element | null} $root - HTML element to use for error summary\n   * @param {ErrorSummaryConfig} [config] - Error summary config\n   */\n  constructor($root, config = {}) {\n    super($root, config)\n\n    /**\n     * Focus the error summary\n     */\n    if (!this.config.disableAutoFocus) {\n      setFocus(this.$root)\n    }\n\n    this.$root.addEventListener('click', (event) => this.handleClick(event))\n  }\n\n  /**\n   * Click event handler\n   *\n   * @private\n   * @param {MouseEvent} event - Click event\n   */\n  handleClick(event) {\n    const $target = event.target\n    if ($target && this.focusTarget($target)) {\n      event.preventDefault()\n    }\n  }\n\n  /**\n   * Focus the target element\n   *\n   * By default, the browser will scroll the target into view. Because our\n   * labels or legends appear above the input, this means the user will be\n   * presented with an input without any context, as the label or legend will be\n   * off the top of the screen.\n   *\n   * Manually handling the click event, scrolling the question into view and\n   * then focussing the element solves this.\n   *\n   * This also results in the label and/or legend being announced correctly in\n   * NVDA (as tested in 2018.3.2) - without this only the field type is\n   * announced (e.g. \"Edit, has autocomplete\").\n   *\n   * @private\n   * @param {EventTarget} $target - Event target\n   * @returns {boolean} True if the target was able to be focussed\n   */\n  focusTarget($target) {\n    // If the element that was clicked was not a link, return early\n    if (!($target instanceof HTMLAnchorElement)) {\n      return false\n    }\n\n    const inputId = $target.hash.replace('#', '')\n    if (!inputId) {\n      return false\n    }\n\n    const $input = document.getElementById(inputId)\n    if (!$input) {\n      return false\n    }\n\n    const $legendOrLabel = this.getAssociatedLegendOrLabel($input)\n    if (!$legendOrLabel) {\n      return false\n    }\n\n    // Scroll the legend or label into view *before* calling focus on the input\n    // to avoid extra scrolling in browsers that don't support `preventScroll`\n    // (which at time of writing is most of them...)\n    $legendOrLabel.scrollIntoView()\n    $input.focus({ preventScroll: true })\n\n    return true\n  }\n\n  /**\n   * Get associated legend or label\n   *\n   * Returns the first element that exists from this list:\n   *\n   * - The `<legend>` associated with the closest `<fieldset>` ancestor, as long\n   *   as the top of it is no more than half a viewport height away from the\n   *   bottom of the input\n   * - The first `<label>` that is associated with the input using for=\"inputId\"\n   * - The closest parent `<label>`\n   *\n   * @private\n   * @param {Element} $input - The input\n   * @returns {Element | null} Associated legend or label, or null if no\n   *   associated legend or label can be found\n   */\n  getAssociatedLegendOrLabel($input) {\n    const $fieldset = $input.closest('fieldset')\n\n    if ($fieldset) {\n      const $legends = $fieldset.getElementsByTagName('legend')\n\n      if ($legends.length) {\n        const $candidateLegend = $legends[0]\n\n        // If the input type is radio or checkbox, always use the legend if\n        // there is one.\n        if (\n          $input instanceof HTMLInputElement &&\n          ($input.type === 'checkbox' || $input.type === 'radio')\n        ) {\n          return $candidateLegend\n        }\n\n        // For other input types, only scroll to the fieldset’s legend (instead\n        // of the label associated with the input) if the input would end up in\n        // the top half of the screen.\n        //\n        // This should avoid situations where the input either ends up off the\n        // screen, or obscured by a software keyboard.\n        const legendTop = $candidateLegend.getBoundingClientRect().top\n        const inputRect = $input.getBoundingClientRect()\n\n        // If the browser doesn't support Element.getBoundingClientRect().height\n        // or window.innerHeight (like IE8), bail and just link to the label.\n        if (inputRect.height && window.innerHeight) {\n          const inputBottom = inputRect.top + inputRect.height\n\n          if (inputBottom - legendTop < window.innerHeight / 2) {\n            return $candidateLegend\n          }\n        }\n      }\n    }\n\n    return (\n      document.querySelector(`label[for='${$input.getAttribute('id')}']`) ??\n      $input.closest('label')\n    )\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-error-summary'\n\n  /**\n   * Error summary default config\n   *\n   * @see {@link ErrorSummaryConfig}\n   * @constant\n   * @type {ErrorSummaryConfig}\n   */\n  static defaults = Object.freeze({\n    disableAutoFocus: false\n  })\n\n  /**\n   * Error summary config schema\n   *\n   * @constant\n   * @satisfies {Schema<ErrorSummaryConfig>}\n   */\n  static schema = Object.freeze({\n    properties: {\n      disableAutoFocus: { type: 'boolean' }\n    }\n  })\n}\n\n/**\n * Error summary config\n *\n * @typedef {object} ErrorSummaryConfig\n * @property {boolean} [disableAutoFocus=false] - If set to `true` the error\n *   summary will not be focussed when the page loads.\n */\n\n/**\n * @import { Schema } from '../../common/configuration.mjs'\n */\n","import { ConfigurableComponent } from '../../common/configuration.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { I18n } from '../../i18n.mjs'\n\n/**\n * Exit this page component\n *\n * @preserve\n * @augments ConfigurableComponent<ExitThisPageConfig>\n */\nexport class ExitThisPage extends ConfigurableComponent {\n  /** @private */\n  i18n\n\n  /** @private */\n  $button\n\n  /**\n   * @private\n   * @type {HTMLAnchorElement | null}\n   */\n  $skiplinkButton = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $updateSpan = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $indicatorContainer = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $overlay = null\n\n  /** @private */\n  keypressCounter = 0\n\n  /** @private */\n  lastKeyWasModified = false\n\n  /** @private */\n  timeoutTime = 5000 // milliseconds\n\n  // Store the timeout events so that we can clear them to avoid user keypresses overlapping\n  // setTimeout returns an id that we can use to clear it with clearTimeout,\n  // hence the 'Id' suffix\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  keypressTimeoutId = null\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  timeoutMessageId = null\n\n  /**\n   * @param {Element | null} $root - HTML element that wraps the Exit This Page button\n   * @param {ExitThisPageConfig} [config] - Exit This Page config\n   */\n  constructor($root, config = {}) {\n    super($root, config)\n\n    const $button = this.$root.querySelector('.govuk-exit-this-page__button')\n    if (!($button instanceof HTMLAnchorElement)) {\n      throw new ElementError({\n        component: ExitThisPage,\n        element: $button,\n        expectedType: 'HTMLAnchorElement',\n        identifier: 'Button (`.govuk-exit-this-page__button`)'\n      })\n    }\n\n    this.i18n = new I18n(this.config.i18n)\n    this.$button = $button\n\n    const $skiplinkButton = document.querySelector(\n      '.govuk-js-exit-this-page-skiplink'\n    )\n    if ($skiplinkButton instanceof HTMLAnchorElement) {\n      this.$skiplinkButton = $skiplinkButton\n    }\n\n    this.buildIndicator()\n    this.initUpdateSpan()\n    this.initButtonClickHandler()\n\n    // Check to see if this has already been done by a previous initialisation of ExitThisPage\n    if (!('govukFrontendExitThisPageKeypress' in document.body.dataset)) {\n      document.addEventListener('keyup', this.handleKeypress.bind(this), true)\n      document.body.dataset.govukFrontendExitThisPageKeypress = 'true'\n    }\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // blank overlay remains present, rendering the page unusable. Here, we check\n    // to see if it's present on page (re)load, and remove it if so.\n    window.addEventListener('pageshow', this.resetPage.bind(this))\n  }\n\n  /**\n   * Create the <span> we use for screen reader announcements.\n   *\n   * @private\n   */\n  initUpdateSpan() {\n    this.$updateSpan = document.createElement('span')\n    this.$updateSpan.setAttribute('role', 'status')\n    this.$updateSpan.className = 'govuk-visually-hidden'\n\n    this.$root.appendChild(this.$updateSpan)\n  }\n\n  /**\n   * Create button click handlers.\n   *\n   * @private\n   */\n  initButtonClickHandler() {\n    // Main EtP button\n    this.$button.addEventListener('click', this.handleClick.bind(this))\n\n    // EtP secondary link\n    if (this.$skiplinkButton) {\n      this.$skiplinkButton.addEventListener(\n        'click',\n        this.handleClick.bind(this)\n      )\n    }\n  }\n\n  /**\n   * Create the HTML for the 'three lights' indicator on the button.\n   *\n   * @private\n   */\n  buildIndicator() {\n    // Build container\n    // Putting `aria-hidden` on it as it won't contain any readable information\n    this.$indicatorContainer = document.createElement('div')\n    this.$indicatorContainer.className = 'govuk-exit-this-page__indicator'\n    this.$indicatorContainer.setAttribute('aria-hidden', 'true')\n\n    // Create three 'lights' and place them within the container\n    for (let i = 0; i < 3; i++) {\n      const $indicator = document.createElement('div')\n      $indicator.className = 'govuk-exit-this-page__indicator-light'\n      this.$indicatorContainer.appendChild($indicator)\n    }\n\n    // Append it all to the module\n    this.$button.appendChild(this.$indicatorContainer)\n  }\n\n  /**\n   * Update whether the lights are visible and which ones are lit up depending on\n   * the value of `keypressCounter`.\n   *\n   * @private\n   */\n  updateIndicator() {\n    if (!this.$indicatorContainer) {\n      return\n    }\n\n    // Show or hide the indicator container depending on keypressCounter value\n    this.$indicatorContainer.classList.toggle(\n      'govuk-exit-this-page__indicator--visible',\n      this.keypressCounter > 0\n    )\n\n    // Turn on only the indicators we want on\n    const $indicators = this.$indicatorContainer.querySelectorAll(\n      '.govuk-exit-this-page__indicator-light'\n    )\n    $indicators.forEach(($indicator, index) => {\n      $indicator.classList.toggle(\n        'govuk-exit-this-page__indicator-light--on',\n        index < this.keypressCounter\n      )\n    })\n  }\n\n  /**\n   * Initiates the redirection away from the current page.\n   * Includes the loading overlay functionality, which covers the current page with a\n   * white overlay so that the contents are not visible during the loading\n   * process. This is particularly important on slow network connections.\n   *\n   * @private\n   */\n  exitPage() {\n    if (!this.$updateSpan) {\n      return\n    }\n\n    this.$updateSpan.textContent = ''\n\n    // Blank the page\n    // As well as creating an overlay with text, we also set the body to hidden\n    // to prevent screen reader and sequential navigation users potentially\n    // navigating through the page behind the overlay during loading\n    document.body.classList.add('govuk-exit-this-page-hide-content')\n    this.$overlay = document.createElement('div')\n    this.$overlay.className = 'govuk-exit-this-page-overlay'\n    this.$overlay.setAttribute('role', 'alert')\n\n    // we do these this way round, thus incurring a second paint, because changing\n    // the element text after adding it means that screen readers pick up the\n    // announcement more reliably.\n    document.body.appendChild(this.$overlay)\n    this.$overlay.textContent = this.i18n.t('activated')\n\n    window.location.href = this.$button.href\n  }\n\n  /**\n   * Pre-activation logic for when the button is clicked/activated via mouse or\n   * pointer.\n   *\n   * We do this to differentiate it from the keyboard activation event because we\n   * need to run `e.preventDefault` as the button or skiplink are both links and we\n   * want to apply some additional logic in `exitPage` before navigating.\n   *\n   * @private\n   * @param {MouseEvent} event - mouse click event\n   */\n  handleClick(event) {\n    event.preventDefault()\n    this.exitPage()\n  }\n\n  /**\n   * Logic for the 'quick escape' keyboard sequence functionality (pressing the\n   * Shift key three times without interruption, within a time limit).\n   *\n   * @private\n   * @param {KeyboardEvent} event - keyup event\n   */\n  handleKeypress(event) {\n    if (!this.$updateSpan) {\n      return\n    }\n\n    // Detect if the 'Shift' key has been pressed. We want to only do things if it\n    // was pressed by itself and not in a combination with another key—so we keep\n    // track of whether the preceding keyup had shiftKey: true on it, and if it\n    // did, we ignore the next Shift keyup event.\n    //\n    // This works because using Shift as a modifier key (e.g. pressing Shift + A)\n    // will fire TWO keyup events, one for A (with e.shiftKey: true) and the other\n    // for Shift (with e.shiftKey: false).\n    if (event.key === 'Shift' && !this.lastKeyWasModified) {\n      this.keypressCounter += 1\n\n      // Update the indicator before the below if statement can reset it back to 0\n      this.updateIndicator()\n\n      // Clear the timeout for the keypress timeout message clearing itself\n      if (this.timeoutMessageId) {\n        window.clearTimeout(this.timeoutMessageId)\n        this.timeoutMessageId = null\n      }\n\n      if (this.keypressCounter >= 3) {\n        this.keypressCounter = 0\n\n        if (this.keypressTimeoutId) {\n          window.clearTimeout(this.keypressTimeoutId)\n          this.keypressTimeoutId = null\n        }\n\n        this.exitPage()\n      } else {\n        if (this.keypressCounter === 1) {\n          this.$updateSpan.textContent = this.i18n.t('pressTwoMoreTimes')\n        } else {\n          this.$updateSpan.textContent = this.i18n.t('pressOneMoreTime')\n        }\n      }\n\n      this.setKeypressTimer()\n    } else if (this.keypressTimeoutId) {\n      // If the user pressed any key other than 'Shift', after having pressed\n      // 'Shift' and activating the timer, stop and reset the timer.\n      this.resetKeypressTimer()\n    }\n\n    // Keep track of whether the Shift modifier key was held during this keypress\n    this.lastKeyWasModified = event.shiftKey\n  }\n\n  /**\n   * Starts the 'quick escape' keyboard sequence timer.\n   *\n   * This can be invoked several times. We want this to be possible so that the\n   * timer is restarted each time the shortcut key is pressed (e.g. the user has\n   * up to n seconds between each keypress, rather than n seconds to invoke the\n   * entire sequence.)\n   *\n   * @private\n   */\n  setKeypressTimer() {\n    // Clear any existing timeout. This is so only one timer is running even if\n    // there are multiple keypresses in quick succession.\n    if (this.keypressTimeoutId) {\n      window.clearTimeout(this.keypressTimeoutId)\n    }\n\n    // Set a fresh timeout\n    this.keypressTimeoutId = window.setTimeout(\n      this.resetKeypressTimer.bind(this),\n      this.timeoutTime\n    )\n  }\n\n  /**\n   * Stops and resets the 'quick escape' keyboard sequence timer.\n   *\n   * @private\n   */\n  resetKeypressTimer() {\n    if (!this.$updateSpan) {\n      return\n    }\n\n    if (this.keypressTimeoutId) {\n      window.clearTimeout(this.keypressTimeoutId)\n      this.keypressTimeoutId = null\n    }\n\n    const $updateSpan = this.$updateSpan\n\n    this.keypressCounter = 0\n    $updateSpan.textContent = this.i18n.t('timedOut')\n\n    this.timeoutMessageId = window.setTimeout(() => {\n      $updateSpan.textContent = ''\n    }, this.timeoutTime)\n\n    this.updateIndicator()\n  }\n\n  /**\n   * Reset the page using the EtP button\n   *\n   * We use this in situations where a user may re-enter a page using the browser\n   * back button. In these cases, the browser can choose to restore the state of\n   * the page as it was previously, including restoring the 'ghost page' overlay,\n   * the announcement span having it's role set to \"alert\" and the keypress\n   * indicator still active, leaving the page in an unusable state.\n   *\n   * By running this check when the page is shown, we can programatically restore\n   * the page and the component to a \"default\" state\n   *\n   * @private\n   */\n  resetPage() {\n    // If an overlay is set, remove it and reset the value\n    document.body.classList.remove('govuk-exit-this-page-hide-content')\n\n    if (this.$overlay) {\n      this.$overlay.remove()\n      this.$overlay = null\n    }\n\n    // Ensure the announcement span's role is status, not alert and clear any text\n    if (this.$updateSpan) {\n      this.$updateSpan.setAttribute('role', 'status')\n      this.$updateSpan.textContent = ''\n    }\n\n    // Sync the keypress indicator lights\n    this.updateIndicator()\n\n    // If the timeouts are active, clear them\n    if (this.keypressTimeoutId) {\n      window.clearTimeout(this.keypressTimeoutId)\n    }\n\n    if (this.timeoutMessageId) {\n      window.clearTimeout(this.timeoutMessageId)\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-exit-this-page'\n\n  /**\n   * Exit this page default config\n   *\n   * @see {@link ExitThisPageConfig}\n   * @constant\n   * @type {ExitThisPageConfig}\n   */\n  static defaults = Object.freeze({\n    i18n: {\n      activated: 'Loading.',\n      timedOut: 'Exit this page expired.',\n      pressTwoMoreTimes: 'Shift, press 2 more times to exit.',\n      pressOneMoreTime: 'Shift, press 1 more time to exit.'\n    }\n  })\n\n  /**\n   * Exit this page config schema\n   *\n   * @constant\n   * @satisfies {Schema<ExitThisPageConfig>}\n   */\n  static schema = Object.freeze({\n    properties: {\n      i18n: { type: 'object' }\n    }\n  })\n}\n\n/**\n * Exit this Page config\n *\n * @see {@link ExitThisPage.defaults}\n * @typedef {object} ExitThisPageConfig\n * @property {ExitThisPageTranslations} [i18n=ExitThisPage.defaults.i18n] - Exit this page translations\n */\n\n/**\n * Exit this Page translations\n *\n * @see {@link ExitThisPage.defaults.i18n}\n * @typedef {object} ExitThisPageTranslations\n *\n * Messages used by the component programatically inserted text, including\n * overlay text and screen reader announcements.\n * @property {string} [activated] - Screen reader announcement for when EtP\n *   keypress functionality has been successfully activated.\n * @property {string} [timedOut] - Screen reader announcement for when the EtP\n *   keypress functionality has timed out.\n * @property {string} [pressTwoMoreTimes] - Screen reader announcement informing\n *   the user they must press the activation key two more times.\n * @property {string} [pressOneMoreTime] - Screen reader announcement informing\n *   the user they must press the activation key one more time.\n */\n\n/**\n * @import { Schema } from '../../common/configuration.mjs'\n */\n","import { closestAttributeValue } from '../../common/closest-attribute-value.mjs'\nimport { ConfigurableComponent } from '../../common/configuration.mjs'\nimport { formatErrorMessage } from '../../common/index.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { I18n } from '../../i18n.mjs'\n\n/**\n * File upload component\n *\n * @preserve\n * @augments ConfigurableComponent<FileUploadConfig>\n */\nexport class FileUpload extends ConfigurableComponent {\n  /**\n   * @private\n   * @type {HTMLFileInputElement}\n   */\n  $input\n\n  /**\n   * @private\n   */\n  $button\n\n  /**\n   * @private\n   */\n  $status\n\n  /** @private */\n  i18n\n\n  /** @private */\n  id\n\n  /** @private */\n  $announcements\n\n  /**\n   * @private\n   * @type {boolean | undefined}\n   */\n  enteredAnotherElement\n\n  /**\n   * @param {Element | null} $root - File input element\n   * @param {FileUploadConfig} [config] - File Upload config\n   */\n  constructor($root, config = {}) {\n    super($root, config)\n\n    const $input = this.$root.querySelector('input')\n\n    if ($input === null) {\n      throw new ElementError({\n        component: FileUpload,\n        identifier: 'File inputs (`<input type=\"file\">`)'\n      })\n    }\n\n    if ($input.type !== 'file') {\n      throw new ElementError(\n        formatErrorMessage(\n          FileUpload,\n          'File input (`<input type=\"file\">`) attribute (`type`) is not `file`'\n        )\n      )\n    }\n\n    this.$input = /** @type {HTMLFileInputElement} */ ($input)\n\n    if (!this.$input.id) {\n      throw new ElementError({\n        component: FileUpload,\n        identifier: 'File input (`<input type=\"file\">`) attribute (`id`)'\n      })\n    }\n\n    this.id = this.$input.id\n\n    this.i18n = new I18n(this.config.i18n, {\n      // Read the fallback if necessary rather than have it set in the defaults\n      locale: closestAttributeValue(this.$root, 'lang')\n    })\n\n    const $label = this.findLabel()\n    // Add an ID to the label if it doesn't have one already\n    // so it can be referenced by `aria-labelledby`\n    if (!$label.id) {\n      $label.id = `${this.id}-label`\n    }\n\n    // we need to copy the 'id' of the root element\n    // to the new button replacement element\n    // so that focus will work in the error summary\n    this.$input.id = `${this.id}-input`\n\n    // Hide the native input\n    this.$input.setAttribute('hidden', 'true')\n\n    // Create the file selection button\n    const $button = document.createElement('button')\n    $button.classList.add('govuk-file-upload-button')\n    $button.type = 'button'\n    $button.id = this.id\n    $button.classList.add('govuk-file-upload-button--empty')\n\n    // Copy `aria-describedby` if present so hints and errors\n    // are associated to the `<button>`\n    const ariaDescribedBy = this.$input.getAttribute('aria-describedby')\n    if (ariaDescribedBy) {\n      $button.setAttribute('aria-describedby', ariaDescribedBy)\n    }\n\n    // Create status element that shows what/how many files are selected\n    const $status = document.createElement('span')\n    $status.className = 'govuk-body govuk-file-upload-button__status'\n    $status.setAttribute('aria-live', 'polite')\n    $status.innerText = this.i18n.t('noFileChosen')\n\n    $button.appendChild($status)\n\n    const commaSpan = document.createElement('span')\n    commaSpan.className = 'govuk-visually-hidden'\n    commaSpan.innerText = ', '\n    commaSpan.id = `${this.id}-comma`\n\n    $button.appendChild(commaSpan)\n\n    const containerSpan = document.createElement('span')\n    containerSpan.className =\n      'govuk-file-upload-button__pseudo-button-container'\n\n    const buttonSpan = document.createElement('span')\n    buttonSpan.className =\n      'govuk-button govuk-button--secondary govuk-file-upload-button__pseudo-button'\n    buttonSpan.innerText = this.i18n.t('chooseFilesButton')\n\n    containerSpan.appendChild(buttonSpan)\n\n    // Add a space so the button and instruction read correctly\n    // when CSS is disabled\n    containerSpan.insertAdjacentText('beforeend', ' ')\n\n    const instructionSpan = document.createElement('span')\n    instructionSpan.className =\n      'govuk-body govuk-file-upload-button__instruction'\n    instructionSpan.innerText = this.i18n.t('dropInstruction')\n\n    containerSpan.appendChild(instructionSpan)\n\n    $button.appendChild(containerSpan)\n    $button.setAttribute(\n      'aria-labelledby',\n      `${$label.id} ${commaSpan.id} ${$button.id}`\n    )\n    $button.addEventListener('click', this.onClick.bind(this))\n    $button.addEventListener('dragover', (event) => {\n      // prevent default to allow drop\n      event.preventDefault()\n    })\n\n    // Assemble these all together\n    this.$root.insertAdjacentElement('afterbegin', $button)\n\n    this.$input.setAttribute('tabindex', '-1')\n    this.$input.setAttribute('aria-hidden', 'true')\n\n    // Make all these new variables available to the module\n    this.$button = $button\n    this.$status = $status\n\n    // Bind change event to the underlying input\n    this.$input.addEventListener('change', this.onChange.bind(this))\n\n    // Synchronise the `disabled` state between the button and underlying input\n    this.updateDisabledState()\n    this.observeDisabledState()\n\n    // Handle drop zone visibility\n    // A live region to announce when users enter or leave the drop zone\n    this.$announcements = document.createElement('span')\n    this.$announcements.classList.add('govuk-file-upload-announcements')\n    this.$announcements.classList.add('govuk-visually-hidden')\n    this.$announcements.setAttribute('aria-live', 'assertive')\n    this.$root.insertAdjacentElement('afterend', this.$announcements)\n\n    // if there is no CSS and input is hidden\n    // button will need to handle drop event\n    this.$button.addEventListener('drop', this.onDrop.bind(this))\n\n    // While user is dragging, it gets a little more complex because of Safari.\n    // Safari doesn't fill `relatedTarget` on `dragleave` (nor `dragenter`).\n    // This means we can't use `relatedTarget` to:\n    // - check if the user is still within the wrapper\n    //   (`relatedTarget` being a descendant of the wrapper)\n    // - check if the user is still over the viewport\n    //   (`relatedTarget` being null if outside)\n\n    // Thanks to `dragenter` bubbling, we can listen on the `document` with a\n    // single function and update the visibility based on whether we entered a\n    // node inside or outside the wrapper.\n    document.addEventListener(\n      'dragenter',\n      this.updateDropzoneVisibility.bind(this)\n    )\n\n    // To detect if we're outside the document, we can track if there was a\n    // `dragenter` event preceding a `dragleave`. If there wasn't, this means\n    // we're outside the document.\n    //\n    // The order of events is guaranteed by the HTML specs:\n    // https://html.spec.whatwg.org/multipage/dnd.html#drag-and-drop-processing-model\n    document.addEventListener('dragenter', () => {\n      this.enteredAnotherElement = true\n    })\n\n    document.addEventListener('dragleave', () => {\n      if (!this.enteredAnotherElement && !this.$button.disabled) {\n        this.hideDraggingState()\n        this.$announcements.innerText = this.i18n.t('leftDropZone')\n      }\n\n      this.enteredAnotherElement = false\n    })\n  }\n\n  /**\n   * Updates the visibility of the dropzone as users enters the various elements on the page\n   *\n   * @private\n   * @param {DragEvent} event - The `dragenter` event\n   */\n  updateDropzoneVisibility(event) {\n    if (this.$button.disabled) return\n\n    // DOM interfaces only type `event.target` as `EventTarget`\n    // so we first need to make sure it's a `Node`\n    if (event.target instanceof Node) {\n      if (this.$root.contains(event.target)) {\n        if (event.dataTransfer && this.canDrop(event.dataTransfer)) {\n          // Only update the class and make the announcement if not already visible\n          // to avoid repeated announcements on NVDA (2024.4) + Firefox (133)\n          if (\n            !this.$button.classList.contains(\n              'govuk-file-upload-button--dragging'\n            )\n          ) {\n            this.showDraggingState()\n            this.$announcements.innerText = this.i18n.t('enteredDropZone')\n          }\n        }\n      } else {\n        // Only hide the dropzone if it is visible to prevent announcing user\n        // left the drop zone when they enter the page but haven't reached yet\n        // the file upload component\n        if (\n          this.$button.classList.contains('govuk-file-upload-button--dragging')\n        ) {\n          this.hideDraggingState()\n          this.$announcements.innerText = this.i18n.t('leftDropZone')\n        }\n      }\n    }\n  }\n\n  /**\n   * Show the drop zone visually\n   *\n   * @private\n   */\n  showDraggingState() {\n    this.$button.classList.add('govuk-file-upload-button--dragging')\n  }\n\n  /**\n   * Hides the drop zone visually\n   *\n   * @private\n   */\n  hideDraggingState() {\n    this.$button.classList.remove('govuk-file-upload-button--dragging')\n  }\n\n  /**\n   * Handles user dropping on the component\n   *\n   * @private\n   * @param {DragEvent} event - The `dragenter` event\n   */\n  onDrop(event) {\n    event.preventDefault()\n\n    if (event.dataTransfer && this.canFillInput(event.dataTransfer)) {\n      this.$input.files = event.dataTransfer.files\n\n      // Dispatch a `change` event so external code that would rely on the `<input>`\n      // dispatching an event when files are dropped still work.\n      // Use a `CustomEvent` so our events are distinguishable from browser's native events\n      this.$input.dispatchEvent(new CustomEvent('change'))\n\n      this.hideDraggingState()\n    }\n  }\n\n  /**\n   * Confirms if enhanced `<input>` can be filled with files from the given `DataTransfer`\n   *\n   * @param {DataTransfer} dataTransfer - The `DataTransfer` being dropped\n   * @returns {boolean} - true if the `DataTransfer` contains files, in number matching the `multiple` attribute of the original `<input>`\n   * @private\n   */\n  canFillInput(dataTransfer) {\n    return this.matchesInputCapacity(dataTransfer.files.length)\n  }\n\n  /**\n   * Confirms if the content of a `DataTransfer` dragged over component can be dropped\n   *\n   * Unfortunately, there's a certain level of uncertainty in Safari which does not\n   * even provide a list of `items` while dragging (and seems to even miss the `types` sometimes)\n   *\n   * @param {DataTransfer} dataTransfer - The `DataTransfer` being dragged\n   * @returns {boolean} - true if the `DataTransfer` looks OK for filling the input, false otherwise\n   * @private\n   */\n  canDrop(dataTransfer) {\n    // If the browser is kind enough to give a list of items, we'll use that as source of truth\n    if (dataTransfer.items.length) {\n      return this.matchesInputCapacity(countFileItems(dataTransfer.items))\n    }\n\n    // If we have some type information, we'll use that\n    if (dataTransfer.types.length) {\n      return dataTransfer.types.includes('Files')\n    }\n\n    // If we have nothing to go by, we'll assume things are OK\n    // until we have a more accurate picture inside the `drop` event\n    return true\n  }\n\n  /**\n   * Confirms the given number of files matches that allowed by the enhanced `<input>`\n   *\n   * @param {number} numberOfFiles - The number of files\n   * @returns {boolean} - `true` if the enhanced `<input>` can accept that number of files\n   * @private\n   */\n  matchesInputCapacity(numberOfFiles) {\n    if (this.$input.multiple) {\n      return numberOfFiles > 0\n    }\n\n    return numberOfFiles === 1\n  }\n\n  /**\n   * Check if the value of the underlying input has changed\n   *\n   * @private\n   */\n  onChange() {\n    const fileCount = this.$input.files.length\n\n    if (fileCount === 0) {\n      // If there are no files, show the default selection text\n      this.$status.innerText = this.i18n.t('noFileChosen')\n      this.$button.classList.add('govuk-file-upload-button--empty')\n    } else {\n      if (\n        // If there is 1 file, just show the file name\n        fileCount === 1\n      ) {\n        this.$status.innerText = this.$input.files[0].name\n      } else {\n        // Otherwise, tell the user how many files are selected\n        this.$status.innerText = this.i18n.t('multipleFilesChosen', {\n          count: fileCount\n        })\n      }\n\n      this.$button.classList.remove('govuk-file-upload-button--empty')\n    }\n  }\n\n  /**\n   * Looks up the `<label>` element associated to the field\n   *\n   * @private\n   * @returns {HTMLElement} The `<label>` element associated to the field\n   * @throws {ElementError} If the `<label>` cannot be found\n   */\n  findLabel() {\n    // Use `label` in the selector so TypeScript knows the type fo `HTMLElement`\n    const $label = document.querySelector(`label[for=\"${this.$input.id}\"]`)\n\n    if (!$label) {\n      throw new ElementError({\n        component: FileUpload,\n        identifier: `Field label (\\`<label for=${this.$input.id}>\\`)`\n      })\n    }\n\n    return $label\n  }\n\n  /**\n   * When the button is clicked, emulate clicking the actual, hidden file input\n   *\n   * @private\n   */\n  onClick() {\n    this.$input.click()\n  }\n\n  /**\n   * Create a mutation observer to check if the input's attributes altered.\n   *\n   * @private\n   */\n  observeDisabledState() {\n    const observer = new MutationObserver((mutationList) => {\n      for (const mutation of mutationList) {\n        if (\n          mutation.type === 'attributes' &&\n          mutation.attributeName === 'disabled'\n        ) {\n          this.updateDisabledState()\n        }\n      }\n    })\n\n    observer.observe(this.$input, {\n      attributes: true\n    })\n  }\n\n  /**\n   * Synchronise the `disabled` state between the input and replacement button.\n   *\n   * @private\n   */\n  updateDisabledState() {\n    this.$button.disabled = this.$input.disabled\n\n    this.$root.classList.toggle(\n      'govuk-drop-zone--disabled',\n      this.$button.disabled\n    )\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-file-upload'\n\n  /**\n   * File upload default config\n   *\n   * @see {@link FileUploadConfig}\n   * @constant\n   * @type {FileUploadConfig}\n   */\n  static defaults = Object.freeze({\n    i18n: {\n      chooseFilesButton: 'Choose file',\n      dropInstruction: 'or drop file',\n      noFileChosen: 'No file chosen',\n      multipleFilesChosen: {\n        // the 'one' string isn't used as the component displays the filename\n        // instead, however it's here for coverage's sake\n        one: '%{count} file chosen',\n        other: '%{count} files chosen'\n      },\n      enteredDropZone: 'Entered drop zone',\n      leftDropZone: 'Left drop zone'\n    }\n  })\n\n  /**\n   * File upload config schema\n   *\n   * @constant\n   * @satisfies {Schema<FileUploadConfig>}\n   */\n  static schema = Object.freeze({\n    properties: {\n      i18n: { type: 'object' }\n    }\n  })\n}\n\n/**\n * Counts the number of `DataTransferItem` whose kind is `file`\n *\n * @param {DataTransferItemList} list - The list\n * @returns {number} - The number of items whose kind is `file` in the list\n */\nfunction countFileItems(list) {\n  let result = 0\n\n  // `DataTransferItemList` is not iterable\n  // eslint-disable-next-line @typescript-eslint/prefer-for-of\n  for (let i = 0; i < list.length; i++) {\n    if (list[i].kind === 'file') {\n      result++\n    }\n  }\n  return result\n}\n\n/**\n * @typedef {HTMLInputElement & {files: FileList}} HTMLFileInputElement\n */\n\n/**\n * File upload config\n *\n * @see {@link FileUpload.defaults}\n * @typedef {object} FileUploadConfig\n * @property {FileUploadTranslations} [i18n=FileUpload.defaults.i18n] - File upload translations\n */\n\n/**\n * File upload translations\n *\n * @see {@link FileUpload.defaults.i18n}\n * @typedef {object} FileUploadTranslations\n *\n * Messages used by the component\n * @property {string} [chooseFile] - The text of the button that opens the file picker\n * @property {string} [dropInstruction] - The text informing users they can drop files\n * @property {TranslationPluralForms} [multipleFilesChosen] - The text displayed when multiple files\n *   have been chosen by the user\n * @property {string} [noFileChosen] - The text to displayed when no file has been chosen by the user\n * @property {string} [enteredDropZone] - The text announced by assistive technology\n *   when user drags files and enters the drop zone\n * @property {string} [leftDropZone] - The text announced by assistive technology\n *   when user drags files and leaves the drop zone without dropping\n */\n\n/**\n * @import { Schema } from '../../common/configuration.mjs'\n * @import { TranslationPluralForms } from '../../i18n.mjs'\n */\n","import { getBreakpoint } from '../../common/index.mjs'\nimport { Component } from '../../component.mjs'\nimport { ElementError } from '../../errors/index.mjs'\n\n/**\n * Header component\n *\n * @preserve\n */\nexport class Header extends Component {\n  /** @private */\n  $menuButton\n\n  /** @private */\n  $menu\n\n  /**\n   * Save the opened/closed state for the nav in memory so that we can\n   * accurately maintain state when the screen is changed from small to big and\n   * back to small\n   *\n   * @private\n   */\n  menuIsOpen = false\n\n  /**\n   * A global const for storing a matchMedia instance which we'll use to detect\n   * when a screen size change happens. We rely on it being null if the feature\n   * isn't available to initially apply hidden attributes\n   *\n   * @private\n   * @type {MediaQueryList | null}\n   */\n  mql = null\n\n  /**\n   * Apply a matchMedia for desktop which will trigger a state sync if the\n   * browser viewport moves between states.\n   *\n   * @param {Element | null} $root - HTML element to use for header\n   */\n  constructor($root) {\n    super($root)\n\n    const $menuButton = this.$root.querySelector('.govuk-js-header-toggle')\n\n    // Headers don't necessarily have a navigation. When they don't, the menu\n    // toggle won't be rendered by our macro (or may be omitted when writing\n    // plain HTML)\n    if (!$menuButton) {\n      return this\n    }\n\n    // Pad the header logo so it doesn't overlap the menu button\n    this.$root.classList.add('govuk-header--with-js-navigation')\n\n    const menuId = $menuButton.getAttribute('aria-controls')\n    if (!menuId) {\n      throw new ElementError({\n        component: Header,\n        identifier:\n          'Navigation button (`<button class=\"govuk-js-header-toggle\">`) attribute (`aria-controls`)'\n      })\n    }\n\n    const $menu = document.getElementById(menuId)\n    if (!$menu) {\n      throw new ElementError({\n        component: Header,\n        element: $menu,\n        identifier: `Navigation (\\`<ul id=\"${menuId}\">\\`)`\n      })\n    }\n\n    this.$menu = $menu\n    this.$menuButton = $menuButton\n\n    this.setupResponsiveChecks()\n\n    this.$menuButton.addEventListener('click', () =>\n      this.handleMenuButtonClick()\n    )\n  }\n\n  /**\n   * Setup viewport resize check\n   *\n   * @private\n   */\n  setupResponsiveChecks() {\n    const breakpoint = getBreakpoint('desktop')\n\n    if (!breakpoint.value) {\n      throw new ElementError({\n        component: Header,\n        identifier: `CSS custom property (\\`${breakpoint.property}\\`) on pseudo-class \\`:root\\``\n      })\n    }\n\n    // Media query list for GOV.UK Frontend desktop breakpoint\n    this.mql = window.matchMedia(`(min-width: ${breakpoint.value})`)\n\n    // MediaQueryList.addEventListener isn't supported by Safari < 14 so we need\n    // to be able to fall back to the deprecated MediaQueryList.addListener\n    if ('addEventListener' in this.mql) {\n      this.mql.addEventListener('change', () => this.checkMode())\n    } else {\n      // @ts-expect-error Property 'addListener' does not exist\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      this.mql.addListener(() => this.checkMode())\n    }\n\n    this.checkMode()\n  }\n\n  /**\n   * Sync menu state\n   *\n   * Uses the global variable menuIsOpen to correctly set the accessible and\n   * visual states of the menu and the menu button.\n   * Additionally will force the menu to be visible and the menu button to be\n   * hidden if the matchMedia is triggered to desktop.\n   *\n   * @private\n   */\n  checkMode() {\n    if (!this.mql || !this.$menu || !this.$menuButton) {\n      return\n    }\n\n    if (this.mql.matches) {\n      this.$menu.removeAttribute('hidden')\n      this.$menuButton.setAttribute('hidden', '')\n    } else {\n      this.$menuButton.removeAttribute('hidden')\n      this.$menuButton.setAttribute('aria-expanded', this.menuIsOpen.toString())\n\n      if (this.menuIsOpen) {\n        this.$menu.removeAttribute('hidden')\n      } else {\n        this.$menu.setAttribute('hidden', '')\n      }\n    }\n  }\n\n  /**\n   * Handle menu button click\n   *\n   * When the menu button is clicked, change the visibility of the menu and then\n   * sync the accessibility state and menu button state\n   *\n   * @private\n   */\n  handleMenuButtonClick() {\n    this.menuIsOpen = !this.menuIsOpen\n    this.checkMode()\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-header'\n}\n","import { ConfigurableComponent } from '../../common/configuration.mjs'\nimport { setFocus } from '../../common/index.mjs'\n\n/**\n * Notification Banner component\n *\n * @preserve\n * @augments ConfigurableComponent<NotificationBannerConfig>\n */\nexport class NotificationBanner extends ConfigurableComponent {\n  /**\n   * @param {Element | null} $root - HTML element to use for notification banner\n   * @param {NotificationBannerConfig} [config] - Notification banner config\n   */\n  constructor($root, config = {}) {\n    super($root, config)\n\n    /**\n     * Focus the notification banner\n     *\n     * If `role=\"alert\"` is set, focus the element to help some assistive\n     * technologies prioritise announcing it.\n     *\n     * You can turn off the auto-focus functionality by setting\n     * `data-disable-auto-focus=\"true\"` in the component HTML. You might wish to\n     * do this based on user research findings, or to avoid a clash with another\n     * element which should be focused when the page loads.\n     */\n    if (\n      this.$root.getAttribute('role') === 'alert' &&\n      !this.config.disableAutoFocus\n    ) {\n      setFocus(this.$root)\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-notification-banner'\n\n  /**\n   * Notification banner default config\n   *\n   * @see {@link NotificationBannerConfig}\n   * @constant\n   * @type {NotificationBannerConfig}\n   */\n  static defaults = Object.freeze({\n    disableAutoFocus: false\n  })\n\n  /**\n   * Notification banner config schema\n   *\n   * @constant\n   * @satisfies {Schema<NotificationBannerConfig>}\n   */\n  static schema = Object.freeze({\n    properties: {\n      disableAutoFocus: { type: 'boolean' }\n    }\n  })\n}\n\n/**\n * Notification banner config\n *\n * @typedef {object} NotificationBannerConfig\n * @property {boolean} [disableAutoFocus=false] - If set to `true` the\n *   notification banner will not be focussed when the page loads. This only\n *   applies if the component has a `role` of `alert` – in other cases the\n *   component will not be focused on page load, regardless of this option.\n */\n\n/**\n * @import { Schema } from '../../common/configuration.mjs'\n */\n","import { closestAttributeValue } from '../../common/closest-attribute-value.mjs'\nimport { ConfigurableComponent } from '../../common/configuration.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { I18n } from '../../i18n.mjs'\n\n/**\n * Password input component\n *\n * @preserve\n * @augments ConfigurableComponent<PasswordInputConfig>\n */\nexport class PasswordInput extends ConfigurableComponent {\n  /** @private */\n  i18n\n\n  /**\n   * @private\n   * @type {HTMLInputElement}\n   */\n  $input\n\n  /**\n   * @private\n   * @type {HTMLButtonElement}\n   */\n  $showHideButton\n\n  /** @private */\n  $screenReaderStatusMessage\n\n  /**\n   * @param {Element | null} $root - HTML element to use for password input\n   * @param {PasswordInputConfig} [config] - Password input config\n   */\n  constructor($root, config = {}) {\n    super($root, config)\n\n    const $input = this.$root.querySelector('.govuk-js-password-input-input')\n    if (!($input instanceof HTMLInputElement)) {\n      throw new ElementError({\n        component: PasswordInput,\n        element: $input,\n        expectedType: 'HTMLInputElement',\n        identifier: 'Form field (`.govuk-js-password-input-input`)'\n      })\n    }\n\n    if ($input.type !== 'password') {\n      throw new ElementError(\n        'Password input: Form field (`.govuk-js-password-input-input`) must be of type `password`.'\n      )\n    }\n\n    const $showHideButton = this.$root.querySelector(\n      '.govuk-js-password-input-toggle'\n    )\n    if (!($showHideButton instanceof HTMLButtonElement)) {\n      throw new ElementError({\n        component: PasswordInput,\n        element: $showHideButton,\n        expectedType: 'HTMLButtonElement',\n        identifier: 'Button (`.govuk-js-password-input-toggle`)'\n      })\n    }\n\n    if ($showHideButton.type !== 'button') {\n      throw new ElementError(\n        'Password input: Button (`.govuk-js-password-input-toggle`) must be of type `button`.'\n      )\n    }\n\n    this.$input = $input\n    this.$showHideButton = $showHideButton\n\n    this.i18n = new I18n(this.config.i18n, {\n      // Read the fallback if necessary rather than have it set in the defaults\n      locale: closestAttributeValue(this.$root, 'lang')\n    })\n\n    // Show the toggle button element\n    this.$showHideButton.removeAttribute('hidden')\n\n    // Create and append the status text for screen readers.\n    // This is injected between the input and button so that users get a sensible reading order if\n    // moving through the page content linearly:\n    // [password input] -> [your password is visible/hidden] -> [show/hide password]\n    const $screenReaderStatusMessage = document.createElement('div')\n    $screenReaderStatusMessage.className =\n      'govuk-password-input__sr-status govuk-visually-hidden'\n    $screenReaderStatusMessage.setAttribute('aria-live', 'polite')\n    this.$screenReaderStatusMessage = $screenReaderStatusMessage\n    this.$input.insertAdjacentElement('afterend', $screenReaderStatusMessage)\n\n    // Bind toggle button\n    this.$showHideButton.addEventListener('click', this.toggle.bind(this))\n\n    // Bind event to revert the password visibility to hidden\n    if (this.$input.form) {\n      this.$input.form.addEventListener('submit', () => this.hide())\n    }\n\n    // If the page is restored from bfcache and the password is visible, hide it again\n    window.addEventListener('pageshow', (event) => {\n      if (event.persisted && this.$input.type !== 'password') {\n        this.hide()\n      }\n    })\n\n    // Default the component to having the password hidden.\n    this.hide()\n  }\n\n  /**\n   * Toggle the visibility of the password input\n   *\n   * @private\n   * @param {MouseEvent} event - Click event\n   */\n  toggle(event) {\n    event.preventDefault()\n\n    // If on this click, the field is type=\"password\", show the value\n    if (this.$input.type === 'password') {\n      this.show()\n      return\n    }\n\n    // Otherwise, hide it\n    // Being defensive - hiding should always be the default\n    this.hide()\n  }\n\n  /**\n   * Show the password input value in plain text.\n   *\n   * @private\n   */\n  show() {\n    this.setType('text')\n  }\n\n  /**\n   * Hide the password input value.\n   *\n   * @private\n   */\n  hide() {\n    this.setType('password')\n  }\n\n  /**\n   * Set the password input type\n   *\n   * @param {'text' | 'password'} type - Input type\n   * @private\n   */\n  setType(type) {\n    if (type === this.$input.type) {\n      return\n    }\n\n    // Update input type\n    this.$input.setAttribute('type', type)\n\n    const isHidden = type === 'password'\n    const prefixButton = isHidden ? 'show' : 'hide'\n    const prefixStatus = isHidden ? 'passwordHidden' : 'passwordShown'\n\n    // Update button text\n    this.$showHideButton.innerText = this.i18n.t(`${prefixButton}Password`)\n\n    // Update button aria-label\n    this.$showHideButton.setAttribute(\n      'aria-label',\n      this.i18n.t(`${prefixButton}PasswordAriaLabel`)\n    )\n\n    // Update status change text\n    this.$screenReaderStatusMessage.innerText = this.i18n.t(\n      `${prefixStatus}Announcement`\n    )\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-password-input'\n\n  /**\n   * Password input default config\n   *\n   * @see {@link PasswordInputConfig}\n   * @constant\n   * @default\n   * @type {PasswordInputConfig}\n   */\n  static defaults = Object.freeze({\n    i18n: {\n      showPassword: 'Show',\n      hidePassword: 'Hide',\n      showPasswordAriaLabel: 'Show password',\n      hidePasswordAriaLabel: 'Hide password',\n      passwordShownAnnouncement: 'Your password is visible',\n      passwordHiddenAnnouncement: 'Your password is hidden'\n    }\n  })\n\n  /**\n   * Password input config schema\n   *\n   * @constant\n   * @satisfies {Schema<PasswordInputConfig>}\n   */\n  static schema = Object.freeze({\n    properties: {\n      i18n: { type: 'object' }\n    }\n  })\n}\n\n/**\n * Password input config\n *\n * @typedef {object} PasswordInputConfig\n * @property {PasswordInputTranslations} [i18n=PasswordInput.defaults.i18n] - Password input translations\n */\n\n/**\n * Password input translations\n *\n * @see {@link PasswordInput.defaults.i18n}\n * @typedef {object} PasswordInputTranslations\n *\n * Messages displayed to the user indicating the state of the show/hide toggle.\n * @property {string} [showPassword] - Visible text of the button when the\n *   password is currently hidden. Plain text only.\n * @property {string} [hidePassword] - Visible text of the button when the\n *   password is currently visible. Plain text only.\n * @property {string} [showPasswordAriaLabel] - aria-label of the button when\n *   the password is currently hidden. Plain text only.\n * @property {string} [hidePasswordAriaLabel] - aria-label of the button when\n *   the password is currently visible. Plain text only.\n * @property {string} [passwordShownAnnouncement] - Screen reader\n *   announcement to make when the password has just become visible.\n *   Plain text only.\n * @property {string} [passwordHiddenAnnouncement] - Screen reader\n *   announcement to make when the password has just been hidden.\n *   Plain text only.\n */\n\n/**\n * @import { Schema } from '../../common/configuration.mjs'\n */\n","import { Component } from '../../component.mjs'\nimport { ElementError } from '../../errors/index.mjs'\n\n/**\n * Radios component\n *\n * @preserve\n */\nexport class Radios extends Component {\n  /** @private */\n  $inputs\n\n  /**\n   * Radios can be associated with a 'conditionally revealed' content block –\n   * for example, a radio for 'Phone' could reveal an additional form field for\n   * the user to enter their phone number.\n   *\n   * These associations are made using a `data-aria-controls` attribute, which\n   * is promoted to an aria-controls attribute during initialisation.\n   *\n   * We also need to restore the state of any conditional reveals on the page\n   * (for example if the user has navigated back), and set up event handlers to\n   * keep the reveal in sync with the radio state.\n   *\n   * @param {Element | null} $root - HTML element to use for radios\n   */\n  constructor($root) {\n    super($root)\n\n    const $inputs = this.$root.querySelectorAll('input[type=\"radio\"]')\n    if (!$inputs.length) {\n      throw new ElementError({\n        component: Radios,\n        identifier: 'Form inputs (`<input type=\"radio\">`)'\n      })\n    }\n\n    this.$inputs = $inputs\n\n    this.$inputs.forEach(($input) => {\n      const targetId = $input.getAttribute('data-aria-controls')\n\n      // Skip radios without data-aria-controls attributes\n      if (!targetId) {\n        return\n      }\n\n      // Throw if target conditional element does not exist.\n      if (!document.getElementById(targetId)) {\n        throw new ElementError({\n          component: Radios,\n          identifier: `Conditional reveal (\\`id=\"${targetId}\"\\`)`\n        })\n      }\n\n      // Promote the data-aria-controls attribute to a aria-controls attribute\n      // so that the relationship is exposed in the AOM\n      $input.setAttribute('aria-controls', targetId)\n      $input.removeAttribute('data-aria-controls')\n    })\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event.\n    window.addEventListener('pageshow', () => this.syncAllConditionalReveals())\n\n    // Although we've set up handlers to sync state on the pageshow event, init\n    // could be called after those events have fired, for example if they are\n    // added to the page dynamically, so sync now too.\n    this.syncAllConditionalReveals()\n\n    // Handle events\n    this.$root.addEventListener('click', (event) => this.handleClick(event))\n  }\n\n  /**\n   * Sync the conditional reveal states for all radio buttons in this component.\n   *\n   * @private\n   */\n  syncAllConditionalReveals() {\n    this.$inputs.forEach(($input) =>\n      this.syncConditionalRevealWithInputState($input)\n    )\n  }\n\n  /**\n   * Sync conditional reveal with the input state\n   *\n   * Synchronise the visibility of the conditional reveal, and its accessible\n   * state, with the input's checked state.\n   *\n   * @private\n   * @param {HTMLInputElement} $input - Radio input\n   */\n  syncConditionalRevealWithInputState($input) {\n    const targetId = $input.getAttribute('aria-controls')\n    if (!targetId) {\n      return\n    }\n\n    const $target = document.getElementById(targetId)\n    if ($target?.classList.contains('govuk-radios__conditional')) {\n      const inputIsChecked = $input.checked\n\n      $input.setAttribute('aria-expanded', inputIsChecked.toString())\n      $target.classList.toggle(\n        'govuk-radios__conditional--hidden',\n        !inputIsChecked\n      )\n    }\n  }\n\n  /**\n   * Click event handler\n   *\n   * Handle a click within the component root – if the click occurred on a radio, sync\n   * the state of the conditional reveal for all radio buttons in the same form\n   * with the same name (because checking one radio could have un-checked a\n   * radio under the root of another Radio component)\n   *\n   * @private\n   * @param {MouseEvent} event - Click event\n   */\n  handleClick(event) {\n    const $clickedInput = event.target\n\n    // Ignore clicks on things that aren't radio buttons\n    if (\n      !($clickedInput instanceof HTMLInputElement) ||\n      $clickedInput.type !== 'radio'\n    ) {\n      return\n    }\n\n    // We only need to consider radios with conditional reveals, which will have\n    // aria-controls attributes.\n    const $allInputs = document.querySelectorAll(\n      'input[type=\"radio\"][aria-controls]'\n    )\n\n    const $clickedInputForm = $clickedInput.form\n    const $clickedInputName = $clickedInput.name\n\n    $allInputs.forEach(($input) => {\n      const hasSameFormOwner = $input.form === $clickedInputForm\n      const hasSameName = $input.name === $clickedInputName\n\n      if (hasSameName && hasSameFormOwner) {\n        this.syncConditionalRevealWithInputState($input)\n      }\n    })\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-radios'\n}\n","import { getBreakpoint } from '../../common/index.mjs'\nimport { Component } from '../../component.mjs'\nimport { ElementError } from '../../errors/index.mjs'\n\n/**\n * Service Navigation component\n *\n * @preserve\n */\nexport class ServiceNavigation extends Component {\n  /** @private */\n  $menuButton\n\n  /** @private */\n  $menu\n\n  /**\n   * Remember the open/closed state of the nav so we can maintain it when the\n   * screen is resized.\n   *\n   * @private\n   */\n  menuIsOpen = false\n\n  /**\n   * A global const for storing a matchMedia instance which we'll use to detect\n   * when a screen size change happens. We rely on it being null if the feature\n   * isn't available to initially apply hidden attributes\n   *\n   * @private\n   * @type {MediaQueryList | null}\n   */\n  mql = null\n\n  /**\n   * @param {Element | null} $root - HTML element to use for header\n   */\n  constructor($root) {\n    super($root)\n\n    const $menuButton = this.$root.querySelector(\n      '.govuk-js-service-navigation-toggle'\n    )\n\n    // Headers don't necessarily have a navigation. When they don't, the menu\n    // toggle won't be rendered by our macro (or may be omitted when writing\n    // plain HTML)\n    if (!$menuButton) {\n      return this\n    }\n\n    const menuId = $menuButton.getAttribute('aria-controls')\n    if (!menuId) {\n      throw new ElementError({\n        component: ServiceNavigation,\n        identifier:\n          'Navigation button (`<button class=\"govuk-js-service-navigation-toggle\">`) attribute (`aria-controls`)'\n      })\n    }\n\n    const $menu = document.getElementById(menuId)\n    if (!$menu) {\n      throw new ElementError({\n        component: ServiceNavigation,\n        element: $menu,\n        identifier: `Navigation (\\`<ul id=\"${menuId}\">\\`)`\n      })\n    }\n\n    this.$menu = $menu\n    this.$menuButton = $menuButton\n\n    this.setupResponsiveChecks()\n\n    this.$menuButton.addEventListener('click', () =>\n      this.handleMenuButtonClick()\n    )\n  }\n\n  /**\n   * Setup viewport resize check\n   *\n   * @private\n   */\n  setupResponsiveChecks() {\n    const breakpoint = getBreakpoint('tablet')\n\n    if (!breakpoint.value) {\n      throw new ElementError({\n        component: ServiceNavigation,\n        identifier: `CSS custom property (\\`${breakpoint.property}\\`) on pseudo-class \\`:root\\``\n      })\n    }\n\n    // Media query list for GOV.UK Frontend desktop breakpoint\n    this.mql = window.matchMedia(`(min-width: ${breakpoint.value})`)\n\n    // MediaQueryList.addEventListener isn't supported by Safari < 14 so we need\n    // to be able to fall back to the deprecated MediaQueryList.addListener\n    if ('addEventListener' in this.mql) {\n      this.mql.addEventListener('change', () => this.checkMode())\n    } else {\n      // @ts-expect-error Property 'addListener' does not exist\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      this.mql.addListener(() => this.checkMode())\n    }\n\n    this.checkMode()\n  }\n\n  /**\n   * Sync menu state\n   *\n   * Uses the global variable menuIsOpen to correctly set the accessible and\n   * visual states of the menu and the menu button.\n   * Additionally will force the menu to be visible and the menu button to be\n   * hidden if the matchMedia is triggered to desktop.\n   *\n   * @private\n   */\n  checkMode() {\n    if (!this.mql || !this.$menu || !this.$menuButton) {\n      return\n    }\n\n    if (this.mql.matches) {\n      this.$menu.removeAttribute('hidden')\n      this.$menuButton.setAttribute('hidden', '')\n    } else {\n      this.$menuButton.removeAttribute('hidden')\n      this.$menuButton.setAttribute('aria-expanded', this.menuIsOpen.toString())\n\n      if (this.menuIsOpen) {\n        this.$menu.removeAttribute('hidden')\n      } else {\n        this.$menu.setAttribute('hidden', '')\n      }\n    }\n  }\n\n  /**\n   * Handle menu button click\n   *\n   * When the menu button is clicked, change the visibility of the menu and then\n   * sync the accessibility state and menu button state\n   *\n   * @private\n   */\n  handleMenuButtonClick() {\n    this.menuIsOpen = !this.menuIsOpen\n    this.checkMode()\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-service-navigation'\n}\n","import { setFocus } from '../../common/index.mjs'\nimport { Component } from '../../component.mjs'\nimport { ElementError } from '../../errors/index.mjs'\n\n/**\n * Skip link component\n *\n * @preserve\n * @augments Component<HTMLAnchorElement>\n */\nexport class SkipLink extends Component {\n  static elementType = HTMLAnchorElement\n\n  /**\n   * @param {Element | null} $root - HTML element to use for skip link\n   * @throws {ElementError} when $root is not set or the wrong type\n   * @throws {ElementError} when $root.hash does not contain a hash\n   * @throws {ElementError} when the linked element is missing or the wrong type\n   */\n  constructor($root) {\n    super($root)\n\n    const hash = this.$root.hash\n    const href = this.$root.getAttribute('href') ?? ''\n\n    // Return early for external URLs or links to other pages\n    if (\n      this.$root.origin !== window.location.origin ||\n      this.$root.pathname !== window.location.pathname\n    ) {\n      return\n    }\n\n    const linkedElementId = hash.replace('#', '')\n\n    // Check link path matching current page\n    if (!linkedElementId) {\n      throw new ElementError(\n        `Skip link: Target link (\\`href=\"${href}\"\\`) has no hash fragment`\n      )\n    }\n\n    const $linkedElement = document.getElementById(linkedElementId)\n\n    // Check for link target element\n    if (!$linkedElement) {\n      throw new ElementError({\n        component: SkipLink,\n        element: $linkedElement,\n        identifier: `Target content (\\`id=\"${linkedElementId}\"\\`)`\n      })\n    }\n\n    /**\n     * Focus the linked element on click\n     *\n     * Adds a helper CSS class to hide native focus styles,\n     * but removes it on blur to restore native focus styles\n     */\n    this.$root.addEventListener('click', () =>\n      setFocus($linkedElement, {\n        onBeforeFocus() {\n          $linkedElement.classList.add('govuk-skip-link-focused-element')\n        },\n        onBlur() {\n          $linkedElement.classList.remove('govuk-skip-link-focused-element')\n        }\n      })\n    )\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-skip-link'\n}\n","import { getBreakpoint } from '../../common/index.mjs'\nimport { Component } from '../../component.mjs'\nimport { ElementError } from '../../errors/index.mjs'\n\n/**\n * Tabs component\n *\n * @preserve\n */\nexport class Tabs extends Component {\n  /** @private */\n  $tabs\n\n  /** @private */\n  $tabList\n\n  /** @private */\n  $tabListItems\n\n  /** @private */\n  jsHiddenClass = 'govuk-tabs__panel--hidden'\n\n  /** @private */\n  changingHash = false\n\n  /** @private */\n  boundTabClick\n\n  /** @private */\n  boundTabKeydown\n\n  /** @private */\n  boundOnHashChange\n\n  /**\n   * @private\n   * @type {MediaQueryList | null}\n   */\n  mql = null\n\n  /**\n   * @param {Element | null} $root - HTML element to use for tabs\n   */\n  constructor($root) {\n    super($root)\n\n    const $tabs = this.$root.querySelectorAll('a.govuk-tabs__tab')\n    if (!$tabs.length) {\n      throw new ElementError({\n        component: Tabs,\n        identifier: 'Links (`<a class=\"govuk-tabs__tab\">`)'\n      })\n    }\n\n    this.$tabs = $tabs\n\n    // Save bound functions so we can remove event listeners during teardown\n    this.boundTabClick = this.onTabClick.bind(this)\n    this.boundTabKeydown = this.onTabKeydown.bind(this)\n    this.boundOnHashChange = this.onHashChange.bind(this)\n\n    const $tabList = this.$root.querySelector('.govuk-tabs__list')\n    const $tabListItems = this.$root.querySelectorAll(\n      'li.govuk-tabs__list-item'\n    )\n\n    if (!$tabList) {\n      throw new ElementError({\n        component: Tabs,\n        identifier: 'List (`<ul class=\"govuk-tabs__list\">`)'\n      })\n    }\n\n    if (!$tabListItems.length) {\n      throw new ElementError({\n        component: Tabs,\n        identifier: 'List items (`<li class=\"govuk-tabs__list-item\">`)'\n      })\n    }\n\n    this.$tabList = $tabList\n    this.$tabListItems = $tabListItems\n\n    this.setupResponsiveChecks()\n  }\n\n  /**\n   * Setup viewport resize check\n   *\n   * @private\n   */\n  setupResponsiveChecks() {\n    const breakpoint = getBreakpoint('tablet')\n\n    if (!breakpoint.value) {\n      throw new ElementError({\n        component: Tabs,\n        identifier: `CSS custom property (\\`${breakpoint.property}\\`) on pseudo-class \\`:root\\``\n      })\n    }\n\n    // Media query list for GOV.UK Frontend tablet breakpoint\n    this.mql = window.matchMedia(`(min-width: ${breakpoint.value})`)\n\n    // MediaQueryList.addEventListener isn't supported by Safari < 14 so we need\n    // to be able to fall back to the deprecated MediaQueryList.addListener\n    if ('addEventListener' in this.mql) {\n      this.mql.addEventListener('change', () => this.checkMode())\n    } else {\n      // @ts-expect-error Property 'addListener' does not exist\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      this.mql.addListener(() => this.checkMode())\n    }\n\n    this.checkMode()\n  }\n\n  /**\n   * Setup or teardown handler for viewport resize check\n   *\n   * @private\n   */\n  checkMode() {\n    if (this.mql?.matches) {\n      this.setup()\n    } else {\n      this.teardown()\n    }\n  }\n\n  /**\n   * Setup tab component\n   *\n   * @private\n   */\n  setup() {\n    this.$tabList.setAttribute('role', 'tablist')\n\n    this.$tabListItems.forEach(($item) => {\n      $item.setAttribute('role', 'presentation')\n    })\n\n    this.$tabs.forEach(($tab) => {\n      // Set HTML attributes\n      this.setAttributes($tab)\n\n      // Handle events\n      $tab.addEventListener('click', this.boundTabClick, true)\n      $tab.addEventListener('keydown', this.boundTabKeydown, true)\n\n      // Remove old active panels\n      this.hideTab($tab)\n    })\n\n    // Show either the active tab according to the URL's hash or the first tab\n    const $activeTab = this.getTab(window.location.hash) ?? this.$tabs[0]\n\n    this.showTab($activeTab)\n\n    // Handle hashchange events\n    window.addEventListener('hashchange', this.boundOnHashChange, true)\n  }\n\n  /**\n   * Teardown tab component\n   *\n   * @private\n   */\n  teardown() {\n    this.$tabList.removeAttribute('role')\n\n    this.$tabListItems.forEach(($item) => {\n      $item.removeAttribute('role')\n    })\n\n    this.$tabs.forEach(($tab) => {\n      // Remove events\n      $tab.removeEventListener('click', this.boundTabClick, true)\n      $tab.removeEventListener('keydown', this.boundTabKeydown, true)\n\n      // Unset HTML attributes\n      this.unsetAttributes($tab)\n    })\n\n    // Remove hashchange event handler\n    window.removeEventListener('hashchange', this.boundOnHashChange, true)\n  }\n\n  /**\n   * Handle hashchange event\n   *\n   * @private\n   * @returns {void | undefined} Returns void, or undefined when prevented\n   */\n  onHashChange() {\n    const hash = window.location.hash\n    const $tabWithHash = this.getTab(hash)\n    if (!$tabWithHash) {\n      return\n    }\n\n    // Prevent changing the hash\n    if (this.changingHash) {\n      this.changingHash = false\n      return\n    }\n\n    // Show either the active tab according to the URL's hash or the first tab\n    const $previousTab = this.getCurrentTab()\n    if (!$previousTab) {\n      return\n    }\n\n    this.hideTab($previousTab)\n    this.showTab($tabWithHash)\n    $tabWithHash.focus()\n  }\n\n  /**\n   * Hide panel for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  hideTab($tab) {\n    this.unhighlightTab($tab)\n    this.hidePanel($tab)\n  }\n\n  /**\n   * Show panel for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  showTab($tab) {\n    this.highlightTab($tab)\n    this.showPanel($tab)\n  }\n\n  /**\n   * Get tab link by hash\n   *\n   * @private\n   * @param {string} hash - Hash fragment including #\n   * @returns {HTMLAnchorElement | null} Tab link\n   */\n  getTab(hash) {\n    return this.$root.querySelector(`a.govuk-tabs__tab[href=\"${hash}\"]`)\n  }\n\n  /**\n   * Set tab link and panel attributes\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  setAttributes($tab) {\n    const panelId = $tab.hash.replace('#', '')\n    if (!panelId) {\n      return\n    }\n\n    // Set tab attributes\n    $tab.setAttribute('id', `tab_${panelId}`)\n    $tab.setAttribute('role', 'tab')\n    $tab.setAttribute('aria-controls', panelId)\n    $tab.setAttribute('aria-selected', 'false')\n    $tab.setAttribute('tabindex', '-1')\n\n    // Set panel attributes\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.setAttribute('role', 'tabpanel')\n    $panel.setAttribute('aria-labelledby', $tab.id)\n    $panel.classList.add(this.jsHiddenClass)\n  }\n\n  /**\n   * Unset tab link and panel attributes\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  unsetAttributes($tab) {\n    // unset tab attributes\n    $tab.removeAttribute('id')\n    $tab.removeAttribute('role')\n    $tab.removeAttribute('aria-controls')\n    $tab.removeAttribute('aria-selected')\n    $tab.removeAttribute('tabindex')\n\n    // unset panel attributes\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.removeAttribute('role')\n    $panel.removeAttribute('aria-labelledby')\n    $panel.classList.remove(this.jsHiddenClass)\n  }\n\n  /**\n   * Handle tab link clicks\n   *\n   * @private\n   * @param {MouseEvent} event - Mouse click event\n   * @returns {void} Returns void\n   */\n  onTabClick(event) {\n    const $currentTab = this.getCurrentTab()\n    const $nextTab = event.currentTarget\n\n    if (!$currentTab || !($nextTab instanceof HTMLAnchorElement)) {\n      return\n    }\n\n    event.preventDefault()\n\n    this.hideTab($currentTab)\n    this.showTab($nextTab)\n    this.createHistoryEntry($nextTab)\n  }\n\n  /**\n   * Update browser URL hash fragment for tab\n   *\n   * - Allows back/forward to navigate tabs\n   * - Avoids page jump when hash changes\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  createHistoryEntry($tab) {\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    // Save and restore the id so the page doesn't jump when a user clicks a tab\n    // (which changes the hash)\n    const panelId = $panel.id\n    $panel.id = ''\n    this.changingHash = true\n    window.location.hash = panelId\n    $panel.id = panelId\n  }\n\n  /**\n   * Handle tab keydown event\n   *\n   * - Press right arrow for next tab\n   * - Press left arrow for previous tab\n   *\n   * @private\n   * @param {KeyboardEvent} event - Keydown event\n   */\n  onTabKeydown(event) {\n    switch (event.key) {\n      // 'Left' and 'Right' required for Edge 16 support.\n      case 'ArrowLeft':\n      case 'Left':\n        this.activatePreviousTab()\n        event.preventDefault()\n        break\n      case 'ArrowRight':\n      case 'Right':\n        this.activateNextTab()\n        event.preventDefault()\n        break\n    }\n  }\n\n  /**\n   * Activate next tab\n   *\n   * @private\n   */\n  activateNextTab() {\n    const $currentTab = this.getCurrentTab()\n    if (!$currentTab?.parentElement) {\n      return\n    }\n\n    const $nextTabListItem = $currentTab.parentElement.nextElementSibling\n    if (!$nextTabListItem) {\n      return\n    }\n\n    const $nextTab = $nextTabListItem.querySelector('a.govuk-tabs__tab')\n    if (!$nextTab) {\n      return\n    }\n\n    this.hideTab($currentTab)\n    this.showTab($nextTab)\n    $nextTab.focus()\n    this.createHistoryEntry($nextTab)\n  }\n\n  /**\n   * Activate previous tab\n   *\n   * @private\n   */\n  activatePreviousTab() {\n    const $currentTab = this.getCurrentTab()\n    if (!$currentTab?.parentElement) {\n      return\n    }\n\n    const $previousTabListItem =\n      $currentTab.parentElement.previousElementSibling\n    if (!$previousTabListItem) {\n      return\n    }\n\n    const $previousTab = $previousTabListItem.querySelector('a.govuk-tabs__tab')\n    if (!$previousTab) {\n      return\n    }\n\n    this.hideTab($currentTab)\n    this.showTab($previousTab)\n    $previousTab.focus()\n    this.createHistoryEntry($previousTab)\n  }\n\n  /**\n   * Get tab panel for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   * @returns {Element | null} Tab panel\n   */\n  getPanel($tab) {\n    const panelId = $tab.hash.replace('#', '')\n    if (!panelId) {\n      return null\n    }\n\n    return this.$root.querySelector(`#${panelId}`)\n  }\n\n  /**\n   * Show tab panel for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  showPanel($tab) {\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.classList.remove(this.jsHiddenClass)\n  }\n\n  /**\n   * Hide tab panel for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  hidePanel($tab) {\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.classList.add(this.jsHiddenClass)\n  }\n\n  /**\n   * Unset 'selected' state for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  unhighlightTab($tab) {\n    if (!$tab.parentElement) {\n      return\n    }\n\n    $tab.setAttribute('aria-selected', 'false')\n    $tab.parentElement.classList.remove('govuk-tabs__list-item--selected')\n    $tab.setAttribute('tabindex', '-1')\n  }\n\n  /**\n   * Set 'selected' state for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  highlightTab($tab) {\n    if (!$tab.parentElement) {\n      return\n    }\n\n    $tab.setAttribute('aria-selected', 'true')\n    $tab.parentElement.classList.add('govuk-tabs__list-item--selected')\n    $tab.setAttribute('tabindex', '0')\n  }\n\n  /**\n   * Get current tab link\n   *\n   * @private\n   * @returns {HTMLAnchorElement | null} Tab link\n   */\n  getCurrentTab() {\n    return this.$root.querySelector(\n      '.govuk-tabs__list-item--selected a.govuk-tabs__tab'\n    )\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-tabs'\n}\n","import { normaliseOptions } from './common/configuration.mjs'\nimport { isObject, isSupported } from './common/index.mjs'\nimport { Accordion } from './components/accordion/accordion.mjs'\nimport { Button } from './components/button/button.mjs'\nimport { CharacterCount } from './components/character-count/character-count.mjs'\nimport { Checkboxes } from './components/checkboxes/checkboxes.mjs'\nimport { ErrorSummary } from './components/error-summary/error-summary.mjs'\nimport { ExitThisPage } from './components/exit-this-page/exit-this-page.mjs'\nimport { FileUpload } from './components/file-upload/file-upload.mjs'\nimport { Header } from './components/header/header.mjs'\nimport { NotificationBanner } from './components/notification-banner/notification-banner.mjs'\nimport { PasswordInput } from './components/password-input/password-input.mjs'\nimport { Radios } from './components/radios/radios.mjs'\nimport { ServiceNavigation } from './components/service-navigation/service-navigation.mjs'\nimport { SkipLink } from './components/skip-link/skip-link.mjs'\nimport { Tabs } from './components/tabs/tabs.mjs'\nimport { ElementError, SupportError } from './errors/index.mjs'\n\n/**\n * Initialise all components\n *\n * Use the `data-module` attributes to find, instantiate and init all of the\n * components provided as part of GOV.UK Frontend.\n *\n * @param {Config | Element | Document | null} [scopeOrConfig] - Scope of the document to search within or config for all components (with optional scope)\n */\nfunction initAll(scopeOrConfig = {}) {\n  const config = isObject(scopeOrConfig) ? scopeOrConfig : {}\n\n  // Extract initialisation options\n  const options = normaliseOptions(scopeOrConfig)\n\n  try {\n    // Skip initialisation when GOV.UK Frontend is not supported\n    if (!isSupported()) {\n      throw new SupportError()\n    }\n\n    // Users can initialise GOV.UK Frontend in certain sections of the page\n    // unless the scope is null (for example, query selector not found)\n    if (options.scope === null) {\n      throw new ElementError({\n        element: options.scope,\n        identifier: 'GOV.UK Frontend scope element (`$scope`)'\n      })\n    }\n  } catch (error) {\n    if (options.onError) {\n      options.onError(error, {\n        config\n      })\n    } else {\n      console.log(error)\n    }\n\n    return\n  }\n\n  const components = /** @type {const} */ ([\n    [Accordion, config.accordion],\n    [Button, config.button],\n    [CharacterCount, config.characterCount],\n    [Checkboxes],\n    [ErrorSummary, config.errorSummary],\n    [ExitThisPage, config.exitThisPage],\n    [FileUpload, config.fileUpload],\n    [Header],\n    [NotificationBanner, config.notificationBanner],\n    [PasswordInput, config.passwordInput],\n    [Radios],\n    [ServiceNavigation],\n    [SkipLink],\n    [Tabs]\n  ])\n\n  components.forEach(([Component, componentConfig]) => {\n    createAll(Component, componentConfig, options)\n  })\n}\n\n/**\n * Create all instances of a specific component on the page\n *\n * Uses the `data-module` attribute to find all elements matching the specified\n * component on the page, creating instances of the component object for each\n * of them.\n *\n * Any component errors will be caught and logged to the console.\n *\n * @template {CompatibleClass} ComponentClass\n * @param {ComponentClass} Component - class of the component to create\n * @param {ComponentConfig<ComponentClass>} [config] - Config supplied to component\n * @param {OnErrorCallback<ComponentClass> | Element | Document | null | CreateAllOptions<ComponentClass>} [scopeOrOptions] - options for createAll including scope of the document to search within and callback function if error throw by component on init\n * @returns {Array<InstanceType<ComponentClass>>} - array of instantiated components\n */\nfunction createAll(Component, config, scopeOrOptions) {\n  let /** @type {NodeListOf<Element> | undefined} */ $elements\n\n  // Extract initialisation options\n  const options = normaliseOptions(scopeOrOptions)\n\n  try {\n    // Skip initialisation when GOV.UK Frontend is not supported\n    if (!isSupported()) {\n      throw new SupportError()\n    }\n\n    // Users can initialise GOV.UK Frontend in certain sections of the page\n    // unless the scope is null (for example, query selector not found)\n    if (options.scope === null) {\n      throw new ElementError({\n        element: options.scope,\n        component: Component,\n        identifier: 'Scope element (`$scope`)'\n      })\n    }\n\n    $elements = options.scope?.querySelectorAll(\n      `[data-module=\"${Component.moduleName}\"]`\n    )\n  } catch (error) {\n    if (options.onError) {\n      options.onError(error, {\n        component: Component,\n        config\n      })\n    } else {\n      console.log(error)\n    }\n\n    return []\n  }\n\n  /* eslint-disable-next-line @typescript-eslint/no-unsafe-return --\n   * We can't define CompatibleClass as `{new(): CompatibleClass, moduleName: string}`,\n   * as when doing `typeof Accordion` (or any component), TypeScript doesn't seem\n   * to acknowledge the static `moduleName` that's set in our component classes.\n   * This means we have to set the constructor of `CompatibleClass` as `{new(): any}`,\n   * leading to ESLint frowning that we're returning `any[]`.\n   */\n  return Array.from($elements ?? [])\n    .map(($element) => {\n      try {\n        // Only pass config to components that accept it\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return typeof config !== 'undefined'\n          ? new Component($element, config)\n          : new Component($element)\n      } catch (error) {\n        if (options.onError) {\n          options.onError(error, {\n            element: $element,\n            component: Component,\n            config\n          })\n        } else {\n          console.log(error)\n        }\n\n        return null\n      }\n    })\n    .filter(Boolean) // Exclude components that errored\n}\n\nexport { initAll, createAll }\n\n/* eslint-disable jsdoc/valid-types --\n * `{new(...args: any[] ): object}` is not recognised as valid\n * https://github.com/gajus/eslint-plugin-jsdoc/issues/145#issuecomment-1308722878\n * https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/issues/131\n **/\n\n/**\n * @typedef {{new (...args: any[]): any, moduleName: string}} CompatibleClass\n */\n\n/* eslint-enable jsdoc/valid-types */\n\n/**\n * Config for all components via `initAll()`\n *\n * @typedef {object} Config\n * @property {Element | Document | null} [scope] - Scope of the document to search within\n * @property {OnErrorCallback<CompatibleClass>} [onError] - Initialisation error callback\n * @property {AccordionConfig} [accordion] - Accordion config\n * @property {ButtonConfig} [button] - Button config\n * @property {CharacterCountConfig} [characterCount] - Character Count config\n * @property {ErrorSummaryConfig} [errorSummary] - Error Summary config\n * @property {ExitThisPageConfig} [exitThisPage] - Exit This Page config\n * @property {FileUploadConfig} [fileUpload] - File Upload config\n * @property {NotificationBannerConfig} [notificationBanner] - Notification Banner config\n * @property {PasswordInputConfig} [passwordInput] - Password input config\n */\n\n/**\n * Config for individual components\n *\n * @import { AccordionConfig } from './components/accordion/accordion.mjs'\n * @import { ButtonConfig } from './components/button/button.mjs'\n * @import { CharacterCountConfig } from './components/character-count/character-count.mjs'\n * @import { ErrorSummaryConfig } from './components/error-summary/error-summary.mjs'\n * @import { ExitThisPageConfig } from './components/exit-this-page/exit-this-page.mjs'\n * @import { NotificationBannerConfig } from './components/notification-banner/notification-banner.mjs'\n * @import { PasswordInputConfig } from './components/password-input/password-input.mjs'\n * @import { FileUploadConfig } from './components/file-upload/file-upload.mjs'\n */\n\n/**\n * Component config keys, e.g. `accordion` and `characterCount`\n *\n * @typedef {keyof Omit<Config, 'scope' | 'onError'>} ConfigKey\n */\n\n/**\n * @template {CompatibleClass} ComponentClass\n * @typedef {ConstructorParameters<ComponentClass>[1]} ComponentConfig\n */\n\n/**\n * @template {CompatibleClass} ComponentClass\n * @typedef {object} ErrorContext\n * @property {Element} [element] - Element used for component module initialisation\n * @property {ComponentClass} [component] - Class of component\n * @property {Config | ComponentConfig<ComponentClass>} [config] - Config supplied to components\n */\n\n/**\n * @template {CompatibleClass} ComponentClass\n * @callback OnErrorCallback\n * @param {unknown} error - Thrown error\n * @param {ErrorContext<ComponentClass>} context - Object containing the element, component class and configuration\n */\n\n/**\n * @template {CompatibleClass} ComponentClass\n * @typedef {object} CreateAllOptions\n * @property {Element | Document | null} [scope] - scope of the document to search within\n * @property {OnErrorCallback<ComponentClass>} [onError] - callback function if error throw by component on init\n */\n"],"names":["version","getBreakpoint","name","property","value","window","getComputedStyle","document","documentElement","getPropertyValue","undefined","setFocus","$element","options","_options$onBeforeFocu","isFocusable","getAttribute","onBlur","_options$onBlur","call","removeAttribute","setAttribute","addEventListener","once","onBeforeFocus","focus","isSupported","$scope","body","classList","contains","isObject","option","Array","isArray","isScope","Element","Document","formatErrorMessage","Component","message","moduleName","GOVUKFrontendError","Error","constructor","args","super","this","SupportError","supportMessage","HTMLScriptElement","prototype","ConfigError","ElementError","messageOrOptions","component","identifier","element","expectedType","InitError","componentOrMessage","$root","_$root","childConstructor","elementType","checkSupport","checkInitialised","HTMLElement","hasAttribute","isInitialised","configOverride","Symbol","for","ConfigurableComponent","param","config","_config","defaults","datasetConfig","dataset","schema","out","entries","Object","properties","entry","namespace","field","toString","normaliseString","type","extractConfigByNamespace","normaliseDataset","mergeConfigs","trimmedValue","trim","output","outputType","includes","length","isFinite","Number","normaliseOptions","scopeOrOptions","onError","scope","configObjects","formattedConfigObject","configObject","key","keys","override","newObject","current","keyParts","split","index","I18n","translations","_config$locale","locale","lang","t","lookupKey","translation","count","translationPluralForm","getPluralSuffix","match","replacePlaceholders","translationString","formatter","Intl","NumberFormat","supportedLocalesOf","replace","placeholderWithBraces","placeholderKey","hasOwnProperty","placeholderValue","format","hasIntlPluralRulesSupport","Boolean","PluralRules","preferredForm","select","console","warn","Accordion","i18n","controlsClass","showAllClass","showAllTextClass","sectionClass","sectionExpandedClass","sectionButtonClass","sectionHeaderClass","sectionHeadingClass","sectionHeadingDividerClass","sectionHeadingTextClass","sectionHeadingTextFocusClass","sectionShowHideToggleClass","sectionShowHideToggleFocusClass","sectionShowHideTextClass","upChevronIconClass","downChevronIconClass","sectionSummaryClass","sectionSummaryFocusClass","sectionContentClass","$sections","$showAllButton","$showAllIcon","$showAllText","querySelectorAll","initControls","initSectionHeaders","updateShowAllButton","areAllSectionsOpen","createElement","add","appendChild","$accordionControls","insertBefore","firstChild","onShowOrHideAllToggle","event","onBeforeMatch","forEach","$section","i","$header","querySelector","constructHeaderMarkup","setExpanded","isExpanded","onSectionToggle","setInitialState","$span","$heading","$summary","$button","id","attr","from","attributes","$headingText","$headingTextFocus","childNodes","$child","$showHideToggle","$showHideToggleFocus","$showHideText","$showHideIcon","getButtonPunctuationEl","$summarySpan","$summarySpanFocus","remove","removeChild","$fragment","target","closest","nowExpanded","storeState","expanded","$content","newButtonText","textContent","ariaLabelParts","push","ariaLabelMessage","join","every","toggle","getIdentifier","rememberExpanded","sessionStorage","setItem","_unused","state","getItem","_unused2","$punctuationEl","freeze","hideAllSections","hideSection","hideSectionAriaLabel","showAllSections","showSection","showSectionAriaLabel","Button","debounceFormSubmitTimer","handleKeyDown","debounce","$target","preventDefault","click","preventDoubleClick","setTimeout","DEBOUNCE_TIMEOUT_IN_SECONDS","closestAttributeValue","attributeName","$closestElementWithAttribute","CharacterCount","configOverrides","maxlength","maxwords","_ref","_this$config$maxwords","$textarea","$visibleCountMessage","$screenReaderCountMessage","lastInputTimestamp","lastInputValue","valueChecker","maxLength","HTMLTextAreaElement","HTMLInputElement","errors","validationErrors","conditions","required","errorMessage","validateConfig","Infinity","textareaDescriptionId","$textareaDescription","getElementById","$errorMessage","insertAdjacentElement","className","bindChangeEvents","updateCountMessage","handleKeyUp","handleFocus","handleBlur","updateVisibleCountMessage","Date","now","setInterval","updateIfValueChanged","clearInterval","updateScreenReaderCountMessage","isError","isOverThreshold","getCountMessage","text","_text$match","remainingNumber","countType","formatCountMessage","translationKeySuffix","Math","abs","threshold","currentLength","charactersUnderLimit","one","other","charactersAtLimit","charactersOverLimit","wordsUnderLimit","wordsAtLimit","wordsOverLimit","textareaDescription","anyOf","Checkboxes","$inputs","$input","targetId","syncAllConditionalReveals","handleClick","syncConditionalRevealWithInputState","inputIsChecked","checked","unCheckAllInputsExcept","$inputWithSameName","form","unCheckExclusiveInputs","$exclusiveInput","$clickedInput","ErrorSummary","disableAutoFocus","focusTarget","HTMLAnchorElement","inputId","hash","$legendOrLabel","getAssociatedLegendOrLabel","scrollIntoView","preventScroll","_document$querySelect","$fieldset","$legends","getElementsByTagName","$candidateLegend","legendTop","getBoundingClientRect","top","inputRect","height","innerHeight","ExitThisPage","$skiplinkButton","$updateSpan","$indicatorContainer","$overlay","keypressCounter","lastKeyWasModified","timeoutTime","keypressTimeoutId","timeoutMessageId","buildIndicator","initUpdateSpan","initButtonClickHandler","handleKeypress","bind","govukFrontendExitThisPageKeypress","resetPage","$indicator","updateIndicator","exitPage","location","href","resetKeypressTimer","clearTimeout","setKeypressTimer","shiftKey","activated","timedOut","pressTwoMoreTimes","pressOneMoreTime","FileUpload","$status","$announcements","enteredAnotherElement","$label","findLabel","ariaDescribedBy","innerText","commaSpan","containerSpan","buttonSpan","insertAdjacentText","instructionSpan","onClick","onChange","updateDisabledState","observeDisabledState","onDrop","updateDropzoneVisibility","disabled","hideDraggingState","Node","dataTransfer","canDrop","showDraggingState","canFillInput","files","dispatchEvent","CustomEvent","matchesInputCapacity","items","list","result","kind","countFileItems","types","numberOfFiles","multiple","fileCount","MutationObserver","mutationList","mutation","observe","chooseFilesButton","dropInstruction","noFileChosen","multipleFilesChosen","enteredDropZone","leftDropZone","Header","$menuButton","$menu","menuIsOpen","mql","menuId","setupResponsiveChecks","handleMenuButtonClick","breakpoint","matchMedia","checkMode","addListener","matches","NotificationBanner","PasswordInput","$showHideButton","$screenReaderStatusMessage","HTMLButtonElement","hide","persisted","show","setType","isHidden","prefixButton","prefixStatus","showPassword","hidePassword","showPasswordAriaLabel","hidePasswordAriaLabel","passwordShownAnnouncement","passwordHiddenAnnouncement","Radios","$allInputs","$clickedInputForm","$clickedInputName","hasSameFormOwner","ServiceNavigation","SkipLink","_this$$root$getAttrib","origin","pathname","linkedElementId","$linkedElement","Tabs","$tabs","$tabList","$tabListItems","jsHiddenClass","changingHash","boundTabClick","boundTabKeydown","boundOnHashChange","onTabClick","onTabKeydown","onHashChange","_this$mql","setup","teardown","_this$getTab","$item","$tab","setAttributes","hideTab","$activeTab","getTab","showTab","removeEventListener","unsetAttributes","$tabWithHash","$previousTab","getCurrentTab","unhighlightTab","hidePanel","highlightTab","showPanel","panelId","$panel","getPanel","$currentTab","$nextTab","currentTarget","createHistoryEntry","activatePreviousTab","activateNextTab","parentElement","$nextTabListItem","nextElementSibling","$previousTabListItem","previousElementSibling","initAll","scopeOrConfig","error","log","accordion","button","characterCount","errorSummary","exitThisPage","fileUpload","notificationBanner","passwordInput","componentConfig","createAll","$elements","_options$scope","map","filter"],"mappings":"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"}