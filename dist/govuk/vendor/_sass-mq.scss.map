{"version":3,"sources":["../../../src/govuk/vendor/_sass-mq.scss"],"names":[],"mappings":"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","file":"_sass-mq.scss","sourcesContent":["// mq() v4.0.2\n// sass-mq/sass-mq\n\n@charset \"UTF-8\"; // Fixes an issue where Ruby locale is not set properly\n                  // See https://github.com/sass-mq/sass-mq/pull/10\n\n/// Base font size on the `<body>` element\n/// @type Number (unit)\n$mq-base-font-size: 16px !default;\n\n/// Responsive mode\n///\n/// Set to `false` to enable support for browsers that do not support @media queries,\n/// (IE <= 8, Firefox <= 3, Opera <= 9)\n///\n/// You could create a stylesheet served exclusively to older browsers,\n/// where @media queries are rasterized\n///\n/// @example scss\n///  // old-ie.scss\n///  $mq-responsive: false;\n///  @import 'main'; // @media queries in this file will be rasterized up to $mq-static-breakpoint\n///                   // larger breakpoints will be ignored\n///\n/// @type Boolean\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-off Disabled responsive mode documentation\n$mq-responsive: true !default;\n\n/// Breakpoint list\n///\n/// Name your breakpoints in a way that creates a ubiquitous language\n/// across team members. It will improve communication between\n/// stakeholders, designers, developers, and testers.\n///\n/// @type Map\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint Full documentation and examples\n$mq-breakpoints: (\n    mobile:  320px,\n    tablet:  740px,\n    desktop: 980px,\n    wide:    1300px\n) !default;\n\n/// Static breakpoint (for fixed-width layouts)\n///\n/// Define the breakpoint from $mq-breakpoints that should\n/// be used as the target width for the fixed-width layout\n/// (i.e. when $mq-responsive is set to 'false') in a old-ie.scss\n///\n/// @example scss\n///  // tablet-only.scss\n///  //\n///  // Ignore all styles above tablet breakpoint,\n///  // and fix the styles (e.g. layout) at tablet width\n///  $mq-responsive: false;\n///  $mq-static-breakpoint: tablet;\n///  @import 'main'; // @media queries in this file will be rasterized up to tablet\n///                   // larger breakpoints will be ignored\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#adding-custom-breakpoints Full documentation and examples\n$mq-static-breakpoint: desktop !default;\n\n/// Show breakpoints in the top right corner\n///\n/// If you want to display the currently active breakpoint in the top\n/// right corner of your site during development, add the breakpoints\n/// to this list, ordered by width, e.g. (mobile, tablet, desktop).\n///\n/// @type map\n$mq-show-breakpoints: () !default;\n\n/// Customize the media type (e.g. `@media screen` or `@media print`)\n/// By default sass-mq uses an \"all\" media type (`@media all and …`)\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#changing-media-type Full documentation and examples\n$mq-media-type: all !default;\n\n/// Convert pixels to ems\n///\n/// @param {Number} $px - value to convert\n/// @param {Number} $base-font-size ($mq-base-font-size) - `<body>` font size\n///\n/// @example scss\n///  $font-size-in-ems: mq-px2em(16px);\n///  p { font-size: mq-px2em(16px); }\n///\n/// @requires $mq-base-font-size\n/// @returns {Number}\n@function mq-px2em($px, $base-font-size: $mq-base-font-size) {\n    @if unitless($px) {\n        @warn \"Assuming #{$px} to be in pixels, attempting to convert it into pixels.\";\n        @return mq-px2em($px * 1px, $base-font-size);\n    } @else if unit($px) == em {\n        @return $px;\n    }\n    @return ($px / $base-font-size) * 1em;\n}\n\n/// Get a breakpoint's width\n///\n/// @param {String} $name - Name of the breakpoint. One of $mq-breakpoints\n///\n/// @example scss\n///  $tablet-width: mq-get-breakpoint-width(tablet);\n///  @media (min-width: mq-get-breakpoint-width(desktop)) {}\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @returns {Number} Value in pixels\n@function mq-get-breakpoint-width($name, $breakpoints: $mq-breakpoints) {\n    @if map-has-key($breakpoints, $name) {\n        @return map-get($breakpoints, $name);\n    } @else {\n        @warn \"Breakpoint #{$name} wasn't found in $breakpoints.\";\n    }\n}\n\n/// Media Query mixin\n///\n/// @param {String | Boolean} $from (false) - One of $mq-breakpoints\n/// @param {String | Boolean} $until (false) - One of $mq-breakpoints\n/// @param {String | Boolean} $and (false) - Additional media query parameters\n/// @param {String} $media-type ($mq-media-type) - Media type: screen, print…\n///\n/// @ignore Undocumented API, for advanced use only:\n/// @ignore @param {Map} $breakpoints ($mq-breakpoints)\n/// @ignore @param {String} $static-breakpoint ($mq-static-breakpoint)\n///\n/// @content styling rules, wrapped into a @media query when $responsive is true\n///\n/// @requires {Variable} $mq-media-type\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-static-breakpoint\n/// @requires {function} mq-px2em\n/// @requires {function} mq-get-breakpoint-width\n///\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-on-default Full documentation and examples\n///\n/// @example scss\n///  .element {\n///    @include mq($from: mobile) {\n///      color: red;\n///    }\n///    @include mq($until: tablet) {\n///      color: blue;\n///    }\n///    @include mq(mobile, tablet) {\n///      color: green;\n///    }\n///    @include mq($from: tablet, $and: '(orientation: landscape)') {\n///      color: teal;\n///    }\n///    @include mq(950px) {\n///      color: hotpink;\n///    }\n///    @include mq(tablet, $media-type: screen) {\n///      color: hotpink;\n///    }\n///    // Advanced use:\n///    $my-breakpoints: (L: 900px, XL: 1200px);\n///    @include mq(L, $breakpoints: $my-breakpoints, $static-breakpoint: L) {\n///      color: hotpink;\n///    }\n///  }\n@mixin mq(\n    $from: false,\n    $until: false,\n    $and: false,\n    $media-type: $mq-media-type,\n    $breakpoints: $mq-breakpoints,\n    $responsive: $mq-responsive,\n    $static-breakpoint: $mq-static-breakpoint\n) {\n    $min-width: 0;\n    $max-width: 0;\n    $media-query: '';\n\n    // From: this breakpoint (inclusive)\n    @if $from {\n        @if type-of($from) == number {\n            $min-width: mq-px2em($from);\n        } @else {\n            $min-width: mq-px2em(mq-get-breakpoint-width($from, $breakpoints));\n        }\n    }\n\n    // Until: that breakpoint (exclusive)\n    @if $until {\n        @if type-of($until) == number {\n            $max-width: mq-px2em($until);\n        } @else {\n            $max-width: mq-px2em(mq-get-breakpoint-width($until, $breakpoints)) - .01em;\n        }\n    }\n\n    // Responsive support is disabled, rasterize the output outside @media blocks\n    // The browser will rely on the cascade itself.\n    @if $responsive == false {\n        $static-breakpoint-width: mq-get-breakpoint-width($static-breakpoint, $breakpoints);\n        $target-width: mq-px2em($static-breakpoint-width);\n\n        // Output only rules that start at or span our target width\n        @if (\n            $and == false\n            and $min-width <= $target-width\n            and (\n                $until == false or $max-width >= $target-width\n            )\n            and $media-type != 'print'\n        ) {\n            @content;\n        }\n    }\n\n    // Responsive support is enabled, output rules inside @media queries\n    @else {\n        @if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }\n        @if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }\n        @if $and            { $media-query: '#{$media-query} and #{$and}'; }\n\n        // Remove unnecessary media query prefix 'all and '\n        @if ($media-type == 'all' and $media-query != '') {\n            $media-type: '';\n            $media-query: str-slice(unquote($media-query), 6);\n        }\n\n        @media #{$media-type + $media-query} {\n            @content;\n        }\n    }\n}\n\n/// Quick sort\n///\n/// @author Sam Richards\n/// @access private\n/// @param {List} $list - List to sort\n/// @returns {List} Sorted List\n@function _mq-quick-sort($list) {\n    $less:  ();\n    $equal: ();\n    $large: ();\n\n    @if length($list) > 1 {\n        $seed: nth($list, ceil(length($list) / 2));\n\n        @each $item in $list {\n            @if ($item == $seed) {\n                $equal: append($equal, $item);\n            } @else if ($item < $seed) {\n                $less: append($less, $item);\n            } @else if ($item > $seed) {\n                $large: append($large, $item);\n            }\n        }\n\n        @return join(join(_mq-quick-sort($less), $equal), _mq-quick-sort($large));\n    }\n\n    @return $list;\n}\n\n/// Sort a map by values (works with numbers only)\n///\n/// @access private\n/// @param {Map} $map - Map to sort\n/// @returns {Map} Map sorted by value\n@function _mq-map-sort-by-value($map) {\n    $map-sorted: ();\n    $map-keys: map-keys($map);\n    $map-values: map-values($map);\n    $map-values-sorted: _mq-quick-sort($map-values);\n\n    // Reorder key/value pairs based on key values\n    @each $value in $map-values-sorted {\n        $index: index($map-values, $value);\n        $key: nth($map-keys, $index);\n        $map-sorted: map-merge($map-sorted, ($key: $value));\n\n        // Unset the value in $map-values to prevent the loop\n        // from finding the same index twice\n        $map-values: set-nth($map-values, $index, 0);\n    }\n\n    @return $map-sorted;\n}\n\n/// Add a breakpoint\n///\n/// @param {String} $name - Name of the breakpoint\n/// @param {Number} $width - Width of the breakpoint\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @example scss\n///  @include mq-add-breakpoint(tvscreen, 1920px);\n///  @include mq(tvscreen) {}\n@mixin mq-add-breakpoint($name, $width) {\n    $new-breakpoint: ($name: $width);\n    $mq-breakpoints: map-merge($mq-breakpoints, $new-breakpoint) !global;\n    $mq-breakpoints: _mq-map-sort-by-value($mq-breakpoints) !global;\n}\n\n/// Show the active breakpoint in the top right corner of the viewport\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint\n///\n/// @param {List} $show-breakpoints ($mq-show-breakpoints) - List of breakpoints to show in the top right corner\n/// @param {Map} $breakpoints ($mq-breakpoints) - Breakpoint names and sizes\n///\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-show-breakpoints\n///\n/// @example scss\n///  // Show breakpoints using global settings\n///  @include mq-show-breakpoints;\n///\n///  // Show breakpoints using custom settings\n///  @include mq-show-breakpoints((L, XL), (S: 300px, L: 800px, XL: 1200px));\n@mixin mq-show-breakpoints($show-breakpoints: $mq-show-breakpoints, $breakpoints: $mq-breakpoints) {\n    body::before {\n        background-color: #FCF8E3;\n        border-bottom: 1px solid #FBEED5;\n        border-left: 1px solid #FBEED5;\n        color: #C09853;\n        font: small-caption;\n        padding: 3px 6px;\n        pointer-events: none;\n        position: fixed;\n        right: 0;\n        top: 0;\n        z-index: 100;\n\n        // Loop through the breakpoints that should be shown\n        @each $show-breakpoint in $show-breakpoints {\n            $width: mq-get-breakpoint-width($show-breakpoint, $breakpoints);\n            @include mq($show-breakpoint, $breakpoints: $breakpoints) {\n                content: \"#{$show-breakpoint} ≥ #{$width} (#{mq-px2em($width)})\";\n            }\n        }\n    }\n}\n\n@if length($mq-show-breakpoints) > 0 {\n    @include mq-show-breakpoints;\n}\n"]}
