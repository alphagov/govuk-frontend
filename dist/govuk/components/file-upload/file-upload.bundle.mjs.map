{"version":3,"file":"file-upload.bundle.mjs","sources":["../../../../src/govuk/common/closest-attribute-value.mjs","../../../../src/govuk/common/index.mjs","../../../../src/govuk/errors/index.mjs","../../../../src/govuk/component.mjs","../../../../src/govuk/common/configuration.mjs","../../../../src/govuk/i18n.mjs","../../../../src/govuk/components/file-upload/file-upload.mjs"],"sourcesContent":["/**\n * Returns the value of the given attribute closest to the given element (including itself)\n *\n * @internal\n * @param {Element} $element - The element to start walking the DOM tree up\n * @param {string} attributeName - The name of the attribute\n * @returns {string | null} Attribute value\n */\nexport function closestAttributeValue($element, attributeName) {\n  const $closestElementWithAttribute = $element.closest(`[${attributeName}]`)\n  return $closestElementWithAttribute\n    ? $closestElementWithAttribute.getAttribute(attributeName)\n    : null\n}\n","/**\n * Common helpers which do not require polyfill.\n *\n * IMPORTANT: If a helper require a polyfill, please isolate it in its own module\n * so that the polyfill can be properly tree-shaken and does not burden\n * the components that do not need that helper\n */\n\n/**\n * Get GOV.UK Frontend breakpoint value from CSS custom property\n *\n * @private\n * @param {string} name - Breakpoint name\n * @returns {{ property: string, value?: string }} Breakpoint object\n */\nexport function getBreakpoint(name) {\n  const property = `--govuk-breakpoint-${name}`\n\n  // Get value from `<html>` with breakpoints on CSS :root\n  const value = window\n    .getComputedStyle(document.documentElement)\n    .getPropertyValue(property)\n\n  return {\n    property,\n    value: value || undefined\n  }\n}\n\n/**\n * Move focus to element\n *\n * Sets tabindex to -1 to make the element programmatically focusable,\n * but removes it on blur as the element doesn't need to be focused again.\n *\n * @private\n * @template {HTMLElement} FocusElement\n * @param {FocusElement} $element - HTML element\n * @param {object} [options] - Handler options\n * @param {function(this: FocusElement): void} [options.onBeforeFocus] - Callback before focus\n * @param {function(this: FocusElement): void} [options.onBlur] - Callback on blur\n */\nexport function setFocus($element, options = {}) {\n  const isFocusable = $element.getAttribute('tabindex')\n\n  if (!isFocusable) {\n    $element.setAttribute('tabindex', '-1')\n  }\n\n  /**\n   * Handle element focus\n   */\n  function onFocus() {\n    $element.addEventListener('blur', onBlur, { once: true })\n  }\n\n  /**\n   * Handle element blur\n   */\n  function onBlur() {\n    options.onBlur?.call($element)\n\n    if (!isFocusable) {\n      $element.removeAttribute('tabindex')\n    }\n  }\n\n  // Add listener to reset element on blur, after focus\n  $element.addEventListener('focus', onFocus, { once: true })\n\n  // Focus element\n  options.onBeforeFocus?.call($element)\n  $element.focus()\n}\n\n/**\n * Checks if component is already initialised\n *\n * @internal\n * @param {Element} $root - HTML element to be checked\n * @param {string} moduleName - name of component module\n * @returns {boolean} Whether component is already initialised\n */\nexport function isInitialised($root, moduleName) {\n  return (\n    $root instanceof HTMLElement &&\n    $root.hasAttribute(`data-${moduleName}-init`)\n  )\n}\n\n/**\n * Checks if GOV.UK Frontend is supported on this page\n *\n * Some browsers will load and run our JavaScript but GOV.UK Frontend\n * won't be supported.\n *\n * @param {HTMLElement | null} [$scope] - (internal) `<body>` HTML element checked for browser support\n * @returns {boolean} Whether GOV.UK Frontend is supported on this page\n */\nexport function isSupported($scope = document.body) {\n  if (!$scope) {\n    return false\n  }\n\n  return $scope.classList.contains('govuk-frontend-supported')\n}\n\n/**\n * Check for an array\n *\n * @internal\n * @param {unknown} option - Option to check\n * @returns {boolean} Whether the option is an array\n */\nfunction isArray(option) {\n  return Array.isArray(option)\n}\n\n/**\n * Check for an object\n *\n * @internal\n * @template {Partial<Record<keyof ObjectType, unknown>>} ObjectType\n * @param {unknown | ObjectType} option - Option to check\n * @returns {option is ObjectType} Whether the option is an object\n */\nexport function isObject(option) {\n  return !!option && typeof option === 'object' && !isArray(option)\n}\n\n/**\n * Check for valid scope\n *\n * @internal\n * @template {Element | Document} ScopeType\n * @param {unknown | ScopeType} $scope - Scope of the document to search within\n * @returns {$scope is ScopeType} Whether the scope can be queried\n */\nexport function isScope($scope) {\n  return !!$scope && ($scope instanceof Element || $scope instanceof Document)\n}\n\n/**\n * Format error message\n *\n * @internal\n * @param {ComponentWithModuleName} Component - Component that threw the error\n * @param {string} message - Error message\n * @returns {string} - Formatted error message\n */\nexport function formatErrorMessage(Component, message) {\n  return `${Component.moduleName}: ${message}`\n}\n\n/* eslint-disable jsdoc/valid-types --\n * `{new(...args: any[] ): object}` is not recognised as valid\n * https://github.com/gajus/eslint-plugin-jsdoc/issues/145#issuecomment-1308722878\n * https://github.com/jsdoc-type-pratt-parser/jsdoc-type-pratt-parser/issues/131\n **/\n\n/**\n * @typedef ComponentWithModuleName\n * @property {string} moduleName - Name of the component\n */\n\n/* eslint-enable jsdoc/valid-types */\n","import { formatErrorMessage, isObject } from '../common/index.mjs'\n\n/**\n * GOV.UK Frontend error\n *\n * A base class for `Error`s thrown by GOV.UK Frontend.\n *\n * It is meant to be extended into specific types of errors\n * to be thrown by our code.\n *\n * @example\n * ```js\n * class MissingRootError extends GOVUKFrontendError {\n *   // Setting an explicit name is important as extending the class will not\n *   // set a new `name` on the subclass. The `name` property is important\n *   // to ensure intelligible error names even if the class name gets\n *   // mangled by a minifier\n *   name = \"MissingRootError\"\n * }\n * ```\n * @virtual\n */\nexport class GOVUKFrontendError extends Error {\n  name = 'GOVUKFrontendError'\n}\n\n/**\n * Indicates that GOV.UK Frontend is not supported\n */\nexport class SupportError extends GOVUKFrontendError {\n  name = 'SupportError'\n\n  /**\n   * Checks if GOV.UK Frontend is supported on this page\n   *\n   * @param {HTMLElement | null} [$scope] - HTML element `<body>` checked for browser support\n   */\n  constructor($scope = document.body) {\n    const supportMessage =\n      'noModule' in HTMLScriptElement.prototype\n        ? 'GOV.UK Frontend initialised without `<body class=\"govuk-frontend-supported\">` from template `<script>` snippet'\n        : 'GOV.UK Frontend is not supported in this browser'\n\n    super(\n      $scope\n        ? supportMessage\n        : 'GOV.UK Frontend initialised without `<script type=\"module\">`'\n    )\n  }\n}\n\n/**\n * Indicates that a component has received an illegal configuration\n */\nexport class ConfigError extends GOVUKFrontendError {\n  name = 'ConfigError'\n}\n\n/**\n * Indicates an issue with an element (possibly `null` or `undefined`)\n */\nexport class ElementError extends GOVUKFrontendError {\n  name = 'ElementError'\n\n  /**\n   * @internal\n   * @overload\n   * @param {string} message - Element error message\n   */\n\n  /**\n   * @internal\n   * @overload\n   * @param {ElementErrorOptions} options - Element error options\n   */\n\n  /**\n   * @internal\n   * @param {string | ElementErrorOptions} messageOrOptions - Element error message or options\n   */\n  constructor(messageOrOptions) {\n    let message = typeof messageOrOptions === 'string' ? messageOrOptions : ''\n\n    // Build message from options\n    if (isObject(messageOrOptions)) {\n      const { component, identifier, element, expectedType } = messageOrOptions\n\n      message = identifier\n\n      // Append reason\n      message += element\n        ? ` is not of type ${expectedType ?? 'HTMLElement'}`\n        : ' not found'\n\n      // Prepend with module name (optional)\n      if (component) {\n        message = formatErrorMessage(component, message)\n      }\n    }\n\n    super(message)\n  }\n}\n\n/**\n * Indicates that a component is already initialised\n */\nexport class InitError extends GOVUKFrontendError {\n  name = 'InitError'\n\n  /**\n   * @internal\n   * @param {ComponentWithModuleName | string} componentOrMessage - name of the component module\n   */\n  constructor(componentOrMessage) {\n    const message =\n      typeof componentOrMessage === 'string'\n        ? componentOrMessage\n        : formatErrorMessage(\n            componentOrMessage,\n            `Root element (\\`$root\\`) already initialised`\n          )\n\n    super(message)\n  }\n}\n\n/**\n * Element error options\n *\n * @internal\n * @typedef {object} ElementErrorOptions\n * @property {Element | Document | null} [element] - The element in error (optional)\n * @property {ComponentWithModuleName} [component] - Component throwing the error (optional)\n * @property {string} identifier - An identifier that'll let the user understand which element has an error. This is whatever makes the most sense\n * @property {string} [expectedType] - The type that was expected for the identifier (optional)\n */\n\n/**\n * @import { ComponentWithModuleName } from '../common/index.mjs'\n */\n","import { isInitialised, isSupported } from './common/index.mjs'\nimport { ElementError, InitError, SupportError } from './errors/index.mjs'\n\n/**\n * Base Component class\n *\n * Centralises the behaviours shared by our components\n *\n * @virtual\n * @template {Element} [RootElementType=HTMLElement]\n */\nexport class Component {\n  /**\n   * @type {typeof Element}\n   */\n  static elementType = HTMLElement\n\n  // allows Typescript user to work around the lack of types\n  // in GOVUKFrontend package, Typescript is not aware of $root\n  // in components that extend GOVUKFrontendComponent\n  /**\n   * Returns the root element of the component\n   *\n   * @protected\n   * @returns {RootElementType} - the root element of component\n   */\n  get $root() {\n    return this._$root\n  }\n\n  /**\n   * @protected\n   * @type {RootElementType}\n   */\n  _$root\n\n  /**\n   * Constructs a new component, validating that GOV.UK Frontend is supported\n   *\n   * @internal\n   * @param {Element | null} [$root] - HTML element to use for component\n   */\n  constructor($root) {\n    const childConstructor = /** @type {ChildClassConstructor} */ (\n      this.constructor\n    )\n\n    // TypeScript does not enforce that inheriting classes will define a `moduleName`\n    // (even if we add a `@virtual` `static moduleName` property to this class).\n    // While we trust users to do this correctly, we do a little check to provide them\n    // a helpful error message.\n    //\n    // After this, we'll be sure that `childConstructor` has a `moduleName`\n    // as expected of the `ChildClassConstructor` we've cast `this.constructor` to.\n    if (typeof childConstructor.moduleName !== 'string') {\n      throw new InitError(`\\`moduleName\\` not defined in component`)\n    }\n\n    if (!($root instanceof childConstructor.elementType)) {\n      throw new ElementError({\n        element: $root,\n        component: childConstructor,\n        identifier: 'Root element (`$root`)',\n        expectedType: childConstructor.elementType.name\n      })\n    } else {\n      this._$root = /** @type {RootElementType} */ ($root)\n    }\n\n    childConstructor.checkSupport()\n\n    this.checkInitialised()\n\n    const moduleName = childConstructor.moduleName\n\n    this.$root.setAttribute(`data-${moduleName}-init`, '')\n  }\n\n  /**\n   * Validates whether component is already initialised\n   *\n   * @private\n   * @throws {InitError} when component is already initialised\n   */\n  checkInitialised() {\n    const constructor = /** @type {ChildClassConstructor} */ (this.constructor)\n    const moduleName = constructor.moduleName\n\n    if (moduleName && isInitialised(this.$root, moduleName)) {\n      throw new InitError(constructor)\n    }\n  }\n\n  /**\n   * Validates whether components are supported\n   *\n   * @throws {SupportError} when the components are not supported\n   */\n  static checkSupport() {\n    if (!isSupported()) {\n      throw new SupportError()\n    }\n  }\n}\n\n/**\n * @typedef ChildClass\n * @property {string} moduleName - The module name that'll be looked for in the DOM when initialising the component\n */\n\n/**\n * @typedef {typeof Component & ChildClass} ChildClassConstructor\n */\n","import { Component } from '../component.mjs'\nimport { ConfigError } from '../errors/index.mjs'\n\nimport { isObject, isScope, formatErrorMessage } from './index.mjs'\n\nexport const configOverride = Symbol.for('configOverride')\n\n/**\n * Base Component class\n *\n * Centralises the behaviours shared by our components\n *\n * @virtual\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} [ConfigurationType=ObjectNested]\n * @template {Element & { dataset: DOMStringMap }} [RootElementType=HTMLElement]\n * @augments Component<RootElementType>\n */\nexport class ConfigurableComponent extends Component {\n  /**\n   * configOverride\n   *\n   * Function which defines configuration overrides to prioritize\n   * properties from the root element's dataset.\n   *\n   * It should take a subset of configuration as input and return\n   * a new configuration object with properties that should be\n   * overridden based on the root element's dataset. A Symbol\n   * is used for indexing to prevent conflicts.\n   *\n   * @internal\n   * @virtual\n   * @param {Partial<ConfigurationType>} [param] - Configuration object\n   * @returns {Partial<ConfigurationType>} return - Configuration object\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  [configOverride](param) {\n    return {}\n  }\n\n  /**\n   * Returns the root element of the component\n   *\n   * @protected\n   * @returns {ConfigurationType} - the root element of component\n   */\n  get config() {\n    return this._config\n  }\n\n  /**\n   *\n   * @type {ConfigurationType}\n   */\n  _config\n\n  /**\n   * Constructs a new component, validating that GOV.UK Frontend is supported\n   *\n   * @internal\n   * @param {Element | null} [$root] - HTML element to use for component\n   * @param {ConfigurationType} [config] - HTML element to use for component\n   */\n  constructor($root, config) {\n    super($root)\n\n    const childConstructor =\n      /** @type {ChildClassConstructor<ConfigurationType>} */ (this.constructor)\n\n    if (!isObject(childConstructor.defaults)) {\n      throw new ConfigError(\n        formatErrorMessage(\n          childConstructor,\n          'Config passed as parameter into constructor but no defaults defined'\n        )\n      )\n    }\n\n    const datasetConfig = /** @type {ConfigurationType} */ (\n      normaliseDataset(childConstructor, this._$root.dataset)\n    )\n\n    this._config = /** @type {ConfigurationType} */ (\n      mergeConfigs(\n        childConstructor.defaults,\n        config ?? {},\n        this[configOverride](datasetConfig),\n        datasetConfig\n      )\n    )\n  }\n}\n\n/**\n * Normalise string\n *\n * 'If it looks like a duck, and it quacks like a duck…' 🦆\n *\n * If the passed value looks like a boolean or a number, convert it to a boolean\n * or number.\n *\n * Designed to be used to convert config passed via data attributes (which are\n * always strings) into something sensible.\n *\n * @internal\n * @param {DOMStringMap[string]} value - The value to normalise\n * @param {SchemaProperty} [property] - Component schema property\n * @returns {string | boolean | number | undefined} Normalised data\n */\nexport function normaliseString(value, property) {\n  const trimmedValue = value ? value.trim() : ''\n\n  let output\n  let outputType = property?.type\n\n  // No schema type set? Determine automatically\n  if (!outputType) {\n    if (['true', 'false'].includes(trimmedValue)) {\n      outputType = 'boolean'\n    }\n\n    // Empty / whitespace-only strings are considered finite so we need to check\n    // the length of the trimmed string as well\n    if (trimmedValue.length > 0 && isFinite(Number(trimmedValue))) {\n      outputType = 'number'\n    }\n  }\n\n  switch (outputType) {\n    case 'boolean':\n      output = trimmedValue === 'true'\n      break\n\n    case 'number':\n      output = Number(trimmedValue)\n      break\n\n    default:\n      output = value\n  }\n\n  return output\n}\n\n/**\n * Normalise dataset\n *\n * Loop over an object and normalise each value using {@link normaliseString},\n * optionally expanding nested `i18n.field`\n *\n * @internal\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} ConfigurationType\n * @template {[keyof ConfigurationType, SchemaProperty | undefined][]} SchemaEntryType\n * @param {{ schema?: Schema<ConfigurationType>, moduleName: string }} Component - Component class\n * @param {DOMStringMap} dataset - HTML element dataset\n * @returns {ObjectNested} Normalised dataset\n */\nexport function normaliseDataset(Component, dataset) {\n  if (!isObject(Component.schema)) {\n    throw new ConfigError(\n      formatErrorMessage(\n        Component,\n        'Config passed as parameter into constructor but no schema defined'\n      )\n    )\n  }\n\n  const out = /** @type {ObjectNested} */ ({})\n  const entries = /** @type {SchemaEntryType} */ (\n    Object.entries(Component.schema.properties)\n  )\n\n  // Normalise top-level dataset ('data-*') values using schema types\n  for (const entry of entries) {\n    const [namespace, property] = entry\n\n    // Cast the `namespace` to string so it can be used to access the dataset\n    const field = namespace.toString()\n\n    if (field in dataset) {\n      out[field] = normaliseString(dataset[field], property)\n    }\n\n    /**\n     * Extract and normalise nested object values automatically using\n     * {@link normaliseString} but only schema object types are allowed\n     */\n    if (property?.type === 'object') {\n      out[field] = extractConfigByNamespace(\n        Component.schema,\n        dataset,\n        namespace\n      )\n    }\n  }\n\n  return out\n}\n\n/**\n * Normalise options passed to `initAll` or `createAll`\n *\n * @internal\n * @template {CompatibleClass} ComponentClass\n * @param {Config | CreateAllOptions<ComponentClass> | OnErrorCallback<ComponentClass> | Element | Document | null} [scopeOrOptions] - Scope of the document to search within, initialisation options or error callback function\n * @returns {CreateAllOptions<ComponentClass>} Normalised options\n */\nexport function normaliseOptions(scopeOrOptions) {\n  let /** @type {Element | Document | null} */ $scope = document\n  let /** @type {OnErrorCallback<ComponentClass> | undefined} */ onError\n\n  // Handle options object\n  if (isObject(scopeOrOptions)) {\n    const options = scopeOrOptions\n\n    // Scope must be valid or null\n    if (isScope(options.scope) || options.scope === null) {\n      $scope = options.scope\n    }\n\n    // Error handler must be a function\n    if (typeof options.onError === 'function') {\n      onError = options.onError\n    }\n  }\n\n  if (isScope(scopeOrOptions)) {\n    $scope = scopeOrOptions\n  } else if (scopeOrOptions === null) {\n    $scope = null\n  } else if (typeof scopeOrOptions === 'function') {\n    onError = scopeOrOptions\n  }\n\n  return {\n    scope: $scope,\n    onError\n  }\n}\n\n/**\n * Config merging function\n *\n * Takes any number of objects and combines them together, with\n * greatest priority on the LAST item passed in.\n *\n * @internal\n * @param {...{ [key: string]: unknown }} configObjects - Config objects to merge\n * @returns {{ [key: string]: unknown }} A merged config object\n */\nexport function mergeConfigs(...configObjects) {\n  // Start with an empty object as our base\n  /** @type {{ [key: string]: unknown }} */\n  const formattedConfigObject = {}\n\n  // Loop through each of the passed objects\n  for (const configObject of configObjects) {\n    for (const key of Object.keys(configObject)) {\n      const option = formattedConfigObject[key]\n      const override = configObject[key]\n\n      // Push their keys one-by-one into formattedConfigObject. Any duplicate\n      // keys with object values will be merged, otherwise the new value will\n      // override the existing value.\n      if (isObject(option) && isObject(override)) {\n        formattedConfigObject[key] = mergeConfigs(option, override)\n      } else {\n        // Apply override\n        formattedConfigObject[key] = override\n      }\n    }\n  }\n\n  return formattedConfigObject\n}\n\n/**\n * Validate component config by schema\n *\n * Follows limited examples in JSON schema for wider support in future\n *\n * {@link https://ajv.js.org/json-schema.html#compound-keywords}\n * {@link https://ajv.js.org/packages/ajv-errors.html#single-message}\n *\n * @internal\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} ConfigurationType\n * @param {Schema<ConfigurationType>} schema - The schema of a component\n * @param {ConfigurationType} config - Component config\n * @returns {string[]} List of validation errors\n */\nexport function validateConfig(schema, config) {\n  const validationErrors = []\n\n  // Check errors for each schema\n  for (const [name, conditions] of Object.entries(schema)) {\n    const errors = []\n\n    // Check errors for each schema condition\n    if (Array.isArray(conditions)) {\n      for (const { required, errorMessage } of conditions) {\n        if (!required.every((key) => !!config[key])) {\n          errors.push(errorMessage) // Missing config key value\n        }\n      }\n\n      // Check one condition passes or add errors\n      if (name === 'anyOf' && !(conditions.length - errors.length >= 1)) {\n        validationErrors.push(...errors)\n      }\n    }\n  }\n\n  return validationErrors\n}\n\n/**\n * Extracts keys starting with a particular namespace from dataset ('data-*')\n * object, removing the namespace in the process, normalising all values\n *\n * @internal\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} ConfigurationType\n * @param {Schema<ConfigurationType>} schema - The schema of a component\n * @param {DOMStringMap} dataset - The object to extract key-value pairs from\n * @param {keyof ConfigurationType} namespace - The namespace to filter keys with\n * @returns {ObjectNested | undefined} Nested object with dot-separated key namespace removed\n */\nexport function extractConfigByNamespace(schema, dataset, namespace) {\n  const property = schema.properties[namespace]\n\n  // Only extract configs for object schema properties\n  if (property?.type !== 'object') {\n    return\n  }\n\n  // Add default empty config\n  const newObject = /** @type {Record<typeof namespace, ObjectNested>} */ ({\n    [namespace]: {}\n  })\n\n  for (const [key, value] of Object.entries(dataset)) {\n    /** @type {ObjectNested | ObjectNested[NestedKey]} */\n    let current = newObject\n\n    // Split the key into parts, using . as our namespace separator\n    const keyParts = key.split('.')\n\n    /**\n     * Create new level per part\n     *\n     * e.g. 'i18n.textareaDescription.other' becomes\n     * `{ i18n: { textareaDescription: { other } } }`\n     */\n    for (const [index, name] of keyParts.entries()) {\n      if (isObject(current)) {\n        // Drop down to nested object until the last part\n        if (index < keyParts.length - 1) {\n          // New nested object (optionally) replaces existing value\n          if (!isObject(current[name])) {\n            current[name] = {}\n          }\n\n          // Drop down into new or existing nested object\n          current = current[name]\n        } else if (key !== namespace) {\n          // Normalised value (optionally) replaces existing value\n          current[name] = normaliseString(value)\n        }\n      }\n    }\n  }\n\n  return newObject[namespace]\n}\n\n/**\n * @internal\n * @typedef {keyof ObjectNested} NestedKey\n * @typedef {{ [key: string]: string | boolean | number | ObjectNested | undefined }} ObjectNested\n */\n\n/**\n * Schema for component config\n *\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} ConfigurationType\n * @typedef {object} Schema\n * @property {Record<keyof ConfigurationType, SchemaProperty | undefined>} properties - Schema properties\n * @property {SchemaCondition<ConfigurationType>[]} [anyOf] - List of schema conditions\n */\n\n/**\n * Schema property for component config\n *\n * @typedef {object} SchemaProperty\n * @property {'string' | 'boolean' | 'number' | 'object'} type - Property type\n */\n\n/**\n * Schema condition for component config\n *\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} ConfigurationType\n * @typedef {object} SchemaCondition\n * @property {(keyof ConfigurationType)[]} required - List of required config fields\n * @property {string} errorMessage - Error message when required config fields not provided\n */\n\n/**\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} [ConfigurationType=ObjectNested]\n * @typedef ChildClass\n * @property {string} moduleName - The module name that'll be looked for in the DOM when initialising the component\n * @property {Schema<ConfigurationType>} [schema] - The schema of the component configuration\n * @property {ConfigurationType} [defaults] - The default values of the configuration of the component\n */\n\n/**\n * @template {Partial<Record<keyof ConfigurationType, unknown>>} [ConfigurationType=ObjectNested]\n * @typedef {typeof Component & ChildClass<ConfigurationType>} ChildClassConstructor<ConfigurationType>\n */\n\n/**\n * @import { CompatibleClass, Config, CreateAllOptions, OnErrorCallback } from '../init.mjs'\n */\n","import { isObject } from './common/index.mjs'\n\n/**\n * Internal support for selecting messages to render, with placeholder\n * interpolation and locale-aware number formatting and pluralisation\n *\n * @internal\n */\nexport class I18n {\n  translations\n  locale\n\n  /**\n   * @internal\n   * @param {{ [key: string]: string | TranslationPluralForms }} translations - Key-value pairs of the translation strings to use.\n   * @param {object} [config] - Configuration options for the function.\n   * @param {string | null} [config.locale] - An overriding locale for the PluralRules functionality.\n   */\n  constructor(translations = {}, config = {}) {\n    // Make list of translations available throughout function\n    this.translations = translations\n\n    // The locale to use for PluralRules and NumberFormat\n    this.locale = config.locale ?? (document.documentElement.lang || 'en')\n  }\n\n  /**\n   * The most used function - takes the key for a given piece of UI text and\n   * returns the appropriate string.\n   *\n   * @internal\n   * @param {string} lookupKey - The lookup key of the string to use.\n   * @param {{ [key: string]: unknown }} [options] - Any options passed with the translation string, e.g: for string interpolation.\n   * @returns {string} The appropriate translation string.\n   * @throws {Error} Lookup key required\n   * @throws {Error} Options required for `${}` placeholders\n   */\n  t(lookupKey, options) {\n    if (!lookupKey) {\n      // Print a console error if no lookup key has been provided\n      throw new Error('i18n: lookup key missing')\n    }\n\n    // Fetch the translation for that lookup key\n    let translation = this.translations[lookupKey]\n\n    // If the `count` option is set, determine which plural suffix is needed and\n    // change the lookupKey to match. We check to see if it's numeric instead of\n    // falsy, as this could legitimately be 0.\n    if (typeof options?.count === 'number' && isObject(translation)) {\n      const translationPluralForm =\n        translation[this.getPluralSuffix(lookupKey, options.count)]\n\n      // Update translation with plural suffix\n      if (translationPluralForm) {\n        translation = translationPluralForm\n      }\n    }\n\n    if (typeof translation === 'string') {\n      // Check for ${} placeholders in the translation string\n      // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec\n      if (translation.match(/%{(.\\S+)}/)) {\n        if (!options) {\n          throw new Error(\n            'i18n: cannot replace placeholders in string if no option data provided'\n          )\n        }\n\n        return this.replacePlaceholders(translation, options)\n      }\n\n      return translation\n    }\n\n    // If the key wasn't found in our translations object,\n    // return the lookup key itself as the fallback\n    return lookupKey\n  }\n\n  /**\n   * Takes a translation string with placeholders, and replaces the placeholders\n   * with the provided data\n   *\n   * @internal\n   * @param {string} translationString - The translation string\n   * @param {{ [key: string]: unknown }} options - Any options passed with the translation string, e.g: for string interpolation.\n   * @returns {string} The translation string to output, with $\\{\\} placeholders replaced\n   */\n  replacePlaceholders(translationString, options) {\n    const formatter = Intl.NumberFormat.supportedLocalesOf(this.locale).length\n      ? new Intl.NumberFormat(this.locale)\n      : undefined\n\n    return translationString.replace(\n      /%{(.\\S+)}/g,\n\n      /**\n       * Replace translation string placeholders\n       *\n       * @internal\n       * @param {string} placeholderWithBraces - Placeholder with braces\n       * @param {string} placeholderKey - Placeholder key\n       * @returns {string} Placeholder value\n       */\n      function (placeholderWithBraces, placeholderKey) {\n        if (Object.prototype.hasOwnProperty.call(options, placeholderKey)) {\n          const placeholderValue = options[placeholderKey]\n\n          // If a user has passed `false` as the value for the placeholder\n          // treat it as though the value should not be displayed\n          if (\n            placeholderValue === false ||\n            (typeof placeholderValue !== 'number' &&\n              typeof placeholderValue !== 'string')\n          ) {\n            return ''\n          }\n\n          // If the placeholder's value is a number, localise the number formatting\n          if (typeof placeholderValue === 'number') {\n            return formatter\n              ? formatter.format(placeholderValue)\n              : `${placeholderValue}`\n          }\n\n          return placeholderValue\n        }\n\n        throw new Error(\n          `i18n: no data found to replace ${placeholderWithBraces} placeholder in string`\n        )\n      }\n    )\n  }\n\n  /**\n   * Check to see if the browser supports Intl.PluralRules\n   *\n   * It requires all conditions to be met in order to be supported:\n   * - The implementation of Intl supports PluralRules (NOT true in Safari 10–12)\n   * - The browser/OS has plural rules for the current locale (browser dependent)\n   *\n   * {@link https://browsersl.ist/#q=supports+es6-module+and+not+supports+intl-pluralrules}\n   *\n   * @internal\n   * @returns {boolean} Returns true if all conditions are met. Returns false otherwise.\n   */\n  hasIntlPluralRulesSupport() {\n    return Boolean(\n      'PluralRules' in window.Intl &&\n        Intl.PluralRules.supportedLocalesOf(this.locale).length\n    )\n  }\n\n  /**\n   * Get the appropriate suffix for the plural form.\n   *\n   * Uses Intl.PluralRules (or our own fallback implementation) to get the\n   * 'preferred' form to use for the given count.\n   *\n   * Checks that a translation has been provided for that plural form – if it\n   * hasn't, it'll fall back to the 'other' plural form (unless that doesn't exist\n   * either, in which case an error will be thrown)\n   *\n   * @internal\n   * @param {string} lookupKey - The lookup key of the string to use.\n   * @param {number} count - Number used to determine which pluralisation to use.\n   * @returns {PluralRule} The suffix associated with the correct pluralisation for this locale.\n   * @throws {Error} Plural form `.other` required when preferred plural form is missing\n   */\n  getPluralSuffix(lookupKey, count) {\n    // Validate that the number is actually a number.\n    //\n    // Number(count) will turn anything that can't be converted to a Number type\n    // into 'NaN'. isFinite filters out NaN, as it isn't a finite number.\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-conversion\n    count = Number(count)\n    if (!isFinite(count)) {\n      return 'other'\n    }\n\n    // Fetch the translation for that lookup key\n    const translation = this.translations[lookupKey]\n\n    // Check to verify that all the requirements for Intl.PluralRules are met.\n    // If so, we can use that instead of our custom implementation. Otherwise,\n    // use the hardcoded fallback.\n    const preferredForm = this.hasIntlPluralRulesSupport()\n      ? new Intl.PluralRules(this.locale).select(count)\n      : 'other'\n\n    // Use the correct plural form if provided\n    if (isObject(translation)) {\n      if (preferredForm in translation) {\n        return preferredForm\n        // Fall back to `other` if the plural form is missing, but log a warning\n        // to the console\n      } else if ('other' in translation) {\n        console.warn(\n          `i18n: Missing plural form \".${preferredForm}\" for \"${this.locale}\" locale. Falling back to \".other\".`\n        )\n\n        return 'other'\n      }\n    }\n\n    // If the required `other` plural form is missing, all we can do is error\n    throw new Error(\n      `i18n: Plural form \".other\" is required for \"${this.locale}\" locale`\n    )\n  }\n}\n\n/**\n * Plural rule category mnemonic tags\n *\n * @internal\n * @typedef {'zero' | 'one' | 'two' | 'few' | 'many' | 'other'} PluralRule\n */\n\n/**\n * Translated message by plural rule they correspond to.\n *\n * Allows to group pluralised messages under a single key when passing\n * translations to a component's constructor\n *\n * @internal\n * @typedef {object} TranslationPluralForms\n * @property {string} [other] - General plural form\n * @property {string} [zero] - Plural form used with 0\n * @property {string} [one] - Plural form used with 1\n * @property {string} [two] - Plural form used with 2\n * @property {string} [few] - Plural form used for a few\n * @property {string} [many] - Plural form used for many\n */\n","import { closestAttributeValue } from '../../common/closest-attribute-value.mjs'\nimport { ConfigurableComponent } from '../../common/configuration.mjs'\nimport { formatErrorMessage } from '../../common/index.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { I18n } from '../../i18n.mjs'\n\n/**\n * File upload component\n *\n * @preserve\n * @augments ConfigurableComponent<FileUploadConfig>\n */\nexport class FileUpload extends ConfigurableComponent {\n  /**\n   * @private\n   * @type {HTMLFileInputElement}\n   */\n  $input\n\n  /**\n   * @private\n   */\n  $button\n\n  /**\n   * @private\n   */\n  $status\n\n  /** @private */\n  i18n\n\n  /** @private */\n  id\n\n  /** @private */\n  $announcements\n\n  /**\n   * @private\n   * @type {boolean | undefined}\n   */\n  enteredAnotherElement\n\n  /**\n   * @param {Element | null} $root - File input element\n   * @param {FileUploadConfig} [config] - File Upload config\n   */\n  constructor($root, config = {}) {\n    super($root, config)\n\n    const $input = this.$root.querySelector('input')\n\n    if ($input === null) {\n      throw new ElementError({\n        component: FileUpload,\n        identifier: 'File inputs (`<input type=\"file\">`)'\n      })\n    }\n\n    if ($input.type !== 'file') {\n      throw new ElementError(\n        formatErrorMessage(\n          FileUpload,\n          'File input (`<input type=\"file\">`) attribute (`type`) is not `file`'\n        )\n      )\n    }\n\n    this.$input = /** @type {HTMLFileInputElement} */ ($input)\n\n    if (!this.$input.id) {\n      throw new ElementError({\n        component: FileUpload,\n        identifier: 'File input (`<input type=\"file\">`) attribute (`id`)'\n      })\n    }\n\n    this.id = this.$input.id\n\n    this.i18n = new I18n(this.config.i18n, {\n      // Read the fallback if necessary rather than have it set in the defaults\n      locale: closestAttributeValue(this.$root, 'lang')\n    })\n\n    const $label = this.findLabel()\n    // Add an ID to the label if it doesn't have one already\n    // so it can be referenced by `aria-labelledby`\n    if (!$label.id) {\n      $label.id = `${this.id}-label`\n    }\n\n    // we need to copy the 'id' of the root element\n    // to the new button replacement element\n    // so that focus will work in the error summary\n    this.$input.id = `${this.id}-input`\n\n    // Hide the native input\n    this.$input.setAttribute('hidden', 'true')\n\n    // Create the file selection button\n    const $button = document.createElement('button')\n    $button.classList.add('govuk-file-upload-button')\n    $button.type = 'button'\n    $button.id = this.id\n    $button.classList.add('govuk-file-upload-button--empty')\n\n    // Copy `aria-describedby` if present so hints and errors\n    // are associated to the `<button>`\n    const ariaDescribedBy = this.$input.getAttribute('aria-describedby')\n    if (ariaDescribedBy) {\n      $button.setAttribute('aria-describedby', ariaDescribedBy)\n    }\n\n    // Create status element that shows what/how many files are selected\n    const $status = document.createElement('span')\n    $status.className = 'govuk-body govuk-file-upload-button__status'\n    $status.setAttribute('aria-live', 'polite')\n    $status.innerText = this.i18n.t('noFileChosen')\n\n    $button.appendChild($status)\n\n    const commaSpan = document.createElement('span')\n    commaSpan.className = 'govuk-visually-hidden'\n    commaSpan.innerText = ', '\n    commaSpan.id = `${this.id}-comma`\n\n    $button.appendChild(commaSpan)\n\n    const containerSpan = document.createElement('span')\n    containerSpan.className =\n      'govuk-file-upload-button__pseudo-button-container'\n\n    const buttonSpan = document.createElement('span')\n    buttonSpan.className =\n      'govuk-button govuk-button--secondary govuk-file-upload-button__pseudo-button'\n    buttonSpan.innerText = this.i18n.t('chooseFilesButton')\n\n    containerSpan.appendChild(buttonSpan)\n\n    // Add a space so the button and instruction read correctly\n    // when CSS is disabled\n    containerSpan.insertAdjacentText('beforeend', ' ')\n\n    const instructionSpan = document.createElement('span')\n    instructionSpan.className =\n      'govuk-body govuk-file-upload-button__instruction'\n    instructionSpan.innerText = this.i18n.t('dropInstruction')\n\n    containerSpan.appendChild(instructionSpan)\n\n    $button.appendChild(containerSpan)\n    $button.setAttribute(\n      'aria-labelledby',\n      `${$label.id} ${commaSpan.id} ${$button.id}`\n    )\n    $button.addEventListener('click', this.onClick.bind(this))\n    $button.addEventListener('dragover', (event) => {\n      // prevent default to allow drop\n      event.preventDefault()\n    })\n\n    // Assemble these all together\n    this.$root.insertAdjacentElement('afterbegin', $button)\n\n    this.$input.setAttribute('tabindex', '-1')\n    this.$input.setAttribute('aria-hidden', 'true')\n\n    // Make all these new variables available to the module\n    this.$button = $button\n    this.$status = $status\n\n    // Bind change event to the underlying input\n    this.$input.addEventListener('change', this.onChange.bind(this))\n\n    // Synchronise the `disabled` state between the button and underlying input\n    this.updateDisabledState()\n    this.observeDisabledState()\n\n    // Handle drop zone visibility\n    // A live region to announce when users enter or leave the drop zone\n    this.$announcements = document.createElement('span')\n    this.$announcements.classList.add('govuk-file-upload-announcements')\n    this.$announcements.classList.add('govuk-visually-hidden')\n    this.$announcements.setAttribute('aria-live', 'assertive')\n    this.$root.insertAdjacentElement('afterend', this.$announcements)\n\n    // if there is no CSS and input is hidden\n    // button will need to handle drop event\n    this.$button.addEventListener('drop', this.onDrop.bind(this))\n\n    // While user is dragging, it gets a little more complex because of Safari.\n    // Safari doesn't fill `relatedTarget` on `dragleave` (nor `dragenter`).\n    // This means we can't use `relatedTarget` to:\n    // - check if the user is still within the wrapper\n    //   (`relatedTarget` being a descendant of the wrapper)\n    // - check if the user is still over the viewport\n    //   (`relatedTarget` being null if outside)\n\n    // Thanks to `dragenter` bubbling, we can listen on the `document` with a\n    // single function and update the visibility based on whether we entered a\n    // node inside or outside the wrapper.\n    document.addEventListener(\n      'dragenter',\n      this.updateDropzoneVisibility.bind(this)\n    )\n\n    // To detect if we're outside the document, we can track if there was a\n    // `dragenter` event preceding a `dragleave`. If there wasn't, this means\n    // we're outside the document.\n    //\n    // The order of events is guaranteed by the HTML specs:\n    // https://html.spec.whatwg.org/multipage/dnd.html#drag-and-drop-processing-model\n    document.addEventListener('dragenter', () => {\n      this.enteredAnotherElement = true\n    })\n\n    document.addEventListener('dragleave', () => {\n      if (!this.enteredAnotherElement && !this.$button.disabled) {\n        this.hideDraggingState()\n        this.$announcements.innerText = this.i18n.t('leftDropZone')\n      }\n\n      this.enteredAnotherElement = false\n    })\n  }\n\n  /**\n   * Updates the visibility of the dropzone as users enters the various elements on the page\n   *\n   * @private\n   * @param {DragEvent} event - The `dragenter` event\n   */\n  updateDropzoneVisibility(event) {\n    if (this.$button.disabled) return\n\n    // DOM interfaces only type `event.target` as `EventTarget`\n    // so we first need to make sure it's a `Node`\n    if (event.target instanceof Node) {\n      if (this.$root.contains(event.target)) {\n        if (event.dataTransfer && this.canDrop(event.dataTransfer)) {\n          // Only update the class and make the announcement if not already visible\n          // to avoid repeated announcements on NVDA (2024.4) + Firefox (133)\n          if (\n            !this.$button.classList.contains(\n              'govuk-file-upload-button--dragging'\n            )\n          ) {\n            this.showDraggingState()\n            this.$announcements.innerText = this.i18n.t('enteredDropZone')\n          }\n        }\n      } else {\n        // Only hide the dropzone if it is visible to prevent announcing user\n        // left the drop zone when they enter the page but haven't reached yet\n        // the file upload component\n        if (\n          this.$button.classList.contains('govuk-file-upload-button--dragging')\n        ) {\n          this.hideDraggingState()\n          this.$announcements.innerText = this.i18n.t('leftDropZone')\n        }\n      }\n    }\n  }\n\n  /**\n   * Show the drop zone visually\n   *\n   * @private\n   */\n  showDraggingState() {\n    this.$button.classList.add('govuk-file-upload-button--dragging')\n  }\n\n  /**\n   * Hides the drop zone visually\n   *\n   * @private\n   */\n  hideDraggingState() {\n    this.$button.classList.remove('govuk-file-upload-button--dragging')\n  }\n\n  /**\n   * Handles user dropping on the component\n   *\n   * @private\n   * @param {DragEvent} event - The `dragenter` event\n   */\n  onDrop(event) {\n    event.preventDefault()\n\n    if (event.dataTransfer && this.canFillInput(event.dataTransfer)) {\n      this.$input.files = event.dataTransfer.files\n\n      // Dispatch a `change` event so external code that would rely on the `<input>`\n      // dispatching an event when files are dropped still work.\n      // Use a `CustomEvent` so our events are distinguishable from browser's native events\n      this.$input.dispatchEvent(new CustomEvent('change'))\n\n      this.hideDraggingState()\n    }\n  }\n\n  /**\n   * Confirms if enhanced `<input>` can be filled with files from the given `DataTransfer`\n   *\n   * @param {DataTransfer} dataTransfer - The `DataTransfer` being dropped\n   * @returns {boolean} - true if the `DataTransfer` contains files, in number matching the `multiple` attribute of the original `<input>`\n   * @private\n   */\n  canFillInput(dataTransfer) {\n    return this.matchesInputCapacity(dataTransfer.files.length)\n  }\n\n  /**\n   * Confirms if the content of a `DataTransfer` dragged over component can be dropped\n   *\n   * Unfortunately, there's a certain level of uncertainty in Safari which does not\n   * even provide a list of `items` while dragging (and seems to even miss the `types` sometimes)\n   *\n   * @param {DataTransfer} dataTransfer - The `DataTransfer` being dragged\n   * @returns {boolean} - true if the `DataTransfer` looks OK for filling the input, false otherwise\n   * @private\n   */\n  canDrop(dataTransfer) {\n    // If the browser is kind enough to give a list of items, we'll use that as source of truth\n    if (dataTransfer.items.length) {\n      return this.matchesInputCapacity(countFileItems(dataTransfer.items))\n    }\n\n    // If we have some type information, we'll use that\n    if (dataTransfer.types.length) {\n      return dataTransfer.types.includes('Files')\n    }\n\n    // If we have nothing to go by, we'll assume things are OK\n    // until we have a more accurate picture inside the `drop` event\n    return true\n  }\n\n  /**\n   * Confirms the given number of files matches that allowed by the enhanced `<input>`\n   *\n   * @param {number} numberOfFiles - The number of files\n   * @returns {boolean} - `true` if the enhanced `<input>` can accept that number of files\n   * @private\n   */\n  matchesInputCapacity(numberOfFiles) {\n    if (this.$input.multiple) {\n      return numberOfFiles > 0\n    }\n\n    return numberOfFiles === 1\n  }\n\n  /**\n   * Check if the value of the underlying input has changed\n   *\n   * @private\n   */\n  onChange() {\n    const fileCount = this.$input.files.length\n\n    if (fileCount === 0) {\n      // If there are no files, show the default selection text\n      this.$status.innerText = this.i18n.t('noFileChosen')\n      this.$button.classList.add('govuk-file-upload-button--empty')\n    } else {\n      if (\n        // If there is 1 file, just show the file name\n        fileCount === 1\n      ) {\n        this.$status.innerText = this.$input.files[0].name\n      } else {\n        // Otherwise, tell the user how many files are selected\n        this.$status.innerText = this.i18n.t('multipleFilesChosen', {\n          count: fileCount\n        })\n      }\n\n      this.$button.classList.remove('govuk-file-upload-button--empty')\n    }\n  }\n\n  /**\n   * Looks up the `<label>` element associated to the field\n   *\n   * @private\n   * @returns {HTMLElement} The `<label>` element associated to the field\n   * @throws {ElementError} If the `<label>` cannot be found\n   */\n  findLabel() {\n    // Use `label` in the selector so TypeScript knows the type fo `HTMLElement`\n    const $label = document.querySelector(`label[for=\"${this.$input.id}\"]`)\n\n    if (!$label) {\n      throw new ElementError({\n        component: FileUpload,\n        identifier: `Field label (\\`<label for=${this.$input.id}>\\`)`\n      })\n    }\n\n    return $label\n  }\n\n  /**\n   * When the button is clicked, emulate clicking the actual, hidden file input\n   *\n   * @private\n   */\n  onClick() {\n    this.$input.click()\n  }\n\n  /**\n   * Create a mutation observer to check if the input's attributes altered.\n   *\n   * @private\n   */\n  observeDisabledState() {\n    const observer = new MutationObserver((mutationList) => {\n      for (const mutation of mutationList) {\n        if (\n          mutation.type === 'attributes' &&\n          mutation.attributeName === 'disabled'\n        ) {\n          this.updateDisabledState()\n        }\n      }\n    })\n\n    observer.observe(this.$input, {\n      attributes: true\n    })\n  }\n\n  /**\n   * Synchronise the `disabled` state between the input and replacement button.\n   *\n   * @private\n   */\n  updateDisabledState() {\n    this.$button.disabled = this.$input.disabled\n\n    this.$root.classList.toggle(\n      'govuk-drop-zone--disabled',\n      this.$button.disabled\n    )\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-file-upload'\n\n  /**\n   * File upload default config\n   *\n   * @see {@link FileUploadConfig}\n   * @constant\n   * @type {FileUploadConfig}\n   */\n  static defaults = Object.freeze({\n    i18n: {\n      chooseFilesButton: 'Choose file',\n      dropInstruction: 'or drop file',\n      noFileChosen: 'No file chosen',\n      multipleFilesChosen: {\n        // the 'one' string isn't used as the component displays the filename\n        // instead, however it's here for coverage's sake\n        one: '%{count} file chosen',\n        other: '%{count} files chosen'\n      },\n      enteredDropZone: 'Entered drop zone',\n      leftDropZone: 'Left drop zone'\n    }\n  })\n\n  /**\n   * File upload config schema\n   *\n   * @constant\n   * @satisfies {Schema<FileUploadConfig>}\n   */\n  static schema = Object.freeze({\n    properties: {\n      i18n: { type: 'object' }\n    }\n  })\n}\n\n/**\n * Counts the number of `DataTransferItem` whose kind is `file`\n *\n * @param {DataTransferItemList} list - The list\n * @returns {number} - The number of items whose kind is `file` in the list\n */\nfunction countFileItems(list) {\n  let result = 0\n\n  // `DataTransferItemList` is not iterable\n  // eslint-disable-next-line @typescript-eslint/prefer-for-of\n  for (let i = 0; i < list.length; i++) {\n    if (list[i].kind === 'file') {\n      result++\n    }\n  }\n  return result\n}\n\n/**\n * @typedef {HTMLInputElement & {files: FileList}} HTMLFileInputElement\n */\n\n/**\n * File upload config\n *\n * @see {@link FileUpload.defaults}\n * @typedef {object} FileUploadConfig\n * @property {FileUploadTranslations} [i18n=FileUpload.defaults.i18n] - File upload translations\n */\n\n/**\n * File upload translations\n *\n * @see {@link FileUpload.defaults.i18n}\n * @typedef {object} FileUploadTranslations\n *\n * Messages used by the component\n * @property {string} [chooseFile] - The text of the button that opens the file picker\n * @property {string} [dropInstruction] - The text informing users they can drop files\n * @property {TranslationPluralForms} [multipleFilesChosen] - The text displayed when multiple files\n *   have been chosen by the user\n * @property {string} [noFileChosen] - The text to displayed when no file has been chosen by the user\n * @property {string} [enteredDropZone] - The text announced by assistive technology\n *   when user drags files and enters the drop zone\n * @property {string} [leftDropZone] - The text announced by assistive technology\n *   when user drags files and leaves the drop zone without dropping\n */\n\n/**\n * @import { Schema } from '../../common/configuration.mjs'\n * @import { TranslationPluralForms } from '../../i18n.mjs'\n */\n"],"names":["closestAttributeValue","$element","attributeName","$closestElementWithAttribute","closest","getAttribute","isInitialised","$root","moduleName","HTMLElement","hasAttribute","isSupported","$scope","document","body","classList","contains","isArray","option","Array","isObject","formatErrorMessage","Component","message","GOVUKFrontendError","Error","constructor","args","name","SupportError","supportMessage","HTMLScriptElement","prototype","ConfigError","ElementError","messageOrOptions","component","identifier","element","expectedType","InitError","componentOrMessage","_$root","childConstructor","elementType","checkSupport","checkInitialised","setAttribute","configOverride","Symbol","for","ConfigurableComponent","param","config","_config","defaults","datasetConfig","normaliseDataset","dataset","mergeConfigs","normaliseString","value","property","trimmedValue","trim","output","outputType","type","includes","length","isFinite","Number","schema","out","entries","Object","properties","entry","namespace","field","toString","extractConfigByNamespace","configObjects","formattedConfigObject","configObject","key","keys","override","newObject","current","keyParts","split","index","I18n","translations","_config$locale","locale","documentElement","lang","t","lookupKey","options","translation","count","translationPluralForm","getPluralSuffix","match","replacePlaceholders","translationString","formatter","Intl","NumberFormat","supportedLocalesOf","undefined","replace","placeholderWithBraces","placeholderKey","hasOwnProperty","call","placeholderValue","format","hasIntlPluralRulesSupport","Boolean","window","PluralRules","preferredForm","select","console","warn","FileUpload","$input","$button","$status","i18n","id","$announcements","enteredAnotherElement","querySelector","$label","findLabel","createElement","add","ariaDescribedBy","className","innerText","appendChild","commaSpan","containerSpan","buttonSpan","insertAdjacentText","instructionSpan","addEventListener","onClick","bind","event","preventDefault","insertAdjacentElement","onChange","updateDisabledState","observeDisabledState","onDrop","updateDropzoneVisibility","disabled","hideDraggingState","target","Node","dataTransfer","canDrop","showDraggingState","remove","canFillInput","files","dispatchEvent","CustomEvent","matchesInputCapacity","items","countFileItems","types","numberOfFiles","multiple","fileCount","click","observer","MutationObserver","mutationList","mutation","observe","attributes","toggle","freeze","chooseFilesButton","dropInstruction","noFileChosen","multipleFilesChosen","one","other","enteredDropZone","leftDropZone","list","result","i","kind"],"mappings":"AAQO,SAASA,qBAAqBA,CAACC,QAAQ,EAAEC,aAAa,EAAE;EAC7D,MAAMC,4BAA4B,GAAGF,QAAQ,CAACG,OAAO,CAAC,CAAA,CAAA,EAAIF,aAAa,CAAA,CAAA,CAAG,CAAC;EAC3E,OAAOC,4BAA4B,GAC/BA,4BAA4B,CAACE,YAAY,CAACH,aAAa,CAAC,GACxD,IAAI;AACV;;ACsEO,SAASI,aAAaA,CAACC,KAAK,EAAEC,UAAU,EAAE;EAC/C,OACED,KAAK,YAAYE,WAAW,IAC5BF,KAAK,CAACG,YAAY,CAAC,CAAA,KAAA,EAAQF,UAAU,CAAA,KAAA,CAAO,CAAC;AAEjD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASG,WAAWA,CAACC,MAAM,GAAGC,QAAQ,CAACC,IAAI,EAAE;EAClD,IAAI,CAACF,MAAM,EAAE;AACX,IAAA,OAAO,KAAK;AACd,EAAA;AAEA,EAAA,OAAOA,MAAM,CAACG,SAAS,CAACC,QAAQ,CAAC,0BAA0B,CAAC;AAC9D;AASA,SAASC,OAAOA,CAACC,MAAM,EAAE;AACvB,EAAA,OAAOC,KAAK,CAACF,OAAO,CAACC,MAAM,CAAC;AAC9B;AAUO,SAASE,QAAQA,CAACF,MAAM,EAAE;AAC/B,EAAA,OAAO,CAAC,CAACA,MAAM,IAAI,OAAOA,MAAM,KAAK,QAAQ,IAAI,CAACD,OAAO,CAACC,MAAM,CAAC;AACnE;AAsBO,SAASG,kBAAkBA,CAACC,SAAS,EAAEC,OAAO,EAAE;AACrD,EAAA,OAAO,GAAGD,SAAS,CAACd,UAAU,CAAA,EAAA,EAAKe,OAAO,CAAA,CAAE;AAC9C;AAQA;AACA;AACA;AACA;;AC7IO,MAAMC,kBAAkB,SAASC,KAAK,CAAC;AAAAC,EAAAA,WAAAA,CAAA,GAAAC,IAAA,EAAA;AAAA,IAAA,KAAA,CAAA,GAAAA,IAAA,CAAA;IAAA,IAAA,CAC5CC,IAAI,GAAG,oBAAoB;AAAA,EAAA;AAC7B;AAKO,MAAMC,YAAY,SAASL,kBAAkB,CAAC;AAGnD;AACF;AACA;AACA;AACA;AACEE,EAAAA,WAAWA,CAACd,MAAM,GAAGC,QAAQ,CAACC,IAAI,EAAE;IAClC,MAAMgB,cAAc,GAClB,UAAU,IAAIC,iBAAiB,CAACC,SAAS,GACrC,gHAAgH,GAChH,kDAAkD;AAExD,IAAA,KAAK,CACHpB,MAAM,GACFkB,cAAc,GACd,8DACN,CAAC;IAAA,IAAA,CAjBHF,IAAI,GAAG,cAAc;AAkBrB,EAAA;AACF;AAKO,MAAMK,WAAW,SAAST,kBAAkB,CAAC;AAAAE,EAAAA,WAAAA,CAAA,GAAAC,IAAA,EAAA;AAAA,IAAA,KAAA,CAAA,GAAAA,IAAA,CAAA;IAAA,IAAA,CAClDC,IAAI,GAAG,aAAa;AAAA,EAAA;AACtB;AAKO,MAAMM,YAAY,SAASV,kBAAkB,CAAC;EAmBnDE,WAAWA,CAACS,gBAAgB,EAAE;IAC5B,IAAIZ,OAAO,GAAG,OAAOY,gBAAgB,KAAK,QAAQ,GAAGA,gBAAgB,GAAG,EAAE;AAG1E,IAAA,IAAIf,QAAQ,CAACe,gBAAgB,CAAC,EAAE;MAC9B,MAAM;QAAEC,SAAS;QAAEC,UAAU;QAAEC,OAAO;AAAEC,QAAAA;AAAa,OAAC,GAAGJ,gBAAgB;AAEzEZ,MAAAA,OAAO,GAAGc,UAAU;MAGpBd,OAAO,IAAIe,OAAO,GACd,CAAA,gBAAA,EAAmBC,YAAY,IAAA,IAAA,GAAZA,YAAY,GAAI,aAAa,CAAA,CAAE,GAClD,YAAY;AAGhB,MAAA,IAAIH,SAAS,EAAE;AACbb,QAAAA,OAAO,GAAGF,kBAAkB,CAACe,SAAS,EAAEb,OAAO,CAAC;AAClD,MAAA;AACF,IAAA;IAEA,KAAK,CAACA,OAAO,CAAC;IAAA,IAAA,CAtChBK,IAAI,GAAG,cAAc;AAuCrB,EAAA;AACF;AAKO,MAAMY,SAAS,SAAShB,kBAAkB,CAAC;EAOhDE,WAAWA,CAACe,kBAAkB,EAAE;AAC9B,IAAA,MAAMlB,OAAO,GACX,OAAOkB,kBAAkB,KAAK,QAAQ,GAClCA,kBAAkB,GAClBpB,kBAAkB,CAChBoB,kBAAkB,EAClB,8CACF,CAAC;IAEP,KAAK,CAAClB,OAAO,CAAC;IAAA,IAAA,CAfhBK,IAAI,GAAG,WAAW;AAgBlB,EAAA;AACF;AAaA;AACA;AACA;;ACjIO,MAAMN,SAAS,CAAC;AASrB;AACF;AACA;AACA;AACA;AACA;EACE,IAAIf,KAAKA,GAAG;IACV,OAAO,IAAI,CAACmC,MAAM;AACpB,EAAA;EAcAhB,WAAWA,CAACnB,KAAK,EAAE;AAAA,IAAA,IAAA,CARnBmC,MAAM,GAAA,MAAA;AASJ,IAAA,MAAMC,gBAAgB,GACpB,IAAI,CAACjB,WACN;AASD,IAAA,IAAI,OAAOiB,gBAAgB,CAACnC,UAAU,KAAK,QAAQ,EAAE;AACnD,MAAA,MAAM,IAAIgC,SAAS,CAAC,CAAA,uCAAA,CAAyC,CAAC;AAChE,IAAA;AAEA,IAAA,IAAI,EAAEjC,KAAK,YAAYoC,gBAAgB,CAACC,WAAW,CAAC,EAAE;MACpD,MAAM,IAAIV,YAAY,CAAC;AACrBI,QAAAA,OAAO,EAAE/B,KAAK;AACd6B,QAAAA,SAAS,EAAEO,gBAAgB;AAC3BN,QAAAA,UAAU,EAAE,wBAAwB;AACpCE,QAAAA,YAAY,EAAEI,gBAAgB,CAACC,WAAW,CAAChB;AAC7C,OAAC,CAAC;AACJ,IAAA,CAAC,MAAM;MACL,IAAI,CAACc,MAAM,GAAmCnC,KAAM;AACtD,IAAA;IAEAoC,gBAAgB,CAACE,YAAY,EAAE;IAE/B,IAAI,CAACC,gBAAgB,EAAE;AAEvB,IAAA,MAAMtC,UAAU,GAAGmC,gBAAgB,CAACnC,UAAU;IAE9C,IAAI,CAACD,KAAK,CAACwC,YAAY,CAAC,QAAQvC,UAAU,CAAA,KAAA,CAAO,EAAE,EAAE,CAAC;AACxD,EAAA;AAQAsC,EAAAA,gBAAgBA,GAAG;AACjB,IAAA,MAAMpB,WAAW,GAAyC,IAAI,CAACA,WAAY;AAC3E,IAAA,MAAMlB,UAAU,GAAGkB,WAAW,CAAClB,UAAU;IAEzC,IAAIA,UAAU,IAAIF,aAAa,CAAC,IAAI,CAACC,KAAK,EAAEC,UAAU,CAAC,EAAE;AACvD,MAAA,MAAM,IAAIgC,SAAS,CAACd,WAAW,CAAC;AAClC,IAAA;AACF,EAAA;EAOA,OAAOmB,YAAYA,GAAG;AACpB,IAAA,IAAI,CAAClC,WAAW,EAAE,EAAE;MAClB,MAAM,IAAIkB,YAAY,EAAE;AAC1B,IAAA;AACF,EAAA;AACF;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AArGaP,SAAS,CAIbsB,WAAW,GAAGnC,WAAW;;ACV3B,MAAMuC,cAAc,GAAGC,MAAM,CAACC,GAAG,CAAC,gBAAgB,CAAC;AAYnD,MAAMC,qBAAqB,SAAS7B,SAAS,CAAC;EAkBnD,CAAC0B,cAAc,CAAA,CAAEI,KAAK,EAAE;AACtB,IAAA,OAAO,EAAE;AACX,EAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;EACE,IAAIC,MAAMA,GAAG;IACX,OAAO,IAAI,CAACC,OAAO;AACrB,EAAA;AAeA5B,EAAAA,WAAWA,CAACnB,KAAK,EAAE8C,MAAM,EAAE;IACzB,KAAK,CAAC9C,KAAK,CAAC;AAAA,IAAA,IAAA,CAVd+C,OAAO,GAAA,MAAA;AAYL,IAAA,MAAMX,gBAAgB,GACqC,IAAI,CAACjB,WAAY;AAE5E,IAAA,IAAI,CAACN,QAAQ,CAACuB,gBAAgB,CAACY,QAAQ,CAAC,EAAE;MACxC,MAAM,IAAItB,WAAW,CACnBZ,kBAAkB,CAChBsB,gBAAgB,EAChB,qEACF,CACF,CAAC;AACH,IAAA;IAEA,MAAMa,aAAa,GACjBC,gBAAgB,CAACd,gBAAgB,EAAE,IAAI,CAACD,MAAM,CAACgB,OAAO,CACvD;IAED,IAAI,CAACJ,OAAO,GACVK,YAAY,CACVhB,gBAAgB,CAACY,QAAQ,EACzBF,MAAM,IAAA,IAAA,GAANA,MAAM,GAAI,EAAE,EACZ,IAAI,CAACL,cAAc,CAAC,CAACQ,aAAa,CAAC,EACnCA,aACF,CACD;AACH,EAAA;AACF;AAkBO,SAASI,eAAeA,CAACC,KAAK,EAAEC,QAAQ,EAAE;EAC/C,MAAMC,YAAY,GAAGF,KAAK,GAAGA,KAAK,CAACG,IAAI,EAAE,GAAG,EAAE;AAE9C,EAAA,IAAIC,MAAM;AACV,EAAA,IAAIC,UAAU,GAAGJ,QAAQ,IAAA,IAAA,GAAA,MAAA,GAARA,QAAQ,CAAEK,IAAI;EAG/B,IAAI,CAACD,UAAU,EAAE;IACf,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CAACE,QAAQ,CAACL,YAAY,CAAC,EAAE;AAC5CG,MAAAA,UAAU,GAAG,SAAS;AACxB,IAAA;AAIA,IAAA,IAAIH,YAAY,CAACM,MAAM,GAAG,CAAC,IAAIC,QAAQ,CAACC,MAAM,CAACR,YAAY,CAAC,CAAC,EAAE;AAC7DG,MAAAA,UAAU,GAAG,QAAQ;AACvB,IAAA;AACF,EAAA;AAEA,EAAA,QAAQA,UAAU;AAChB,IAAA,KAAK,SAAS;MACZD,MAAM,GAAGF,YAAY,KAAK,MAAM;AAChC,MAAA;AAEF,IAAA,KAAK,QAAQ;AACXE,MAAAA,MAAM,GAAGM,MAAM,CAACR,YAAY,CAAC;AAC7B,MAAA;AAEF,IAAA;AACEE,MAAAA,MAAM,GAAGJ,KAAK;AAClB;AAEA,EAAA,OAAOI,MAAM;AACf;AAeO,SAASR,gBAAgBA,CAACnC,SAAS,EAAEoC,OAAO,EAAE;AACnD,EAAA,IAAI,CAACtC,QAAQ,CAACE,SAAS,CAACkD,MAAM,CAAC,EAAE;IAC/B,MAAM,IAAIvC,WAAW,CACnBZ,kBAAkB,CAChBC,SAAS,EACT,mEACF,CACF,CAAC;AACH,EAAA;EAEA,MAAMmD,GAAG,GAAgC,EAAG;EAC5C,MAAMC,OAAO,GACXC,MAAM,CAACD,OAAO,CAACpD,SAAS,CAACkD,MAAM,CAACI,UAAU,CAC3C;AAGD,EAAA,KAAK,MAAMC,KAAK,IAAIH,OAAO,EAAE;AAC3B,IAAA,MAAM,CAACI,SAAS,EAAEhB,QAAQ,CAAC,GAAGe,KAAK;AAGnC,IAAA,MAAME,KAAK,GAAGD,SAAS,CAACE,QAAQ,EAAE;IAElC,IAAID,KAAK,IAAIrB,OAAO,EAAE;AACpBe,MAAAA,GAAG,CAACM,KAAK,CAAC,GAAGnB,eAAe,CAACF,OAAO,CAACqB,KAAK,CAAC,EAAEjB,QAAQ,CAAC;AACxD,IAAA;IAMA,IAAI,CAAAA,QAAQ,IAAA,IAAA,GAAA,MAAA,GAARA,QAAQ,CAAEK,IAAI,MAAK,QAAQ,EAAE;AAC/BM,MAAAA,GAAG,CAACM,KAAK,CAAC,GAAGE,wBAAwB,CACnC3D,SAAS,CAACkD,MAAM,EAChBd,OAAO,EACPoB,SACF,CAAC;AACH,IAAA;AACF,EAAA;AAEA,EAAA,OAAOL,GAAG;AACZ;AAqDO,SAASd,YAAYA,CAAC,GAAGuB,aAAa,EAAE;EAG7C,MAAMC,qBAAqB,GAAG,EAAE;AAGhC,EAAA,KAAK,MAAMC,YAAY,IAAIF,aAAa,EAAE;IACxC,KAAK,MAAMG,GAAG,IAAIV,MAAM,CAACW,IAAI,CAACF,YAAY,CAAC,EAAE;AAC3C,MAAA,MAAMlE,MAAM,GAAGiE,qBAAqB,CAACE,GAAG,CAAC;AACzC,MAAA,MAAME,QAAQ,GAAGH,YAAY,CAACC,GAAG,CAAC;MAKlC,IAAIjE,QAAQ,CAACF,MAAM,CAAC,IAAIE,QAAQ,CAACmE,QAAQ,CAAC,EAAE;QAC1CJ,qBAAqB,CAACE,GAAG,CAAC,GAAG1B,YAAY,CAACzC,MAAM,EAAEqE,QAAQ,CAAC;AAC7D,MAAA,CAAC,MAAM;AAELJ,QAAAA,qBAAqB,CAACE,GAAG,CAAC,GAAGE,QAAQ;AACvC,MAAA;AACF,IAAA;AACF,EAAA;AAEA,EAAA,OAAOJ,qBAAqB;AAC9B;AAoDO,SAASF,wBAAwBA,CAACT,MAAM,EAAEd,OAAO,EAAEoB,SAAS,EAAE;AACnE,EAAA,MAAMhB,QAAQ,GAAGU,MAAM,CAACI,UAAU,CAACE,SAAS,CAAC;EAG7C,IAAI,CAAAhB,QAAQ,IAAA,IAAA,GAAA,MAAA,GAARA,QAAQ,CAAEK,IAAI,MAAK,QAAQ,EAAE;AAC/B,IAAA;AACF,EAAA;AAGA,EAAA,MAAMqB,SAAS,GAA0D;IACvE,CAACV,SAAS,GAAG;GACb;AAEF,EAAA,KAAK,MAAM,CAACO,GAAG,EAAExB,KAAK,CAAC,IAAIc,MAAM,CAACD,OAAO,CAAChB,OAAO,CAAC,EAAE;IAElD,IAAI+B,OAAO,GAAGD,SAAS;AAGvB,IAAA,MAAME,QAAQ,GAAGL,GAAG,CAACM,KAAK,CAAC,GAAG,CAAC;AAQ/B,IAAA,KAAK,MAAM,CAACC,KAAK,EAAEhE,IAAI,CAAC,IAAI8D,QAAQ,CAAChB,OAAO,EAAE,EAAE;AAC9C,MAAA,IAAItD,QAAQ,CAACqE,OAAO,CAAC,EAAE;AAErB,QAAA,IAAIG,KAAK,GAAGF,QAAQ,CAACrB,MAAM,GAAG,CAAC,EAAE;UAE/B,IAAI,CAACjD,QAAQ,CAACqE,OAAO,CAAC7D,IAAI,CAAC,CAAC,EAAE;AAC5B6D,YAAAA,OAAO,CAAC7D,IAAI,CAAC,GAAG,EAAE;AACpB,UAAA;AAGA6D,UAAAA,OAAO,GAAGA,OAAO,CAAC7D,IAAI,CAAC;AACzB,QAAA,CAAC,MAAM,IAAIyD,GAAG,KAAKP,SAAS,EAAE;AAE5BW,UAAAA,OAAO,CAAC7D,IAAI,CAAC,GAAGgC,eAAe,CAACC,KAAK,CAAC;AACxC,QAAA;AACF,MAAA;AACF,IAAA;AACF,EAAA;EAEA,OAAO2B,SAAS,CAACV,SAAS,CAAC;AAC7B;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;AC3ZO,MAAMe,IAAI,CAAC;EAUhBnE,WAAWA,CAACoE,YAAY,GAAG,EAAE,EAAEzC,MAAM,GAAG,EAAE,EAAE;AAAA,IAAA,IAAA0C,cAAA;AAAA,IAAA,IAAA,CAT5CD,YAAY,GAAA,MAAA;AAAA,IAAA,IAAA,CACZE,MAAM,GAAA,MAAA;IAUJ,IAAI,CAACF,YAAY,GAAGA,YAAY;AAGhC,IAAA,IAAI,CAACE,MAAM,GAAA,CAAAD,cAAA,GAAG1C,MAAM,CAAC2C,MAAM,KAAA,IAAA,GAAAD,cAAA,GAAKlF,QAAQ,CAACoF,eAAe,CAACC,IAAI,IAAI,IAAK;AACxE,EAAA;AAaAC,EAAAA,CAACA,CAACC,SAAS,EAAEC,OAAO,EAAE;IACpB,IAAI,CAACD,SAAS,EAAE;AAEd,MAAA,MAAM,IAAI3E,KAAK,CAAC,0BAA0B,CAAC;AAC7C,IAAA;AAGA,IAAA,IAAI6E,WAAW,GAAG,IAAI,CAACR,YAAY,CAACM,SAAS,CAAC;AAK9C,IAAA,IAAI,QAAOC,OAAO,IAAA,IAAA,GAAA,MAAA,GAAPA,OAAO,CAAEE,KAAK,CAAA,KAAK,QAAQ,IAAInF,QAAQ,CAACkF,WAAW,CAAC,EAAE;AAC/D,MAAA,MAAME,qBAAqB,GACzBF,WAAW,CAAC,IAAI,CAACG,eAAe,CAACL,SAAS,EAAEC,OAAO,CAACE,KAAK,CAAC,CAAC;AAG7D,MAAA,IAAIC,qBAAqB,EAAE;AACzBF,QAAAA,WAAW,GAAGE,qBAAqB;AACrC,MAAA;AACF,IAAA;AAEA,IAAA,IAAI,OAAOF,WAAW,KAAK,QAAQ,EAAE;AAGnC,MAAA,IAAIA,WAAW,CAACI,KAAK,CAAC,WAAW,CAAC,EAAE;QAClC,IAAI,CAACL,OAAO,EAAE;AACZ,UAAA,MAAM,IAAI5E,KAAK,CACb,wEACF,CAAC;AACH,QAAA;AAEA,QAAA,OAAO,IAAI,CAACkF,mBAAmB,CAACL,WAAW,EAAED,OAAO,CAAC;AACvD,MAAA;AAEA,MAAA,OAAOC,WAAW;AACpB,IAAA;AAIA,IAAA,OAAOF,SAAS;AAClB,EAAA;AAWAO,EAAAA,mBAAmBA,CAACC,iBAAiB,EAAEP,OAAO,EAAE;IAC9C,MAAMQ,SAAS,GAAGC,IAAI,CAACC,YAAY,CAACC,kBAAkB,CAAC,IAAI,CAAChB,MAAM,CAAC,CAAC3B,MAAM,GACtE,IAAIyC,IAAI,CAACC,YAAY,CAAC,IAAI,CAACf,MAAM,CAAC,GAClCiB,SAAS;IAEb,OAAOL,iBAAiB,CAACM,OAAO,CAC9B,YAAY,EAUZ,UAAUC,qBAAqB,EAAEC,cAAc,EAAE;AAC/C,MAAA,IAAIzC,MAAM,CAAC3C,SAAS,CAACqF,cAAc,CAACC,IAAI,CAACjB,OAAO,EAAEe,cAAc,CAAC,EAAE;AACjE,QAAA,MAAMG,gBAAgB,GAAGlB,OAAO,CAACe,cAAc,CAAC;AAIhD,QAAA,IACEG,gBAAgB,KAAK,KAAK,IACzB,OAAOA,gBAAgB,KAAK,QAAQ,IACnC,OAAOA,gBAAgB,KAAK,QAAS,EACvC;AACA,UAAA,OAAO,EAAE;AACX,QAAA;AAGA,QAAA,IAAI,OAAOA,gBAAgB,KAAK,QAAQ,EAAE;UACxC,OAAOV,SAAS,GACZA,SAAS,CAACW,MAAM,CAACD,gBAAgB,CAAC,GAClC,CAAA,EAAGA,gBAAgB,CAAA,CAAE;AAC3B,QAAA;AAEA,QAAA,OAAOA,gBAAgB;AACzB,MAAA;AAEA,MAAA,MAAM,IAAI9F,KAAK,CACb,CAAA,+BAAA,EAAkC0F,qBAAqB,wBACzD,CAAC;AACH,IAAA,CACF,CAAC;AACH,EAAA;AAcAM,EAAAA,yBAAyBA,GAAG;IAC1B,OAAOC,OAAO,CACZ,aAAa,IAAIC,MAAM,CAACb,IAAI,IAC1BA,IAAI,CAACc,WAAW,CAACZ,kBAAkB,CAAC,IAAI,CAAChB,MAAM,CAAC,CAAC3B,MACrD,CAAC;AACH,EAAA;AAkBAoC,EAAAA,eAAeA,CAACL,SAAS,EAAEG,KAAK,EAAE;AAMhCA,IAAAA,KAAK,GAAGhC,MAAM,CAACgC,KAAK,CAAC;AACrB,IAAA,IAAI,CAACjC,QAAQ,CAACiC,KAAK,CAAC,EAAE;AACpB,MAAA,OAAO,OAAO;AAChB,IAAA;AAGA,IAAA,MAAMD,WAAW,GAAG,IAAI,CAACR,YAAY,CAACM,SAAS,CAAC;IAKhD,MAAMyB,aAAa,GAAG,IAAI,CAACJ,yBAAyB,EAAE,GAClD,IAAIX,IAAI,CAACc,WAAW,CAAC,IAAI,CAAC5B,MAAM,CAAC,CAAC8B,MAAM,CAACvB,KAAK,CAAC,GAC/C,OAAO;AAGX,IAAA,IAAInF,QAAQ,CAACkF,WAAW,CAAC,EAAE;MACzB,IAAIuB,aAAa,IAAIvB,WAAW,EAAE;AAChC,QAAA,OAAOuB,aAAa;AAGtB,MAAA,CAAC,MAAM,IAAI,OAAO,IAAIvB,WAAW,EAAE;QACjCyB,OAAO,CAACC,IAAI,CACV,CAAA,4BAAA,EAA+BH,aAAa,UAAU,IAAI,CAAC7B,MAAM,CAAA,mCAAA,CACnE,CAAC;AAED,QAAA,OAAO,OAAO;AAChB,MAAA;AACF,IAAA;IAGA,MAAM,IAAIvE,KAAK,CACb,CAAA,4CAAA,EAA+C,IAAI,CAACuE,MAAM,UAC5D,CAAC;AACH,EAAA;AACF;;AC9MA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMiC,UAAU,SAAS9E,qBAAqB,CAAC;AAgCpD;AACF;AACA;AACA;AACEzB,EAAAA,WAAWA,CAACnB,KAAK,EAAE8C,MAAM,GAAG,EAAE,EAAE;AAC9B,IAAA,KAAK,CAAC9C,KAAK,EAAE8C,MAAM,CAAC;AAAA,IAAA,IAAA,CAhCtB6E,MAAM,GAAA,MAAA;AAAA,IAAA,IAAA,CAKNC,OAAO,GAAA,MAAA;AAAA,IAAA,IAAA,CAKPC,OAAO,GAAA,MAAA;AAAA,IAAA,IAAA,CAGPC,IAAI,GAAA,MAAA;AAAA,IAAA,IAAA,CAGJC,EAAE,GAAA,MAAA;AAAA,IAAA,IAAA,CAGFC,cAAc,GAAA,MAAA;AAAA,IAAA,IAAA,CAMdC,qBAAqB,GAAA,MAAA;IASnB,MAAMN,MAAM,GAAG,IAAI,CAAC3H,KAAK,CAACkI,aAAa,CAAC,OAAO,CAAC;IAEhD,IAAIP,MAAM,KAAK,IAAI,EAAE;MACnB,MAAM,IAAIhG,YAAY,CAAC;AACrBE,QAAAA,SAAS,EAAE6F,UAAU;AACrB5F,QAAAA,UAAU,EAAE;AACd,OAAC,CAAC;AACJ,IAAA;AAEA,IAAA,IAAI6F,MAAM,CAAC/D,IAAI,KAAK,MAAM,EAAE;MAC1B,MAAM,IAAIjC,YAAY,CACpBb,kBAAkB,CAChB4G,UAAU,EACV,qEACF,CACF,CAAC;AACH,IAAA;IAEA,IAAI,CAACC,MAAM,GAAwCA,MAAO;AAE1D,IAAA,IAAI,CAAC,IAAI,CAACA,MAAM,CAACI,EAAE,EAAE;MACnB,MAAM,IAAIpG,YAAY,CAAC;AACrBE,QAAAA,SAAS,EAAE6F,UAAU;AACrB5F,QAAAA,UAAU,EAAE;AACd,OAAC,CAAC;AACJ,IAAA;AAEA,IAAA,IAAI,CAACiG,EAAE,GAAG,IAAI,CAACJ,MAAM,CAACI,EAAE;IAExB,IAAI,CAACD,IAAI,GAAG,IAAIxC,IAAI,CAAC,IAAI,CAACxC,MAAM,CAACgF,IAAI,EAAE;AAErCrC,MAAAA,MAAM,EAAEhG,qBAAqB,CAAC,IAAI,CAACO,KAAK,EAAE,MAAM;AAClD,KAAC,CAAC;AAEF,IAAA,MAAMmI,MAAM,GAAG,IAAI,CAACC,SAAS,EAAE;AAG/B,IAAA,IAAI,CAACD,MAAM,CAACJ,EAAE,EAAE;AACdI,MAAAA,MAAM,CAACJ,EAAE,GAAG,GAAG,IAAI,CAACA,EAAE,CAAA,MAAA,CAAQ;AAChC,IAAA;IAKA,IAAI,CAACJ,MAAM,CAACI,EAAE,GAAG,CAAA,EAAG,IAAI,CAACA,EAAE,CAAA,MAAA,CAAQ;IAGnC,IAAI,CAACJ,MAAM,CAACnF,YAAY,CAAC,QAAQ,EAAE,MAAM,CAAC;AAG1C,IAAA,MAAMoF,OAAO,GAAGtH,QAAQ,CAAC+H,aAAa,CAAC,QAAQ,CAAC;AAChDT,IAAAA,OAAO,CAACpH,SAAS,CAAC8H,GAAG,CAAC,0BAA0B,CAAC;IACjDV,OAAO,CAAChE,IAAI,GAAG,QAAQ;AACvBgE,IAAAA,OAAO,CAACG,EAAE,GAAG,IAAI,CAACA,EAAE;AACpBH,IAAAA,OAAO,CAACpH,SAAS,CAAC8H,GAAG,CAAC,iCAAiC,CAAC;IAIxD,MAAMC,eAAe,GAAG,IAAI,CAACZ,MAAM,CAAC7H,YAAY,CAAC,kBAAkB,CAAC;AACpE,IAAA,IAAIyI,eAAe,EAAE;AACnBX,MAAAA,OAAO,CAACpF,YAAY,CAAC,kBAAkB,EAAE+F,eAAe,CAAC;AAC3D,IAAA;AAGA,IAAA,MAAMV,OAAO,GAAGvH,QAAQ,CAAC+H,aAAa,CAAC,MAAM,CAAC;IAC9CR,OAAO,CAACW,SAAS,GAAG,6CAA6C;AACjEX,IAAAA,OAAO,CAACrF,YAAY,CAAC,WAAW,EAAE,QAAQ,CAAC;IAC3CqF,OAAO,CAACY,SAAS,GAAG,IAAI,CAACX,IAAI,CAAClC,CAAC,CAAC,cAAc,CAAC;AAE/CgC,IAAAA,OAAO,CAACc,WAAW,CAACb,OAAO,CAAC;AAE5B,IAAA,MAAMc,SAAS,GAAGrI,QAAQ,CAAC+H,aAAa,CAAC,MAAM,CAAC;IAChDM,SAAS,CAACH,SAAS,GAAG,uBAAuB;IAC7CG,SAAS,CAACF,SAAS,GAAG,IAAI;AAC1BE,IAAAA,SAAS,CAACZ,EAAE,GAAG,GAAG,IAAI,CAACA,EAAE,CAAA,MAAA,CAAQ;AAEjCH,IAAAA,OAAO,CAACc,WAAW,CAACC,SAAS,CAAC;AAE9B,IAAA,MAAMC,aAAa,GAAGtI,QAAQ,CAAC+H,aAAa,CAAC,MAAM,CAAC;IACpDO,aAAa,CAACJ,SAAS,GACrB,mDAAmD;AAErD,IAAA,MAAMK,UAAU,GAAGvI,QAAQ,CAAC+H,aAAa,CAAC,MAAM,CAAC;IACjDQ,UAAU,CAACL,SAAS,GAClB,8EAA8E;IAChFK,UAAU,CAACJ,SAAS,GAAG,IAAI,CAACX,IAAI,CAAClC,CAAC,CAAC,mBAAmB,CAAC;AAEvDgD,IAAAA,aAAa,CAACF,WAAW,CAACG,UAAU,CAAC;AAIrCD,IAAAA,aAAa,CAACE,kBAAkB,CAAC,WAAW,EAAE,GAAG,CAAC;AAElD,IAAA,MAAMC,eAAe,GAAGzI,QAAQ,CAAC+H,aAAa,CAAC,MAAM,CAAC;IACtDU,eAAe,CAACP,SAAS,GACvB,kDAAkD;IACpDO,eAAe,CAACN,SAAS,GAAG,IAAI,CAACX,IAAI,CAAClC,CAAC,CAAC,iBAAiB,CAAC;AAE1DgD,IAAAA,aAAa,CAACF,WAAW,CAACK,eAAe,CAAC;AAE1CnB,IAAAA,OAAO,CAACc,WAAW,CAACE,aAAa,CAAC;AAClChB,IAAAA,OAAO,CAACpF,YAAY,CAClB,iBAAiB,EACjB,CAAA,EAAG2F,MAAM,CAACJ,EAAE,CAAA,CAAA,EAAIY,SAAS,CAACZ,EAAE,CAAA,CAAA,EAAIH,OAAO,CAACG,EAAE,EAC5C,CAAC;AACDH,IAAAA,OAAO,CAACoB,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC1DtB,IAAAA,OAAO,CAACoB,gBAAgB,CAAC,UAAU,EAAGG,KAAK,IAAK;MAE9CA,KAAK,CAACC,cAAc,EAAE;AACxB,IAAA,CAAC,CAAC;IAGF,IAAI,CAACpJ,KAAK,CAACqJ,qBAAqB,CAAC,YAAY,EAAEzB,OAAO,CAAC;IAEvD,IAAI,CAACD,MAAM,CAACnF,YAAY,CAAC,UAAU,EAAE,IAAI,CAAC;IAC1C,IAAI,CAACmF,MAAM,CAACnF,YAAY,CAAC,aAAa,EAAE,MAAM,CAAC;IAG/C,IAAI,CAACoF,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,OAAO,GAAGA,OAAO;AAGtB,IAAA,IAAI,CAACF,MAAM,CAACqB,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAACM,QAAQ,CAACJ,IAAI,CAAC,IAAI,CAAC,CAAC;IAGhE,IAAI,CAACK,mBAAmB,EAAE;IAC1B,IAAI,CAACC,oBAAoB,EAAE;IAI3B,IAAI,CAACxB,cAAc,GAAG1H,QAAQ,CAAC+H,aAAa,CAAC,MAAM,CAAC;IACpD,IAAI,CAACL,cAAc,CAACxH,SAAS,CAAC8H,GAAG,CAAC,iCAAiC,CAAC;IACpE,IAAI,CAACN,cAAc,CAACxH,SAAS,CAAC8H,GAAG,CAAC,uBAAuB,CAAC;IAC1D,IAAI,CAACN,cAAc,CAACxF,YAAY,CAAC,WAAW,EAAE,WAAW,CAAC;IAC1D,IAAI,CAACxC,KAAK,CAACqJ,qBAAqB,CAAC,UAAU,EAAE,IAAI,CAACrB,cAAc,CAAC;AAIjE,IAAA,IAAI,CAACJ,OAAO,CAACoB,gBAAgB,CAAC,MAAM,EAAE,IAAI,CAACS,MAAM,CAACP,IAAI,CAAC,IAAI,CAAC,CAAC;AAa7D5I,IAAAA,QAAQ,CAAC0I,gBAAgB,CACvB,WAAW,EACX,IAAI,CAACU,wBAAwB,CAACR,IAAI,CAAC,IAAI,CACzC,CAAC;AAQD5I,IAAAA,QAAQ,CAAC0I,gBAAgB,CAAC,WAAW,EAAE,MAAM;MAC3C,IAAI,CAACf,qBAAqB,GAAG,IAAI;AACnC,IAAA,CAAC,CAAC;AAEF3H,IAAAA,QAAQ,CAAC0I,gBAAgB,CAAC,WAAW,EAAE,MAAM;MAC3C,IAAI,CAAC,IAAI,CAACf,qBAAqB,IAAI,CAAC,IAAI,CAACL,OAAO,CAAC+B,QAAQ,EAAE;QACzD,IAAI,CAACC,iBAAiB,EAAE;AACxB,QAAA,IAAI,CAAC5B,cAAc,CAACS,SAAS,GAAG,IAAI,CAACX,IAAI,CAAClC,CAAC,CAAC,cAAc,CAAC;AAC7D,MAAA;MAEA,IAAI,CAACqC,qBAAqB,GAAG,KAAK;AACpC,IAAA,CAAC,CAAC;AACJ,EAAA;EAQAyB,wBAAwBA,CAACP,KAAK,EAAE;AAC9B,IAAA,IAAI,IAAI,CAACvB,OAAO,CAAC+B,QAAQ,EAAE;AAI3B,IAAA,IAAIR,KAAK,CAACU,MAAM,YAAYC,IAAI,EAAE;MAChC,IAAI,IAAI,CAAC9J,KAAK,CAACS,QAAQ,CAAC0I,KAAK,CAACU,MAAM,CAAC,EAAE;AACrC,QAAA,IAAIV,KAAK,CAACY,YAAY,IAAI,IAAI,CAACC,OAAO,CAACb,KAAK,CAACY,YAAY,CAAC,EAAE;UAG1D,IACE,CAAC,IAAI,CAACnC,OAAO,CAACpH,SAAS,CAACC,QAAQ,CAC9B,oCACF,CAAC,EACD;YACA,IAAI,CAACwJ,iBAAiB,EAAE;AACxB,YAAA,IAAI,CAACjC,cAAc,CAACS,SAAS,GAAG,IAAI,CAACX,IAAI,CAAClC,CAAC,CAAC,iBAAiB,CAAC;AAChE,UAAA;AACF,QAAA;AACF,MAAA,CAAC,MAAM;QAIL,IACE,IAAI,CAACgC,OAAO,CAACpH,SAAS,CAACC,QAAQ,CAAC,oCAAoC,CAAC,EACrE;UACA,IAAI,CAACmJ,iBAAiB,EAAE;AACxB,UAAA,IAAI,CAAC5B,cAAc,CAACS,SAAS,GAAG,IAAI,CAACX,IAAI,CAAClC,CAAC,CAAC,cAAc,CAAC;AAC7D,QAAA;AACF,MAAA;AACF,IAAA;AACF,EAAA;AAOAqE,EAAAA,iBAAiBA,GAAG;IAClB,IAAI,CAACrC,OAAO,CAACpH,SAAS,CAAC8H,GAAG,CAAC,oCAAoC,CAAC;AAClE,EAAA;AAOAsB,EAAAA,iBAAiBA,GAAG;IAClB,IAAI,CAAChC,OAAO,CAACpH,SAAS,CAAC0J,MAAM,CAAC,oCAAoC,CAAC;AACrE,EAAA;EAQAT,MAAMA,CAACN,KAAK,EAAE;IACZA,KAAK,CAACC,cAAc,EAAE;AAEtB,IAAA,IAAID,KAAK,CAACY,YAAY,IAAI,IAAI,CAACI,YAAY,CAAChB,KAAK,CAACY,YAAY,CAAC,EAAE;MAC/D,IAAI,CAACpC,MAAM,CAACyC,KAAK,GAAGjB,KAAK,CAACY,YAAY,CAACK,KAAK;MAK5C,IAAI,CAACzC,MAAM,CAAC0C,aAAa,CAAC,IAAIC,WAAW,CAAC,QAAQ,CAAC,CAAC;MAEpD,IAAI,CAACV,iBAAiB,EAAE;AAC1B,IAAA;AACF,EAAA;EASAO,YAAYA,CAACJ,YAAY,EAAE;IACzB,OAAO,IAAI,CAACQ,oBAAoB,CAACR,YAAY,CAACK,KAAK,CAACtG,MAAM,CAAC;AAC7D,EAAA;EAYAkG,OAAOA,CAACD,YAAY,EAAE;AAEpB,IAAA,IAAIA,YAAY,CAACS,KAAK,CAAC1G,MAAM,EAAE;MAC7B,OAAO,IAAI,CAACyG,oBAAoB,CAACE,cAAc,CAACV,YAAY,CAACS,KAAK,CAAC,CAAC;AACtE,IAAA;AAGA,IAAA,IAAIT,YAAY,CAACW,KAAK,CAAC5G,MAAM,EAAE;AAC7B,MAAA,OAAOiG,YAAY,CAACW,KAAK,CAAC7G,QAAQ,CAAC,OAAO,CAAC;AAC7C,IAAA;AAIA,IAAA,OAAO,IAAI;AACb,EAAA;EASA0G,oBAAoBA,CAACI,aAAa,EAAE;AAClC,IAAA,IAAI,IAAI,CAAChD,MAAM,CAACiD,QAAQ,EAAE;MACxB,OAAOD,aAAa,GAAG,CAAC;AAC1B,IAAA;IAEA,OAAOA,aAAa,KAAK,CAAC;AAC5B,EAAA;AAOArB,EAAAA,QAAQA,GAAG;IACT,MAAMuB,SAAS,GAAG,IAAI,CAAClD,MAAM,CAACyC,KAAK,CAACtG,MAAM;IAE1C,IAAI+G,SAAS,KAAK,CAAC,EAAE;AAEnB,MAAA,IAAI,CAAChD,OAAO,CAACY,SAAS,GAAG,IAAI,CAACX,IAAI,CAAClC,CAAC,CAAC,cAAc,CAAC;MACpD,IAAI,CAACgC,OAAO,CAACpH,SAAS,CAAC8H,GAAG,CAAC,iCAAiC,CAAC;AAC/D,IAAA,CAAC,MAAM;MACL,IAEEuC,SAAS,KAAK,CAAC,EACf;AACA,QAAA,IAAI,CAAChD,OAAO,CAACY,SAAS,GAAG,IAAI,CAACd,MAAM,CAACyC,KAAK,CAAC,CAAC,CAAC,CAAC/I,IAAI;AACpD,MAAA,CAAC,MAAM;AAEL,QAAA,IAAI,CAACwG,OAAO,CAACY,SAAS,GAAG,IAAI,CAACX,IAAI,CAAClC,CAAC,CAAC,qBAAqB,EAAE;AAC1DI,UAAAA,KAAK,EAAE6E;AACT,SAAC,CAAC;AACJ,MAAA;MAEA,IAAI,CAACjD,OAAO,CAACpH,SAAS,CAAC0J,MAAM,CAAC,iCAAiC,CAAC;AAClE,IAAA;AACF,EAAA;AASA9B,EAAAA,SAASA,GAAG;AAEV,IAAA,MAAMD,MAAM,GAAG7H,QAAQ,CAAC4H,aAAa,CAAC,CAAA,WAAA,EAAc,IAAI,CAACP,MAAM,CAACI,EAAE,IAAI,CAAC;IAEvE,IAAI,CAACI,MAAM,EAAE;MACX,MAAM,IAAIxG,YAAY,CAAC;AACrBE,QAAAA,SAAS,EAAE6F,UAAU;AACrB5F,QAAAA,UAAU,EAAE,CAAA,0BAAA,EAA6B,IAAI,CAAC6F,MAAM,CAACI,EAAE,CAAA,IAAA;AACzD,OAAC,CAAC;AACJ,IAAA;AAEA,IAAA,OAAOI,MAAM;AACf,EAAA;AAOAc,EAAAA,OAAOA,GAAG;AACR,IAAA,IAAI,CAACtB,MAAM,CAACmD,KAAK,EAAE;AACrB,EAAA;AAOAtB,EAAAA,oBAAoBA,GAAG;AACrB,IAAA,MAAMuB,QAAQ,GAAG,IAAIC,gBAAgB,CAAEC,YAAY,IAAK;AACtD,MAAA,KAAK,MAAMC,QAAQ,IAAID,YAAY,EAAE;QACnC,IACEC,QAAQ,CAACtH,IAAI,KAAK,YAAY,IAC9BsH,QAAQ,CAACvL,aAAa,KAAK,UAAU,EACrC;UACA,IAAI,CAAC4J,mBAAmB,EAAE;AAC5B,QAAA;AACF,MAAA;AACF,IAAA,CAAC,CAAC;AAEFwB,IAAAA,QAAQ,CAACI,OAAO,CAAC,IAAI,CAACxD,MAAM,EAAE;AAC5ByD,MAAAA,UAAU,EAAE;AACd,KAAC,CAAC;AACJ,EAAA;AAOA7B,EAAAA,mBAAmBA,GAAG;IACpB,IAAI,CAAC3B,OAAO,CAAC+B,QAAQ,GAAG,IAAI,CAAChC,MAAM,CAACgC,QAAQ;AAE5C,IAAA,IAAI,CAAC3J,KAAK,CAACQ,SAAS,CAAC6K,MAAM,CACzB,2BAA2B,EAC3B,IAAI,CAACzD,OAAO,CAAC+B,QACf,CAAC;AACH,EAAA;AAyCF;;AAEA;AACA;AACA;AACA;AACA;AACA;AAteajC,UAAU,CA2bdzH,UAAU,GAAG,mBAAmB;AA3b5ByH,UAAU,CAocd1E,QAAQ,GAAGoB,MAAM,CAACkH,MAAM,CAAC;AAC9BxD,EAAAA,IAAI,EAAE;AACJyD,IAAAA,iBAAiB,EAAE,aAAa;AAChCC,IAAAA,eAAe,EAAE,cAAc;AAC/BC,IAAAA,YAAY,EAAE,gBAAgB;AAC9BC,IAAAA,mBAAmB,EAAE;AAGnBC,MAAAA,GAAG,EAAE,sBAAsB;AAC3BC,MAAAA,KAAK,EAAE;KACR;AACDC,IAAAA,eAAe,EAAE,mBAAmB;AACpCC,IAAAA,YAAY,EAAE;AAChB;AACF,CAAC,CAAC;AAldSpE,UAAU,CA0ddzD,MAAM,GAAGG,MAAM,CAACkH,MAAM,CAAC;AAC5BjH,EAAAA,UAAU,EAAE;AACVyD,IAAAA,IAAI,EAAE;AAAElE,MAAAA,IAAI,EAAE;AAAS;AACzB;AACF,CAAC,CAAC;AASJ,SAAS6G,cAAcA,CAACsB,IAAI,EAAE;EAC5B,IAAIC,MAAM,GAAG,CAAC;AAId,EAAA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACjI,MAAM,EAAEmI,CAAC,EAAE,EAAE;IACpC,IAAIF,IAAI,CAACE,CAAC,CAAC,CAACC,IAAI,KAAK,MAAM,EAAE;AAC3BF,MAAAA,MAAM,EAAE;AACV,IAAA;AACF,EAAA;AACA,EAAA,OAAOA,MAAM;AACf;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;"}