{"version":3,"file":"exit-this-page.bundle.js","sources":["../../../../src/govuk/common/normalise-string.mjs","../../../../src/govuk/common/index.mjs","../../../../src/govuk/common/normalise-dataset.mjs","../../../../src/govuk/errors/index.mjs","../../../../src/govuk/govuk-frontend-component.mjs","../../../../src/govuk/i18n.mjs","../../../../src/govuk/components/exit-this-page/exit-this-page.mjs"],"sourcesContent":["/**\n * Normalise string\n *\n * 'If it looks like a duck, and it quacks like a duckâ€¦' ðŸ¦†\n *\n * If the passed value looks like a boolean or a number, convert it to a boolean\n * or number.\n *\n * Designed to be used to convert config passed via data attributes (which are\n * always strings) into something sensible.\n *\n * @internal\n * @param {DOMStringMap[string]} value - The value to normalise\n * @param {SchemaProperty} [property] - Component schema property\n * @returns {string | boolean | number | undefined} Normalised data\n */\nexport function normaliseString(value, property) {\n  const trimmedValue = value ? value.trim() : ''\n\n  let output\n  let outputType = property?.type\n\n  // No schema type set? Determine automatically\n  if (!outputType) {\n    if (['true', 'false'].includes(trimmedValue)) {\n      outputType = 'boolean'\n    }\n\n    // Empty / whitespace-only strings are considered finite so we need to check\n    // the length of the trimmed string as well\n    if (trimmedValue.length > 0 && isFinite(Number(trimmedValue))) {\n      outputType = 'number'\n    }\n  }\n\n  switch (outputType) {\n    case 'boolean':\n      output = trimmedValue === 'true'\n      break\n\n    case 'number':\n      output = Number(trimmedValue)\n      break\n\n    default:\n      output = value\n  }\n\n  return output\n}\n\n/**\n * @typedef {import('./index.mjs').SchemaProperty} SchemaProperty\n */\n","import { normaliseString } from './normalise-string.mjs'\n\n/**\n * Common helpers which do not require polyfill.\n *\n * IMPORTANT: If a helper require a polyfill, please isolate it in its own module\n * so that the polyfill can be properly tree-shaken and does not burden\n * the components that do not need that helper\n */\n\n/**\n * Config merging function\n *\n * Takes any number of objects and combines them together, with\n * greatest priority on the LAST item passed in.\n *\n * @internal\n * @param {...{ [key: string]: unknown }} configObjects - Config objects to merge\n * @returns {{ [key: string]: unknown }} A merged config object\n */\nexport function mergeConfigs(...configObjects) {\n  // Start with an empty object as our base\n  /** @type {{ [key: string]: unknown }} */\n  const formattedConfigObject = {}\n\n  // Loop through each of the passed objects\n  for (const configObject of configObjects) {\n    for (const key of Object.keys(configObject)) {\n      const option = formattedConfigObject[key]\n      const override = configObject[key]\n\n      // Push their keys one-by-one into formattedConfigObject. Any duplicate\n      // keys with object values will be merged, otherwise the new value will\n      // override the existing value.\n      if (isObject(option) && isObject(override)) {\n        // @ts-expect-error Index signature for type 'string' is missing\n        formattedConfigObject[key] = mergeConfigs(option, override)\n      } else {\n        // Apply override\n        formattedConfigObject[key] = override\n      }\n    }\n  }\n\n  return formattedConfigObject\n}\n\n/**\n * Extracts keys starting with a particular namespace from dataset ('data-*')\n * object, removing the namespace in the process, normalising all values\n *\n * @internal\n * @param {{ schema: Schema }} Component - Component class\n * @param {DOMStringMap} dataset - The object to extract key-value pairs from\n * @param {string} namespace - The namespace to filter keys with\n * @returns {ObjectNested | undefined} Nested object with dot-separated key namespace removed\n */\nexport function extractConfigByNamespace(Component, dataset, namespace) {\n  const property = Component.schema.properties[namespace]\n\n  // Only extract configs for object schema properties\n  if (property?.type !== 'object') {\n    return\n  }\n\n  // Add default empty config\n  const newObject = {\n    [namespace]: /** @type {ObjectNested} */ ({})\n  }\n\n  for (const [key, value] of Object.entries(dataset)) {\n    /** @type {ObjectNested | ObjectNested[NestedKey]} */\n    let current = newObject\n\n    // Split the key into parts, using . as our namespace separator\n    const keyParts = key.split('.')\n\n    /**\n     * Create new level per part\n     *\n     * e.g. 'i18n.textareaDescription.other' becomes\n     * `{ i18n: { textareaDescription: { other } } }`\n     */\n    for (const [index, name] of keyParts.entries()) {\n      if (typeof current === 'object') {\n        // Drop down to nested object until the last part\n        if (index < keyParts.length - 1) {\n          // New nested object (optionally) replaces existing value\n          if (!isObject(current[name])) {\n            current[name] = {}\n          }\n\n          // Drop down into new or existing nested object\n          current = current[name]\n        } else if (key !== namespace) {\n          // Normalised value (optionally) replaces existing value\n          current[name] = normaliseString(value)\n        }\n      }\n    }\n  }\n\n  return newObject[namespace]\n}\n\n/**\n * Get hash fragment from URL\n *\n * Extract the hash fragment (everything after the hash) from a URL,\n * but not including the hash symbol\n *\n * @private\n * @param {string} url - URL\n * @returns {string | undefined} Fragment from URL, without the hash\n */\nexport function getFragmentFromUrl(url) {\n  if (!url.includes('#')) {\n    return undefined\n  }\n\n  return url.split('#').pop()\n}\n\n/**\n * Get GOV.UK Frontend breakpoint value from CSS custom property\n *\n * @private\n * @param {string} name - Breakpoint name\n * @returns {{ property: string, value?: string }} Breakpoint object\n */\nexport function getBreakpoint(name) {\n  const property = `--govuk-frontend-breakpoint-${name}`\n\n  // Get value from `<html>` with breakpoints on CSS :root\n  const value = window\n    .getComputedStyle(document.documentElement)\n    .getPropertyValue(property)\n\n  return {\n    property,\n    value: value || undefined\n  }\n}\n\n/**\n * Move focus to element\n *\n * Sets tabindex to -1 to make the element programmatically focusable,\n * but removes it on blur as the element doesn't need to be focused again.\n *\n * @private\n * @template {HTMLElement} FocusElement\n * @param {FocusElement} $element - HTML element\n * @param {object} [options] - Handler options\n * @param {function(this: FocusElement): void} [options.onBeforeFocus] - Callback before focus\n * @param {function(this: FocusElement): void} [options.onBlur] - Callback on blur\n */\nexport function setFocus($element, options = {}) {\n  const isFocusable = $element.getAttribute('tabindex')\n\n  if (!isFocusable) {\n    $element.setAttribute('tabindex', '-1')\n  }\n\n  /**\n   * Handle element focus\n   */\n  function onFocus() {\n    $element.addEventListener('blur', onBlur, { once: true })\n  }\n\n  /**\n   * Handle element blur\n   */\n  function onBlur() {\n    options.onBlur?.call($element)\n\n    if (!isFocusable) {\n      $element.removeAttribute('tabindex')\n    }\n  }\n\n  // Add listener to reset element on blur, after focus\n  $element.addEventListener('focus', onFocus, { once: true })\n\n  // Focus element\n  options.onBeforeFocus?.call($element)\n  $element.focus()\n}\n\n/**\n * Checks if GOV.UK Frontend is supported on this page\n *\n * Some browsers will load and run our JavaScript but GOV.UK Frontend\n * won't be supported.\n *\n * @internal\n * @param {HTMLElement | null} [$scope] - HTML element `<body>` checked for browser support\n * @returns {boolean} Whether GOV.UK Frontend is supported on this page\n */\nexport function isSupported($scope = document.body) {\n  if (!$scope) {\n    return false\n  }\n\n  return $scope.classList.contains('govuk-frontend-supported')\n}\n\n/**\n * Validate component config by schema\n *\n * Follows limited examples in JSON schema for wider support in future\n *\n * {@link https://ajv.js.org/json-schema.html#compound-keywords}\n * {@link https://ajv.js.org/packages/ajv-errors.html#single-message}\n *\n * @internal\n * @param {Schema} schema - Config schema\n * @param {{ [key: string]: unknown }} config - Component config\n * @returns {string[]} List of validation errors\n */\nexport function validateConfig(schema, config) {\n  const validationErrors = []\n\n  // Check errors for each schema\n  for (const [name, conditions] of Object.entries(schema)) {\n    const errors = []\n\n    // Check errors for each schema condition\n    if (Array.isArray(conditions)) {\n      for (const { required, errorMessage } of conditions) {\n        if (!required.every((key) => !!config[key])) {\n          errors.push(errorMessage) // Missing config key value\n        }\n      }\n\n      // Check one condition passes or add errors\n      if (name === 'anyOf' && !(conditions.length - errors.length >= 1)) {\n        validationErrors.push(...errors)\n      }\n    }\n  }\n\n  return validationErrors\n}\n\n/**\n * Check for an array\n *\n * @internal\n * @param {unknown} option - Option to check\n * @returns {boolean} Whether the option is an array\n */\nfunction isArray(option) {\n  return Array.isArray(option)\n}\n\n/**\n * Check for an object\n *\n * @internal\n * @param {unknown} option - Option to check\n * @returns {boolean} Whether the option is an object\n */\nfunction isObject(option) {\n  return !!option && typeof option === 'object' && !isArray(option)\n}\n\n/**\n * Schema for component config\n *\n * @typedef {object} Schema\n * @property {{ [field: string]: SchemaProperty | undefined }} properties - Schema properties\n * @property {SchemaCondition[]} [anyOf] - List of schema conditions\n */\n\n/**\n * Schema property for component config\n *\n * @typedef {object} SchemaProperty\n * @property {'string' | 'boolean' | 'number' | 'object'} type - Property type\n */\n\n/**\n * Schema condition for component config\n *\n * @typedef {object} SchemaCondition\n * @property {string[]} required - List of required config fields\n * @property {string} errorMessage - Error message when required config fields not provided\n */\n\n/**\n * @internal\n * @typedef {keyof ObjectNested} NestedKey\n * @typedef {{ [key: string]: string | boolean | number | ObjectNested | undefined }} ObjectNested\n */\n","import { extractConfigByNamespace } from './index.mjs'\nimport { normaliseString } from './normalise-string.mjs'\n\n/**\n * Normalise dataset\n *\n * Loop over an object and normalise each value using {@link normaliseString},\n * optionally expanding nested `i18n.field`\n *\n * @internal\n * @param {{ schema: Schema }} Component - Component class\n * @param {DOMStringMap} dataset - HTML element dataset\n * @returns {ObjectNested} Normalised dataset\n */\nexport function normaliseDataset(Component, dataset) {\n  const out = /** @type {ReturnType<typeof normaliseDataset>} */ ({})\n\n  // Normalise top-level dataset ('data-*') values using schema types\n  for (const [field, property] of Object.entries(Component.schema.properties)) {\n    if (field in dataset) {\n      out[field] = normaliseString(dataset[field], property)\n    }\n\n    /**\n     * Extract and normalise nested object values automatically using\n     * {@link normaliseString} but only schema object types are allowed\n     */\n    if (property?.type === 'object') {\n      out[field] = extractConfigByNamespace(Component, dataset, field)\n    }\n  }\n\n  return out\n}\n\n/**\n * @internal\n * @typedef {import('./index.mjs').ObjectNested} ObjectNested\n * @typedef {import('./index.mjs').Schema} Schema\n */\n","/**\n * GOV.UK Frontend error\n *\n * A base class for `Error`s thrown by GOV.UK Frontend.\n *\n * It is meant to be extended into specific types of errors\n * to be thrown by our code.\n *\n * @example\n * ```js\n * class MissingRootError extends GOVUKFrontendError {\n *   // Setting an explicit name is important as extending the class will not\n *   // set a new `name` on the subclass. The `name` property is important\n *   // to ensure intelligible error names even if the class name gets\n *   // mangled by a minifier\n *   name = \"MissingRootError\"\n * }\n * ```\n * @abstract\n */\nexport class GOVUKFrontendError extends Error {\n  name = 'GOVUKFrontendError'\n}\n\n/**\n * Indicates that GOV.UK Frontend is not supported\n */\nexport class SupportError extends GOVUKFrontendError {\n  name = 'SupportError'\n\n  /**\n   * Checks if GOV.UK Frontend is supported on this page\n   *\n   * @param {HTMLElement | null} [$scope] - HTML element `<body>` checked for browser support\n   */\n  constructor($scope = document.body) {\n    const supportMessage =\n      'noModule' in HTMLScriptElement.prototype\n        ? 'GOV.UK Frontend initialised without `<body class=\"govuk-frontend-supported\">` from template `<script>` snippet'\n        : 'GOV.UK Frontend is not supported in this browser'\n\n    super(\n      $scope\n        ? supportMessage\n        : 'GOV.UK Frontend initialised without `<script type=\"module\">`'\n    )\n  }\n}\n\n/**\n * Indicates that a component has received an illegal configuration\n */\nexport class ConfigError extends GOVUKFrontendError {\n  name = 'ConfigError'\n}\n\n/**\n * Indicates an issue with an element (possibly `null` or `undefined`)\n */\nexport class ElementError extends GOVUKFrontendError {\n  name = 'ElementError'\n\n  /**\n   * @internal\n   * @overload\n   * @param {string} message - Element error message\n   */\n\n  /**\n   * @internal\n   * @overload\n   * @param {ElementErrorOptions} options - Element error options\n   */\n\n  /**\n   * @internal\n   * @param {string | ElementErrorOptions} messageOrOptions - Element error message or options\n   */\n  constructor(messageOrOptions) {\n    let message = typeof messageOrOptions === 'string' ? messageOrOptions : ''\n\n    // Build message from options\n    if (typeof messageOrOptions === 'object') {\n      const { componentName, identifier, element, expectedType } =\n        messageOrOptions\n\n      // Add prefix and identifier\n      message = `${componentName}: ${identifier}`\n\n      // Append reason\n      message += element\n        ? ` is not of type ${expectedType ?? 'HTMLElement'}`\n        : ' not found'\n    }\n\n    super(message)\n  }\n}\n\n/**\n * Element error options\n *\n * @internal\n * @typedef {object} ElementErrorOptions\n * @property {string} componentName - The name of the component throwing the error\n * @property {string} identifier - An identifier that'll let the user understand which element has an error. This is whatever makes the most sense\n * @property {Element | null} [element] - The element in error\n * @property {string} [expectedType] - The type that was expected for the identifier\n */\n","import { isSupported } from './common/index.mjs'\nimport { SupportError } from './errors/index.mjs'\n\n/**\n * Base Component class\n *\n * Centralises the behaviours shared by our components\n *\n * @internal\n * @abstract\n */\nexport class GOVUKFrontendComponent {\n  /**\n   * Constructs a new component, validating that GOV.UK Frontend is supported\n   *\n   * @internal\n   */\n  constructor() {\n    this.checkSupport()\n  }\n\n  /**\n   * Validates whether GOV.UK Frontend is supported\n   *\n   * @private\n   * @throws {SupportError} when GOV.UK Frontend is not supported\n   */\n  checkSupport() {\n    if (!isSupported()) {\n      throw new SupportError()\n    }\n  }\n}\n","/**\n * Internal support for selecting messages to render, with placeholder\n * interpolation and locale-aware number formatting and pluralisation\n *\n * @internal\n */\nexport class I18n {\n  translations\n  locale\n\n  /**\n   * @internal\n   * @param {{ [key: string]: string | TranslationPluralForms }} translations - Key-value pairs of the translation strings to use.\n   * @param {object} [config] - Configuration options for the function.\n   * @param {string | null} [config.locale] - An overriding locale for the PluralRules functionality.\n   */\n  constructor(translations = {}, config = {}) {\n    // Make list of translations available throughout function\n    this.translations = translations\n\n    // The locale to use for PluralRules and NumberFormat\n    this.locale = config.locale ?? (document.documentElement.lang || 'en')\n  }\n\n  /**\n   * The most used function - takes the key for a given piece of UI text and\n   * returns the appropriate string.\n   *\n   * @internal\n   * @param {string} lookupKey - The lookup key of the string to use.\n   * @param {{ [key: string]: unknown }} [options] - Any options passed with the translation string, e.g: for string interpolation.\n   * @returns {string} The appropriate translation string.\n   * @throws {Error} Lookup key required\n   * @throws {Error} Options required for `${}` placeholders\n   */\n  t(lookupKey, options) {\n    if (!lookupKey) {\n      // Print a console error if no lookup key has been provided\n      throw new Error('i18n: lookup key missing')\n    }\n\n    // Fetch the translation for that lookup key\n    let translation = this.translations[lookupKey]\n\n    // If the `count` option is set, determine which plural suffix is needed and\n    // change the lookupKey to match. We check to see if it's numeric instead of\n    // falsy, as this could legitimately be 0.\n    if (typeof options?.count === 'number' && typeof translation === 'object') {\n      const translationPluralForm =\n        translation[this.getPluralSuffix(lookupKey, options.count)]\n\n      // Update translation with plural suffix\n      if (translationPluralForm) {\n        translation = translationPluralForm\n      }\n    }\n\n    if (typeof translation === 'string') {\n      // Check for ${} placeholders in the translation string\n      if (translation.match(/%{(.\\S+)}/)) {\n        if (!options) {\n          throw new Error(\n            'i18n: cannot replace placeholders in string if no option data provided'\n          )\n        }\n\n        return this.replacePlaceholders(translation, options)\n      }\n\n      return translation\n    }\n\n    // If the key wasn't found in our translations object,\n    // return the lookup key itself as the fallback\n    return lookupKey\n  }\n\n  /**\n   * Takes a translation string with placeholders, and replaces the placeholders\n   * with the provided data\n   *\n   * @internal\n   * @param {string} translationString - The translation string\n   * @param {{ [key: string]: unknown }} options - Any options passed with the translation string, e.g: for string interpolation.\n   * @returns {string} The translation string to output, with $\\{\\} placeholders replaced\n   */\n  replacePlaceholders(translationString, options) {\n    const formatter = Intl.NumberFormat.supportedLocalesOf(this.locale).length\n      ? new Intl.NumberFormat(this.locale)\n      : undefined\n\n    return translationString.replace(\n      /%{(.\\S+)}/g,\n\n      /**\n       * Replace translation string placeholders\n       *\n       * @internal\n       * @param {string} placeholderWithBraces - Placeholder with braces\n       * @param {string} placeholderKey - Placeholder key\n       * @returns {string} Placeholder value\n       */\n      function (placeholderWithBraces, placeholderKey) {\n        if (Object.prototype.hasOwnProperty.call(options, placeholderKey)) {\n          const placeholderValue = options[placeholderKey]\n\n          // If a user has passed `false` as the value for the placeholder\n          // treat it as though the value should not be displayed\n          if (\n            placeholderValue === false ||\n            (typeof placeholderValue !== 'number' &&\n              typeof placeholderValue !== 'string')\n          ) {\n            return ''\n          }\n\n          // If the placeholder's value is a number, localise the number formatting\n          if (typeof placeholderValue === 'number') {\n            return formatter\n              ? formatter.format(placeholderValue)\n              : `${placeholderValue}`\n          }\n\n          return placeholderValue\n        }\n\n        throw new Error(\n          `i18n: no data found to replace ${placeholderWithBraces} placeholder in string`\n        )\n      }\n    )\n  }\n\n  /**\n   * Check to see if the browser supports Intl.PluralRules\n   *\n   * It requires all conditions to be met in order to be supported:\n   * - The implementation of Intl supports PluralRules (NOT true in Safari 10â€“12)\n   * - The browser/OS has plural rules for the current locale (browser dependent)\n   *\n   * {@link https://browsersl.ist/#q=supports+es6-module+and+not+supports+intl-pluralrules}\n   *\n   * @internal\n   * @returns {boolean} Returns true if all conditions are met. Returns false otherwise.\n   */\n  hasIntlPluralRulesSupport() {\n    return Boolean(\n      'PluralRules' in window.Intl &&\n        Intl.PluralRules.supportedLocalesOf(this.locale).length\n    )\n  }\n\n  /**\n   * Get the appropriate suffix for the plural form.\n   *\n   * Uses Intl.PluralRules (or our own fallback implementation) to get the\n   * 'preferred' form to use for the given count.\n   *\n   * Checks that a translation has been provided for that plural form â€“ if it\n   * hasn't, it'll fall back to the 'other' plural form (unless that doesn't exist\n   * either, in which case an error will be thrown)\n   *\n   * @internal\n   * @param {string} lookupKey - The lookup key of the string to use.\n   * @param {number} count - Number used to determine which pluralisation to use.\n   * @returns {PluralRule} The suffix associated with the correct pluralisation for this locale.\n   * @throws {Error} Plural form `.other` required when preferred plural form is missing\n   */\n  getPluralSuffix(lookupKey, count) {\n    // Validate that the number is actually a number.\n    //\n    // Number(count) will turn anything that can't be converted to a Number type\n    // into 'NaN'. isFinite filters out NaN, as it isn't a finite number.\n    count = Number(count)\n    if (!isFinite(count)) {\n      return 'other'\n    }\n\n    // Fetch the translation for that lookup key\n    const translation = this.translations[lookupKey]\n\n    // Check to verify that all the requirements for Intl.PluralRules are met.\n    // If so, we can use that instead of our custom implementation. Otherwise,\n    // use the hardcoded fallback.\n    const preferredForm = this.hasIntlPluralRulesSupport()\n      ? new Intl.PluralRules(this.locale).select(count)\n      : this.selectPluralFormUsingFallbackRules(count)\n\n    // Use the correct plural form if provided\n    if (typeof translation === 'object') {\n      if (preferredForm in translation) {\n        return preferredForm\n        // Fall back to `other` if the plural form is missing, but log a warning\n        // to the console\n      } else if ('other' in translation) {\n        console.warn(\n          `i18n: Missing plural form \".${preferredForm}\" for \"${this.locale}\" locale. Falling back to \".other\".`\n        )\n\n        return 'other'\n      }\n    }\n\n    // If the required `other` plural form is missing, all we can do is error\n    throw new Error(\n      `i18n: Plural form \".other\" is required for \"${this.locale}\" locale`\n    )\n  }\n\n  /**\n   * Get the plural form using our fallback implementation\n   *\n   * This is split out into a separate function to make it easier to test the\n   * fallback behaviour in an environment where Intl.PluralRules exists.\n   *\n   * @internal\n   * @param {number} count - Number used to determine which pluralisation to use.\n   * @returns {PluralRule} The pluralisation form for count in this locale.\n   */\n  selectPluralFormUsingFallbackRules(count) {\n    // Currently our custom code can only handle positive integers, so let's\n    // make sure our number is one of those.\n    count = Math.abs(Math.floor(count))\n\n    const ruleset = this.getPluralRulesForLocale()\n\n    if (ruleset) {\n      return I18n.pluralRules[ruleset](count)\n    }\n\n    return 'other'\n  }\n\n  /**\n   * Work out which pluralisation rules to use for the current locale\n   *\n   * The locale may include a regional indicator (such as en-GB), but we don't\n   * usually care about this part, as pluralisation rules are usually the same\n   * regardless of region. There are exceptions, however, (e.g. Portuguese) so\n   * this searches by both the full and shortened locale codes, just to be sure.\n   *\n   * @internal\n   * @returns {string | undefined} The name of the pluralisation rule to use (a key for one\n   *   of the functions in this.pluralRules)\n   */\n  getPluralRulesForLocale() {\n    const localeShort = this.locale.split('-')[0]\n\n    // Look through the plural rules map to find which `pluralRule` is\n    // appropriate for our current `locale`.\n    for (const pluralRule in I18n.pluralRulesMap) {\n      const languages = I18n.pluralRulesMap[pluralRule]\n      if (languages.includes(this.locale) || languages.includes(localeShort)) {\n        return pluralRule\n      }\n    }\n  }\n\n  /**\n   * Map of plural rules to languages where those rules apply.\n   *\n   * Note: These groups are named for the most dominant or recognisable language\n   * that uses each system. The groupings do not imply that the languages are\n   * related to one another. Many languages have evolved the same systems\n   * independently of one another.\n   *\n   * Code to support more languages can be found in the i18n spike:\n   * {@link https://github.com/alphagov/govuk-frontend/blob/spike-i18n-support/src/govuk/i18n.mjs}\n   *\n   * Languages currently supported:\n   *\n   * Arabic: Arabic (ar)\n   * Chinese: Burmese (my), Chinese (zh), Indonesian (id), Japanese (ja),\n   *   Javanese (jv), Korean (ko), Malay (ms), Thai (th), Vietnamese (vi)\n   * French: Armenian (hy), Bangla (bn), French (fr), Gujarati (gu), Hindi (hi),\n   *   Persian Farsi (fa), Punjabi (pa), Zulu (zu)\n   * German: Afrikaans (af), Albanian (sq), Azerbaijani (az), Basque (eu),\n   *   Bulgarian (bg), Catalan (ca), Danish (da), Dutch (nl), English (en),\n   *   Estonian (et), Finnish (fi), Georgian (ka), German (de), Greek (el),\n   *   Hungarian (hu), Luxembourgish (lb), Norwegian (no), Somali (so),\n   *   Swahili (sw), Swedish (sv), Tamil (ta), Telugu (te), Turkish (tr),\n   *   Urdu (ur)\n   * Irish: Irish Gaelic (ga)\n   * Russian: Russian (ru), Ukrainian (uk)\n   * Scottish: Scottish Gaelic (gd)\n   * Spanish: European Portuguese (pt-PT), Italian (it), Spanish (es)\n   * Welsh: Welsh (cy)\n   *\n   * @internal\n   * @type {{ [key: string]: string[] }}\n   */\n  static pluralRulesMap = {\n    arabic: ['ar'],\n    chinese: ['my', 'zh', 'id', 'ja', 'jv', 'ko', 'ms', 'th', 'vi'],\n    french: ['hy', 'bn', 'fr', 'gu', 'hi', 'fa', 'pa', 'zu'],\n    german: [\n      'af',\n      'sq',\n      'az',\n      'eu',\n      'bg',\n      'ca',\n      'da',\n      'nl',\n      'en',\n      'et',\n      'fi',\n      'ka',\n      'de',\n      'el',\n      'hu',\n      'lb',\n      'no',\n      'so',\n      'sw',\n      'sv',\n      'ta',\n      'te',\n      'tr',\n      'ur'\n    ],\n    irish: ['ga'],\n    russian: ['ru', 'uk'],\n    scottish: ['gd'],\n    spanish: ['pt-PT', 'it', 'es'],\n    welsh: ['cy']\n  }\n\n  /**\n   * Different pluralisation rule sets\n   *\n   * Returns the appropriate suffix for the plural form associated with `n`.\n   * Possible suffixes: 'zero', 'one', 'two', 'few', 'many', 'other' (the actual\n   * meaning of each differs per locale). 'other' should always exist, even in\n   * languages without plurals, such as Chinese.\n   * {@link https://cldr.unicode.org/index/cldr-spec/plural-rules}\n   *\n   * The count must be a positive integer. Negative numbers and decimals aren't accounted for\n   *\n   * @internal\n   * @type {{ [key: string]: (count: number) => PluralRule }}\n   */\n  static pluralRules = {\n    arabic(n) {\n      if (n === 0) {\n        return 'zero'\n      }\n      if (n === 1) {\n        return 'one'\n      }\n      if (n === 2) {\n        return 'two'\n      }\n      if (n % 100 >= 3 && n % 100 <= 10) {\n        return 'few'\n      }\n      if (n % 100 >= 11 && n % 100 <= 99) {\n        return 'many'\n      }\n      return 'other'\n    },\n    chinese() {\n      return 'other'\n    },\n    french(n) {\n      return n === 0 || n === 1 ? 'one' : 'other'\n    },\n    german(n) {\n      return n === 1 ? 'one' : 'other'\n    },\n    irish(n) {\n      if (n === 1) {\n        return 'one'\n      }\n      if (n === 2) {\n        return 'two'\n      }\n      if (n >= 3 && n <= 6) {\n        return 'few'\n      }\n      if (n >= 7 && n <= 10) {\n        return 'many'\n      }\n      return 'other'\n    },\n    russian(n) {\n      const lastTwo = n % 100\n      const last = lastTwo % 10\n      if (last === 1 && lastTwo !== 11) {\n        return 'one'\n      }\n      if (last >= 2 && last <= 4 && !(lastTwo >= 12 && lastTwo <= 14)) {\n        return 'few'\n      }\n      if (\n        last === 0 ||\n        (last >= 5 && last <= 9) ||\n        (lastTwo >= 11 && lastTwo <= 14)\n      ) {\n        return 'many'\n      }\n      // Note: The 'other' suffix is only used by decimal numbers in Russian.\n      // We don't anticipate it being used, but it's here for consistency.\n      return 'other'\n    },\n    scottish(n) {\n      if (n === 1 || n === 11) {\n        return 'one'\n      }\n      if (n === 2 || n === 12) {\n        return 'two'\n      }\n      if ((n >= 3 && n <= 10) || (n >= 13 && n <= 19)) {\n        return 'few'\n      }\n      return 'other'\n    },\n    spanish(n) {\n      if (n === 1) {\n        return 'one'\n      }\n      if (n % 1000000 === 0 && n !== 0) {\n        return 'many'\n      }\n      return 'other'\n    },\n    welsh(n) {\n      if (n === 0) {\n        return 'zero'\n      }\n      if (n === 1) {\n        return 'one'\n      }\n      if (n === 2) {\n        return 'two'\n      }\n      if (n === 3) {\n        return 'few'\n      }\n      if (n === 6) {\n        return 'many'\n      }\n      return 'other'\n    }\n  }\n}\n\n/**\n * Plural rule category mnemonic tags\n *\n * @internal\n * @typedef {'zero' | 'one' | 'two' | 'few' | 'many' | 'other'} PluralRule\n */\n\n/**\n * Translated message by plural rule they correspond to.\n *\n * Allows to group pluralised messages under a single key when passing\n * translations to a component's constructor\n *\n * @internal\n * @typedef {object} TranslationPluralForms\n * @property {string} [other] - General plural form\n * @property {string} [zero] - Plural form used with 0\n * @property {string} [one] - Plural form used with 1\n * @property {string} [two] - Plural form used with 2\n * @property {string} [few] - Plural form used for a few\n * @property {string} [many] - Plural form used for many\n */\n","import { mergeConfigs } from '../../common/index.mjs'\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\nimport { I18n } from '../../i18n.mjs'\n\n/**\n * Exit this page component\n *\n * @preserve\n */\nexport class ExitThisPage extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /**\n   * @private\n   * @type {ExitThisPageConfig}\n   */\n  config\n\n  /** @private */\n  i18n\n\n  /** @private */\n  $button\n\n  /**\n   * @private\n   * @type {HTMLAnchorElement | null}\n   */\n  $skiplinkButton = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $updateSpan = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $indicatorContainer = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $overlay = null\n\n  /** @private */\n  keypressCounter = 0\n\n  /** @private */\n  lastKeyWasModified = false\n\n  /** @private */\n  timeoutTime = 5000 // milliseconds\n\n  // Store the timeout events so that we can clear them to avoid user keypresses overlapping\n  // setTimeout returns an id that we can use to clear it with clearTimeout,\n  // hence the 'Id' suffix\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  keypressTimeoutId = null\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  timeoutMessageId = null\n\n  /**\n   * @param {Element | null} $module - HTML element that wraps the Exit This Page button\n   * @param {ExitThisPageConfig} [config] - Exit This Page config\n   */\n  constructor($module, config = {}) {\n    super()\n\n    if (!($module instanceof HTMLElement)) {\n      throw new ElementError({\n        componentName: 'Exit this page',\n        element: $module,\n        identifier: 'Root element (`$module`)'\n      })\n    }\n\n    const $button = $module.querySelector('.govuk-exit-this-page__button')\n    if (!($button instanceof HTMLAnchorElement)) {\n      throw new ElementError({\n        componentName: 'Exit this page',\n        element: $button,\n        expectedType: 'HTMLAnchorElement',\n        identifier: 'Button (`.govuk-exit-this-page__button`)'\n      })\n    }\n\n    this.config = mergeConfigs(\n      ExitThisPage.defaults,\n      config,\n      normaliseDataset(ExitThisPage, $module.dataset)\n    )\n\n    this.i18n = new I18n(this.config.i18n)\n    this.$module = $module\n    this.$button = $button\n\n    const $skiplinkButton = document.querySelector(\n      '.govuk-js-exit-this-page-skiplink'\n    )\n    if ($skiplinkButton instanceof HTMLAnchorElement) {\n      this.$skiplinkButton = $skiplinkButton\n    }\n\n    this.buildIndicator()\n    this.initUpdateSpan()\n    this.initButtonClickHandler()\n\n    // Check to see if this has already been done by a previous initialisation of ExitThisPage\n    if (!('govukFrontendExitThisPageKeypress' in document.body.dataset)) {\n      document.addEventListener('keyup', this.handleKeypress.bind(this), true)\n      document.body.dataset.govukFrontendExitThisPageKeypress = 'true'\n    }\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // blank overlay remains present, rendering the page unusable. Here, we check\n    // to see if it's present on page (re)load, and remove it if so.\n    window.addEventListener('pageshow', this.resetPage.bind(this))\n  }\n\n  /**\n   * Create the <span> we use for screen reader announcements.\n   *\n   * @private\n   */\n  initUpdateSpan() {\n    this.$updateSpan = document.createElement('span')\n    this.$updateSpan.setAttribute('role', 'status')\n    this.$updateSpan.className = 'govuk-visually-hidden'\n\n    this.$module.appendChild(this.$updateSpan)\n  }\n\n  /**\n   * Create button click handlers.\n   *\n   * @private\n   */\n  initButtonClickHandler() {\n    // Main EtP button\n    this.$button.addEventListener('click', this.handleClick.bind(this))\n\n    // EtP secondary link\n    if (this.$skiplinkButton) {\n      this.$skiplinkButton.addEventListener(\n        'click',\n        this.handleClick.bind(this)\n      )\n    }\n  }\n\n  /**\n   * Create the HTML for the 'three lights' indicator on the button.\n   *\n   * @private\n   */\n  buildIndicator() {\n    // Build container\n    // Putting `aria-hidden` on it as it won't contain any readable information\n    this.$indicatorContainer = document.createElement('div')\n    this.$indicatorContainer.className = 'govuk-exit-this-page__indicator'\n    this.$indicatorContainer.setAttribute('aria-hidden', 'true')\n\n    // Create three 'lights' and place them within the container\n    for (let i = 0; i < 3; i++) {\n      const $indicator = document.createElement('div')\n      $indicator.className = 'govuk-exit-this-page__indicator-light'\n      this.$indicatorContainer.appendChild($indicator)\n    }\n\n    // Append it all to the module\n    this.$button.appendChild(this.$indicatorContainer)\n  }\n\n  /**\n   * Update whether the lights are visible and which ones are lit up depending on\n   * the value of `keypressCounter`.\n   *\n   * @private\n   */\n  updateIndicator() {\n    if (!this.$indicatorContainer) {\n      return\n    }\n\n    // Show or hide the indicator container depending on keypressCounter value\n    this.$indicatorContainer.classList.toggle(\n      'govuk-exit-this-page__indicator--visible',\n      this.keypressCounter > 0\n    )\n\n    // Turn on only the indicators we want on\n    const $indicators = this.$indicatorContainer.querySelectorAll(\n      '.govuk-exit-this-page__indicator-light'\n    )\n    $indicators.forEach(($indicator, index) => {\n      $indicator.classList.toggle(\n        'govuk-exit-this-page__indicator-light--on',\n        index < this.keypressCounter\n      )\n    })\n  }\n\n  /**\n   * Initiates the redirection away from the current page.\n   * Includes the loading overlay functionality, which covers the current page with a\n   * white overlay so that the contents are not visible during the loading\n   * process. This is particularly important on slow network connections.\n   *\n   * @private\n   */\n  exitPage() {\n    if (!this.$updateSpan) {\n      return\n    }\n\n    this.$updateSpan.textContent = ''\n\n    // Blank the page\n    // As well as creating an overlay with text, we also set the body to hidden\n    // to prevent screen reader and sequential navigation users potentially\n    // navigating through the page behind the overlay during loading\n    document.body.classList.add('govuk-exit-this-page-hide-content')\n    this.$overlay = document.createElement('div')\n    this.$overlay.className = 'govuk-exit-this-page-overlay'\n    this.$overlay.setAttribute('role', 'alert')\n\n    // we do these this way round, thus incurring a second paint, because changing\n    // the element text after adding it means that screen readers pick up the\n    // announcement more reliably.\n    document.body.appendChild(this.$overlay)\n    this.$overlay.textContent = this.i18n.t('activated')\n\n    window.location.href = this.$button.href\n  }\n\n  /**\n   * Pre-activation logic for when the button is clicked/activated via mouse or\n   * pointer.\n   *\n   * We do this to differentiate it from the keyboard activation event because we\n   * need to run `e.preventDefault` as the button or skiplink are both links and we\n   * want to apply some additional logic in `exitPage` before navigating.\n   *\n   * @private\n   * @param {MouseEvent} event - mouse click event\n   */\n  handleClick(event) {\n    event.preventDefault()\n    this.exitPage()\n  }\n\n  /**\n   * Logic for the 'quick escape' keyboard sequence functionality (pressing the\n   * Shift key three times without interruption, within a time limit).\n   *\n   * @private\n   * @param {KeyboardEvent} event - keyup event\n   */\n  handleKeypress(event) {\n    if (!this.$updateSpan) {\n      return\n    }\n\n    // Detect if the 'Shift' key has been pressed. We want to only do things if it\n    // was pressed by itself and not in a combination with another keyâ€”so we keep\n    // track of whether the preceding keyup had shiftKey: true on it, and if it\n    // did, we ignore the next Shift keyup event.\n    //\n    // This works because using Shift as a modifier key (e.g. pressing Shift + A)\n    // will fire TWO keyup events, one for A (with e.shiftKey: true) and the other\n    // for Shift (with e.shiftKey: false).\n    if (event.key === 'Shift' && !this.lastKeyWasModified) {\n      this.keypressCounter += 1\n\n      // Update the indicator before the below if statement can reset it back to 0\n      this.updateIndicator()\n\n      // Clear the timeout for the keypress timeout message clearing itself\n      if (this.timeoutMessageId) {\n        window.clearTimeout(this.timeoutMessageId)\n        this.timeoutMessageId = null\n      }\n\n      if (this.keypressCounter >= 3) {\n        this.keypressCounter = 0\n\n        if (this.keypressTimeoutId) {\n          window.clearTimeout(this.keypressTimeoutId)\n          this.keypressTimeoutId = null\n        }\n\n        this.exitPage()\n      } else {\n        if (this.keypressCounter === 1) {\n          this.$updateSpan.textContent = this.i18n.t('pressTwoMoreTimes')\n        } else {\n          this.$updateSpan.textContent = this.i18n.t('pressOneMoreTime')\n        }\n      }\n\n      this.setKeypressTimer()\n    } else if (this.keypressTimeoutId) {\n      // If the user pressed any key other than 'Shift', after having pressed\n      // 'Shift' and activating the timer, stop and reset the timer.\n      this.resetKeypressTimer()\n    }\n\n    // Keep track of whether the Shift modifier key was held during this keypress\n    this.lastKeyWasModified = event.shiftKey\n  }\n\n  /**\n   * Starts the 'quick escape' keyboard sequence timer.\n   *\n   * This can be invoked several times. We want this to be possible so that the\n   * timer is restarted each time the shortcut key is pressed (e.g. the user has\n   * up to n seconds between each keypress, rather than n seconds to invoke the\n   * entire sequence.)\n   *\n   * @private\n   */\n  setKeypressTimer() {\n    // Clear any existing timeout. This is so only one timer is running even if\n    // there are multiple keypresses in quick succession.\n    if (this.keypressTimeoutId) {\n      window.clearTimeout(this.keypressTimeoutId)\n    }\n\n    // Set a fresh timeout\n    this.keypressTimeoutId = window.setTimeout(\n      this.resetKeypressTimer.bind(this),\n      this.timeoutTime\n    )\n  }\n\n  /**\n   * Stops and resets the 'quick escape' keyboard sequence timer.\n   *\n   * @private\n   */\n  resetKeypressTimer() {\n    if (!this.$updateSpan) {\n      return\n    }\n\n    if (this.keypressTimeoutId) {\n      window.clearTimeout(this.keypressTimeoutId)\n      this.keypressTimeoutId = null\n    }\n\n    const $updateSpan = this.$updateSpan\n\n    this.keypressCounter = 0\n    $updateSpan.textContent = this.i18n.t('timedOut')\n\n    this.timeoutMessageId = window.setTimeout(() => {\n      $updateSpan.textContent = ''\n    }, this.timeoutTime)\n\n    this.updateIndicator()\n  }\n\n  /**\n   * Reset the page using the EtP button\n   *\n   * We use this in situations where a user may re-enter a page using the browser\n   * back button. In these cases, the browser can choose to restore the state of\n   * the page as it was previously, including restoring the 'ghost page' overlay,\n   * the announcement span having it's role set to \"alert\" and the keypress\n   * indicator still active, leaving the page in an unusable state.\n   *\n   * By running this check when the page is shown, we can programatically restore\n   * the page and the component to a \"default\" state\n   *\n   * @private\n   */\n  resetPage() {\n    // If an overlay is set, remove it and reset the value\n    document.body.classList.remove('govuk-exit-this-page-hide-content')\n\n    if (this.$overlay) {\n      this.$overlay.remove()\n      this.$overlay = null\n    }\n\n    // Ensure the announcement span's role is status, not alert and clear any text\n    if (this.$updateSpan) {\n      this.$updateSpan.setAttribute('role', 'status')\n      this.$updateSpan.textContent = ''\n    }\n\n    // Sync the keypress indicator lights\n    this.updateIndicator()\n\n    // If the timeouts are active, clear them\n    if (this.keypressTimeoutId) {\n      window.clearTimeout(this.keypressTimeoutId)\n    }\n\n    if (this.timeoutMessageId) {\n      window.clearTimeout(this.timeoutMessageId)\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-exit-this-page'\n\n  /**\n   * Exit this page default config\n   *\n   * @see {@link ExitThisPageConfig}\n   * @constant\n   * @type {ExitThisPageConfig}\n   */\n  static defaults = Object.freeze({\n    i18n: {\n      activated: 'Loading.',\n      timedOut: 'Exit this page expired.',\n      pressTwoMoreTimes: 'Shift, press 2 more times to exit.',\n      pressOneMoreTime: 'Shift, press 1 more time to exit.'\n    }\n  })\n\n  /**\n   * Exit this page config schema\n   *\n   * @constant\n   * @satisfies {Schema}\n   */\n  static schema = Object.freeze({\n    properties: {\n      i18n: { type: 'object' }\n    }\n  })\n}\n\n/**\n * Exit this Page config\n *\n * @see {@link ExitThisPage.defaults}\n * @typedef {object} ExitThisPageConfig\n * @property {ExitThisPageTranslations} [i18n=ExitThisPage.defaults.i18n] - Exit this page translations\n */\n\n/**\n * Exit this Page translations\n *\n * @see {@link ExitThisPage.defaults.i18n}\n * @typedef {object} ExitThisPageTranslations\n *\n * Messages used by the component programatically inserted text, including\n * overlay text and screen reader announcements.\n * @property {string} [activated] - Screen reader announcement for when EtP\n *   keypress functionality has been successfully activated.\n * @property {string} [timedOut] - Screen reader announcement for when the EtP\n *   keypress functionality has timed out.\n * @property {string} [pressTwoMoreTimes] - Screen reader announcement informing\n *   the user they must press the activation key two more times.\n * @property {string} [pressOneMoreTime] - Screen reader announcement informing\n *   the user they must press the activation key one more time.\n */\n\n/**\n * @typedef {import('../../common/index.mjs').Schema} Schema\n */\n"],"names":["normaliseString","value","property","trimmedValue","trim","output","outputType","type","includes","length","isFinite","Number","mergeConfigs","configObjects","formattedConfigObject","configObject","key","Object","keys","option","override","isObject","extractConfigByNamespace","Component","dataset","namespace","schema","properties","newObject","entries","current","keyParts","split","index","name","isSupported","$scope","document","body","classList","contains","isArray","Array","normaliseDataset","out","field","GOVUKFrontendError","Error","constructor","args","SupportError","supportMessage","HTMLScriptElement","prototype","ElementError","messageOrOptions","message","componentName","identifier","element","expectedType","GOVUKFrontendComponent","checkSupport","I18n","translations","config","_config$locale","locale","documentElement","lang","t","lookupKey","options","translation","count","translationPluralForm","getPluralSuffix","match","replacePlaceholders","translationString","formatter","Intl","NumberFormat","supportedLocalesOf","undefined","replace","placeholderWithBraces","placeholderKey","hasOwnProperty","call","placeholderValue","format","hasIntlPluralRulesSupport","Boolean","window","PluralRules","preferredForm","select","selectPluralFormUsingFallbackRules","console","warn","Math","abs","floor","ruleset","getPluralRulesForLocale","pluralRules","localeShort","pluralRule","pluralRulesMap","languages","arabic","chinese","french","german","irish","russian","scottish","spanish","welsh","n","lastTwo","last","ExitThisPage","$module","i18n","$button","$skiplinkButton","$updateSpan","$indicatorContainer","$overlay","keypressCounter","lastKeyWasModified","timeoutTime","keypressTimeoutId","timeoutMessageId","HTMLElement","querySelector","HTMLAnchorElement","defaults","buildIndicator","initUpdateSpan","initButtonClickHandler","addEventListener","handleKeypress","bind","govukFrontendExitThisPageKeypress","resetPage","createElement","setAttribute","className","appendChild","handleClick","i","$indicator","updateIndicator","toggle","$indicators","querySelectorAll","forEach","exitPage","textContent","add","location","href","event","preventDefault","clearTimeout","setKeypressTimer","resetKeypressTimer","shiftKey","setTimeout","remove","moduleName","freeze","activated","timedOut","pressTwoMoreTimes","pressOneMoreTime"],"mappings":";;;;;;EAgBO,SAASA,eAAeA,CAACC,KAAK,EAAEC,QAAQ,EAAE;IAC/C,MAAMC,YAAY,GAAGF,KAAK,GAAGA,KAAK,CAACG,IAAI,EAAE,GAAG,EAAE,CAAA;EAE9C,EAAA,IAAIC,MAAM,CAAA;EACV,EAAA,IAAIC,UAAU,GAAGJ,QAAQ,IAARA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,QAAQ,CAAEK,IAAI,CAAA;IAG/B,IAAI,CAACD,UAAU,EAAE;MACf,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CAACE,QAAQ,CAACL,YAAY,CAAC,EAAE;EAC5CG,MAAAA,UAAU,GAAG,SAAS,CAAA;EACxB,KAAA;EAIA,IAAA,IAAIH,YAAY,CAACM,MAAM,GAAG,CAAC,IAAIC,QAAQ,CAACC,MAAM,CAACR,YAAY,CAAC,CAAC,EAAE;EAC7DG,MAAAA,UAAU,GAAG,QAAQ,CAAA;EACvB,KAAA;EACF,GAAA;EAEA,EAAA,QAAQA,UAAU;EAChB,IAAA,KAAK,SAAS;QACZD,MAAM,GAAGF,YAAY,KAAK,MAAM,CAAA;EAChC,MAAA,MAAA;EAEF,IAAA,KAAK,QAAQ;EACXE,MAAAA,MAAM,GAAGM,MAAM,CAACR,YAAY,CAAC,CAAA;EAC7B,MAAA,MAAA;EAEF,IAAA;EACEE,MAAAA,MAAM,GAAGJ,KAAK,CAAA;EAClB,GAAA;EAEA,EAAA,OAAOI,MAAM,CAAA;EACf,CAAA;;EAEA;EACA;EACA;;ECjCO,SAASO,YAAYA,CAAC,GAAGC,aAAa,EAAE;IAG7C,MAAMC,qBAAqB,GAAG,EAAE,CAAA;EAGhC,EAAA,KAAK,MAAMC,YAAY,IAAIF,aAAa,EAAE;MACxC,KAAK,MAAMG,GAAG,IAAIC,MAAM,CAACC,IAAI,CAACH,YAAY,CAAC,EAAE;EAC3C,MAAA,MAAMI,MAAM,GAAGL,qBAAqB,CAACE,GAAG,CAAC,CAAA;EACzC,MAAA,MAAMI,QAAQ,GAAGL,YAAY,CAACC,GAAG,CAAC,CAAA;QAKlC,IAAIK,QAAQ,CAACF,MAAM,CAAC,IAAIE,QAAQ,CAACD,QAAQ,CAAC,EAAE;UAE1CN,qBAAqB,CAACE,GAAG,CAAC,GAAGJ,YAAY,CAACO,MAAM,EAAEC,QAAQ,CAAC,CAAA;EAC7D,OAAC,MAAM;EAELN,QAAAA,qBAAqB,CAACE,GAAG,CAAC,GAAGI,QAAQ,CAAA;EACvC,OAAA;EACF,KAAA;EACF,GAAA;EAEA,EAAA,OAAON,qBAAqB,CAAA;EAC9B,CAAA;EAYO,SAASQ,wBAAwBA,CAACC,SAAS,EAAEC,OAAO,EAAEC,SAAS,EAAE;IACtE,MAAMvB,QAAQ,GAAGqB,SAAS,CAACG,MAAM,CAACC,UAAU,CAACF,SAAS,CAAC,CAAA;IAGvD,IAAI,CAAAvB,QAAQ,IAARA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,QAAQ,CAAEK,IAAI,MAAK,QAAQ,EAAE;EAC/B,IAAA,OAAA;EACF,GAAA;EAGA,EAAA,MAAMqB,SAAS,GAAG;MAChB,CAACH,SAAS,IAAgC,EAAE,CAAA;KAC7C,CAAA;EAED,EAAA,KAAK,MAAM,CAACT,GAAG,EAAEf,KAAK,CAAC,IAAIgB,MAAM,CAACY,OAAO,CAACL,OAAO,CAAC,EAAE;MAElD,IAAIM,OAAO,GAAGF,SAAS,CAAA;EAGvB,IAAA,MAAMG,QAAQ,GAAGf,GAAG,CAACgB,KAAK,CAAC,GAAG,CAAC,CAAA;EAQ/B,IAAA,KAAK,MAAM,CAACC,KAAK,EAAEC,IAAI,CAAC,IAAIH,QAAQ,CAACF,OAAO,EAAE,EAAE;EAC9C,MAAA,IAAI,OAAOC,OAAO,KAAK,QAAQ,EAAE;EAE/B,QAAA,IAAIG,KAAK,GAAGF,QAAQ,CAACtB,MAAM,GAAG,CAAC,EAAE;YAE/B,IAAI,CAACY,QAAQ,CAACS,OAAO,CAACI,IAAI,CAAC,CAAC,EAAE;EAC5BJ,YAAAA,OAAO,CAACI,IAAI,CAAC,GAAG,EAAE,CAAA;EACpB,WAAA;EAGAJ,UAAAA,OAAO,GAAGA,OAAO,CAACI,IAAI,CAAC,CAAA;EACzB,SAAC,MAAM,IAAIlB,GAAG,KAAKS,SAAS,EAAE;EAE5BK,UAAAA,OAAO,CAACI,IAAI,CAAC,GAAGlC,eAAe,CAACC,KAAK,CAAC,CAAA;EACxC,SAAA;EACF,OAAA;EACF,KAAA;EACF,GAAA;IAEA,OAAO2B,SAAS,CAACH,SAAS,CAAC,CAAA;EAC7B,CAAA;EAiGO,SAASU,WAAWA,CAACC,MAAM,GAAGC,QAAQ,CAACC,IAAI,EAAE;IAClD,IAAI,CAACF,MAAM,EAAE;EACX,IAAA,OAAO,KAAK,CAAA;EACd,GAAA;EAEA,EAAA,OAAOA,MAAM,CAACG,SAAS,CAACC,QAAQ,CAAC,0BAA0B,CAAC,CAAA;EAC9D,CAAA;EA+CA,SAASC,OAAOA,CAACtB,MAAM,EAAE;EACvB,EAAA,OAAOuB,KAAK,CAACD,OAAO,CAACtB,MAAM,CAAC,CAAA;EAC9B,CAAA;EASA,SAASE,QAAQA,CAACF,MAAM,EAAE;EACxB,EAAA,OAAO,CAAC,CAACA,MAAM,IAAI,OAAOA,MAAM,KAAK,QAAQ,IAAI,CAACsB,OAAO,CAACtB,MAAM,CAAC,CAAA;EACnE,CAAA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;ECnRO,SAASwB,gBAAgBA,CAACpB,SAAS,EAAEC,OAAO,EAAE;IACnD,MAAMoB,GAAG,GAAuD,EAAG,CAAA;EAGnE,EAAA,KAAK,MAAM,CAACC,KAAK,EAAE3C,QAAQ,CAAC,IAAIe,MAAM,CAACY,OAAO,CAACN,SAAS,CAACG,MAAM,CAACC,UAAU,CAAC,EAAE;MAC3E,IAAIkB,KAAK,IAAIrB,OAAO,EAAE;EACpBoB,MAAAA,GAAG,CAACC,KAAK,CAAC,GAAG7C,eAAe,CAACwB,OAAO,CAACqB,KAAK,CAAC,EAAE3C,QAAQ,CAAC,CAAA;EACxD,KAAA;MAMA,IAAI,CAAAA,QAAQ,IAARA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,QAAQ,CAAEK,IAAI,MAAK,QAAQ,EAAE;QAC/BqC,GAAG,CAACC,KAAK,CAAC,GAAGvB,wBAAwB,CAACC,SAAS,EAAEC,OAAO,EAAEqB,KAAK,CAAC,CAAA;EAClE,KAAA;EACF,GAAA;EAEA,EAAA,OAAOD,GAAG,CAAA;EACZ;;ECbO,MAAME,kBAAkB,SAASC,KAAK,CAAC;EAAAC,EAAAA,WAAAA,CAAA,GAAAC,IAAA,EAAA;EAAA,IAAA,KAAA,CAAA,GAAAA,IAAA,CAAA,CAAA;MAAA,IAC5Cf,CAAAA,IAAI,GAAG,oBAAoB,CAAA;EAAA,GAAA;EAC7B,CAAA;EAKO,MAAMgB,YAAY,SAASJ,kBAAkB,CAAC;EAGnD;EACF;EACA;EACA;EACA;EACEE,EAAAA,WAAWA,CAACZ,MAAM,GAAGC,QAAQ,CAACC,IAAI,EAAE;MAClC,MAAMa,cAAc,GAClB,UAAU,IAAIC,iBAAiB,CAACC,SAAS,GACrC,gHAAgH,GAChH,kDAAkD,CAAA;EAExD,IAAA,KAAK,CACHjB,MAAM,GACFe,cAAc,GACd,8DACN,CAAC,CAAA;MAAA,IAjBHjB,CAAAA,IAAI,GAAG,cAAc,CAAA;EAkBrB,GAAA;EACF,CAAA;EAYO,MAAMoB,YAAY,SAASR,kBAAkB,CAAC;IAmBnDE,WAAWA,CAACO,gBAAgB,EAAE;MAC5B,IAAIC,OAAO,GAAG,OAAOD,gBAAgB,KAAK,QAAQ,GAAGA,gBAAgB,GAAG,EAAE,CAAA;EAG1E,IAAA,IAAI,OAAOA,gBAAgB,KAAK,QAAQ,EAAE;QACxC,MAAM;UAAEE,aAAa;UAAEC,UAAU;UAAEC,OAAO;EAAEC,QAAAA,YAAAA;EAAa,OAAC,GACxDL,gBAAgB,CAAA;EAGlBC,MAAAA,OAAO,GAAG,CAAA,EAAGC,aAAa,CAAA,EAAA,EAAKC,UAAU,CAAE,CAAA,CAAA;QAG3CF,OAAO,IAAIG,OAAO,GACd,CAAmBC,gBAAAA,EAAAA,YAAY,IAAZA,IAAAA,GAAAA,YAAY,GAAI,aAAa,CAAE,CAAA,GAClD,YAAY,CAAA;EAClB,KAAA;MAEA,KAAK,CAACJ,OAAO,CAAC,CAAA;MAAA,IAnChBtB,CAAAA,IAAI,GAAG,cAAc,CAAA;EAoCrB,GAAA;EACF;;ECtFO,MAAM2B,sBAAsB,CAAC;EAMlCb,EAAAA,WAAWA,GAAG;MACZ,IAAI,CAACc,YAAY,EAAE,CAAA;EACrB,GAAA;EAQAA,EAAAA,YAAYA,GAAG;EACb,IAAA,IAAI,CAAC3B,WAAW,EAAE,EAAE;QAClB,MAAM,IAAIe,YAAY,EAAE,CAAA;EAC1B,KAAA;EACF,GAAA;EACF;;EC1BO,MAAMa,IAAI,CAAC;IAUhBf,WAAWA,CAACgB,YAAY,GAAG,EAAE,EAAEC,MAAM,GAAG,EAAE,EAAE;EAAA,IAAA,IAAAC,cAAA,CAAA;EAAA,IAAA,IAAA,CAT5CF,YAAY,GAAA,KAAA,CAAA,CAAA;EAAA,IAAA,IAAA,CACZG,MAAM,GAAA,KAAA,CAAA,CAAA;MAUJ,IAAI,CAACH,YAAY,GAAGA,YAAY,CAAA;EAGhC,IAAA,IAAI,CAACG,MAAM,GAAA,CAAAD,cAAA,GAAGD,MAAM,CAACE,MAAM,KAAAD,IAAAA,GAAAA,cAAA,GAAK7B,QAAQ,CAAC+B,eAAe,CAACC,IAAI,IAAI,IAAK,CAAA;EACxE,GAAA;EAaAC,EAAAA,CAACA,CAACC,SAAS,EAAEC,OAAO,EAAE;MACpB,IAAI,CAACD,SAAS,EAAE;EAEd,MAAA,MAAM,IAAIxB,KAAK,CAAC,0BAA0B,CAAC,CAAA;EAC7C,KAAA;EAGA,IAAA,IAAI0B,WAAW,GAAG,IAAI,CAACT,YAAY,CAACO,SAAS,CAAC,CAAA;EAK9C,IAAA,IAAI,QAAOC,OAAO,IAAPA,IAAAA,GAAAA,KAAAA,CAAAA,GAAAA,OAAO,CAAEE,KAAK,CAAK,KAAA,QAAQ,IAAI,OAAOD,WAAW,KAAK,QAAQ,EAAE;EACzE,MAAA,MAAME,qBAAqB,GACzBF,WAAW,CAAC,IAAI,CAACG,eAAe,CAACL,SAAS,EAAEC,OAAO,CAACE,KAAK,CAAC,CAAC,CAAA;EAG7D,MAAA,IAAIC,qBAAqB,EAAE;EACzBF,QAAAA,WAAW,GAAGE,qBAAqB,CAAA;EACrC,OAAA;EACF,KAAA;EAEA,IAAA,IAAI,OAAOF,WAAW,KAAK,QAAQ,EAAE;EAEnC,MAAA,IAAIA,WAAW,CAACI,KAAK,CAAC,WAAW,CAAC,EAAE;UAClC,IAAI,CAACL,OAAO,EAAE;EACZ,UAAA,MAAM,IAAIzB,KAAK,CACb,wEACF,CAAC,CAAA;EACH,SAAA;EAEA,QAAA,OAAO,IAAI,CAAC+B,mBAAmB,CAACL,WAAW,EAAED,OAAO,CAAC,CAAA;EACvD,OAAA;EAEA,MAAA,OAAOC,WAAW,CAAA;EACpB,KAAA;EAIA,IAAA,OAAOF,SAAS,CAAA;EAClB,GAAA;EAWAO,EAAAA,mBAAmBA,CAACC,iBAAiB,EAAEP,OAAO,EAAE;MAC9C,MAAMQ,SAAS,GAAGC,IAAI,CAACC,YAAY,CAACC,kBAAkB,CAAC,IAAI,CAAChB,MAAM,CAAC,CAAC1D,MAAM,GACtE,IAAIwE,IAAI,CAACC,YAAY,CAAC,IAAI,CAACf,MAAM,CAAC,GAClCiB,SAAS,CAAA;MAEb,OAAOL,iBAAiB,CAACM,OAAO,CAC9B,YAAY,EAUZ,UAAUC,qBAAqB,EAAEC,cAAc,EAAE;EAC/C,MAAA,IAAItE,MAAM,CAACoC,SAAS,CAACmC,cAAc,CAACC,IAAI,CAACjB,OAAO,EAAEe,cAAc,CAAC,EAAE;EACjE,QAAA,MAAMG,gBAAgB,GAAGlB,OAAO,CAACe,cAAc,CAAC,CAAA;EAIhD,QAAA,IACEG,gBAAgB,KAAK,KAAK,IACzB,OAAOA,gBAAgB,KAAK,QAAQ,IACnC,OAAOA,gBAAgB,KAAK,QAAS,EACvC;EACA,UAAA,OAAO,EAAE,CAAA;EACX,SAAA;EAGA,QAAA,IAAI,OAAOA,gBAAgB,KAAK,QAAQ,EAAE;YACxC,OAAOV,SAAS,GACZA,SAAS,CAACW,MAAM,CAACD,gBAAgB,CAAC,GAClC,CAAGA,EAAAA,gBAAgB,CAAE,CAAA,CAAA;EAC3B,SAAA;EAEA,QAAA,OAAOA,gBAAgB,CAAA;EACzB,OAAA;EAEA,MAAA,MAAM,IAAI3C,KAAK,CACb,CAAkCuC,+BAAAA,EAAAA,qBAAqB,wBACzD,CAAC,CAAA;EACH,KACF,CAAC,CAAA;EACH,GAAA;EAcAM,EAAAA,yBAAyBA,GAAG;MAC1B,OAAOC,OAAO,CACZ,aAAa,IAAIC,MAAM,CAACb,IAAI,IAC1BA,IAAI,CAACc,WAAW,CAACZ,kBAAkB,CAAC,IAAI,CAAChB,MAAM,CAAC,CAAC1D,MACrD,CAAC,CAAA;EACH,GAAA;EAkBAmE,EAAAA,eAAeA,CAACL,SAAS,EAAEG,KAAK,EAAE;EAKhCA,IAAAA,KAAK,GAAG/D,MAAM,CAAC+D,KAAK,CAAC,CAAA;EACrB,IAAA,IAAI,CAAChE,QAAQ,CAACgE,KAAK,CAAC,EAAE;EACpB,MAAA,OAAO,OAAO,CAAA;EAChB,KAAA;EAGA,IAAA,MAAMD,WAAW,GAAG,IAAI,CAACT,YAAY,CAACO,SAAS,CAAC,CAAA;EAKhD,IAAA,MAAMyB,aAAa,GAAG,IAAI,CAACJ,yBAAyB,EAAE,GAClD,IAAIX,IAAI,CAACc,WAAW,CAAC,IAAI,CAAC5B,MAAM,CAAC,CAAC8B,MAAM,CAACvB,KAAK,CAAC,GAC/C,IAAI,CAACwB,kCAAkC,CAACxB,KAAK,CAAC,CAAA;EAGlD,IAAA,IAAI,OAAOD,WAAW,KAAK,QAAQ,EAAE;QACnC,IAAIuB,aAAa,IAAIvB,WAAW,EAAE;EAChC,QAAA,OAAOuB,aAAa,CAAA;EAGtB,OAAC,MAAM,IAAI,OAAO,IAAIvB,WAAW,EAAE;UACjC0B,OAAO,CAACC,IAAI,CACV,CAA+BJ,4BAAAA,EAAAA,aAAa,UAAU,IAAI,CAAC7B,MAAM,CAAA,mCAAA,CACnE,CAAC,CAAA;EAED,QAAA,OAAO,OAAO,CAAA;EAChB,OAAA;EACF,KAAA;MAGA,MAAM,IAAIpB,KAAK,CACb,CAAA,4CAAA,EAA+C,IAAI,CAACoB,MAAM,UAC5D,CAAC,CAAA;EACH,GAAA;IAYA+B,kCAAkCA,CAACxB,KAAK,EAAE;MAGxCA,KAAK,GAAG2B,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,KAAK,CAAC7B,KAAK,CAAC,CAAC,CAAA;EAEnC,IAAA,MAAM8B,OAAO,GAAG,IAAI,CAACC,uBAAuB,EAAE,CAAA;EAE9C,IAAA,IAAID,OAAO,EAAE;QACX,OAAOzC,IAAI,CAAC2C,WAAW,CAACF,OAAO,CAAC,CAAC9B,KAAK,CAAC,CAAA;EACzC,KAAA;EAEA,IAAA,OAAO,OAAO,CAAA;EAChB,GAAA;EAcA+B,EAAAA,uBAAuBA,GAAG;EACxB,IAAA,MAAME,WAAW,GAAG,IAAI,CAACxC,MAAM,CAACnC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;EAI7C,IAAA,KAAK,MAAM4E,UAAU,IAAI7C,IAAI,CAAC8C,cAAc,EAAE;EAC5C,MAAA,MAAMC,SAAS,GAAG/C,IAAI,CAAC8C,cAAc,CAACD,UAAU,CAAC,CAAA;EACjD,MAAA,IAAIE,SAAS,CAACtG,QAAQ,CAAC,IAAI,CAAC2D,MAAM,CAAC,IAAI2C,SAAS,CAACtG,QAAQ,CAACmG,WAAW,CAAC,EAAE;EACtE,QAAA,OAAOC,UAAU,CAAA;EACnB,OAAA;EACF,KAAA;EACF,GAAA;EA6LF,CAAA;EAvba7C,IAAI,CA6RR8C,cAAc,GAAG;IACtBE,MAAM,EAAE,CAAC,IAAI,CAAC;EACdC,EAAAA,OAAO,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;EAC/DC,EAAAA,MAAM,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IACxDC,MAAM,EAAE,CACN,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,EACJ,IAAI,CACL;IACDC,KAAK,EAAE,CAAC,IAAI,CAAC;EACbC,EAAAA,OAAO,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;IACrBC,QAAQ,EAAE,CAAC,IAAI,CAAC;EAChBC,EAAAA,OAAO,EAAE,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC;IAC9BC,KAAK,EAAE,CAAC,IAAI,CAAA;EACd,CAAC,CAAA;EAhUUxD,IAAI,CAgVR2C,WAAW,GAAG;IACnBK,MAAMA,CAACS,CAAC,EAAE;MACR,IAAIA,CAAC,KAAK,CAAC,EAAE;EACX,MAAA,OAAO,MAAM,CAAA;EACf,KAAA;MACA,IAAIA,CAAC,KAAK,CAAC,EAAE;EACX,MAAA,OAAO,KAAK,CAAA;EACd,KAAA;MACA,IAAIA,CAAC,KAAK,CAAC,EAAE;EACX,MAAA,OAAO,KAAK,CAAA;EACd,KAAA;MACA,IAAIA,CAAC,GAAG,GAAG,IAAI,CAAC,IAAIA,CAAC,GAAG,GAAG,IAAI,EAAE,EAAE;EACjC,MAAA,OAAO,KAAK,CAAA;EACd,KAAA;MACA,IAAIA,CAAC,GAAG,GAAG,IAAI,EAAE,IAAIA,CAAC,GAAG,GAAG,IAAI,EAAE,EAAE;EAClC,MAAA,OAAO,MAAM,CAAA;EACf,KAAA;EACA,IAAA,OAAO,OAAO,CAAA;KACf;EACDR,EAAAA,OAAOA,GAAG;EACR,IAAA,OAAO,OAAO,CAAA;KACf;IACDC,MAAMA,CAACO,CAAC,EAAE;MACR,OAAOA,CAAC,KAAK,CAAC,IAAIA,CAAC,KAAK,CAAC,GAAG,KAAK,GAAG,OAAO,CAAA;KAC5C;IACDN,MAAMA,CAACM,CAAC,EAAE;EACR,IAAA,OAAOA,CAAC,KAAK,CAAC,GAAG,KAAK,GAAG,OAAO,CAAA;KACjC;IACDL,KAAKA,CAACK,CAAC,EAAE;MACP,IAAIA,CAAC,KAAK,CAAC,EAAE;EACX,MAAA,OAAO,KAAK,CAAA;EACd,KAAA;MACA,IAAIA,CAAC,KAAK,CAAC,EAAE;EACX,MAAA,OAAO,KAAK,CAAA;EACd,KAAA;EACA,IAAA,IAAIA,CAAC,IAAI,CAAC,IAAIA,CAAC,IAAI,CAAC,EAAE;EACpB,MAAA,OAAO,KAAK,CAAA;EACd,KAAA;EACA,IAAA,IAAIA,CAAC,IAAI,CAAC,IAAIA,CAAC,IAAI,EAAE,EAAE;EACrB,MAAA,OAAO,MAAM,CAAA;EACf,KAAA;EACA,IAAA,OAAO,OAAO,CAAA;KACf;IACDJ,OAAOA,CAACI,CAAC,EAAE;EACT,IAAA,MAAMC,OAAO,GAAGD,CAAC,GAAG,GAAG,CAAA;EACvB,IAAA,MAAME,IAAI,GAAGD,OAAO,GAAG,EAAE,CAAA;EACzB,IAAA,IAAIC,IAAI,KAAK,CAAC,IAAID,OAAO,KAAK,EAAE,EAAE;EAChC,MAAA,OAAO,KAAK,CAAA;EACd,KAAA;EACA,IAAA,IAAIC,IAAI,IAAI,CAAC,IAAIA,IAAI,IAAI,CAAC,IAAI,EAAED,OAAO,IAAI,EAAE,IAAIA,OAAO,IAAI,EAAE,CAAC,EAAE;EAC/D,MAAA,OAAO,KAAK,CAAA;EACd,KAAA;EACA,IAAA,IACEC,IAAI,KAAK,CAAC,IACTA,IAAI,IAAI,CAAC,IAAIA,IAAI,IAAI,CAAE,IACvBD,OAAO,IAAI,EAAE,IAAIA,OAAO,IAAI,EAAG,EAChC;EACA,MAAA,OAAO,MAAM,CAAA;EACf,KAAA;EAGA,IAAA,OAAO,OAAO,CAAA;KACf;IACDJ,QAAQA,CAACG,CAAC,EAAE;EACV,IAAA,IAAIA,CAAC,KAAK,CAAC,IAAIA,CAAC,KAAK,EAAE,EAAE;EACvB,MAAA,OAAO,KAAK,CAAA;EACd,KAAA;EACA,IAAA,IAAIA,CAAC,KAAK,CAAC,IAAIA,CAAC,KAAK,EAAE,EAAE;EACvB,MAAA,OAAO,KAAK,CAAA;EACd,KAAA;EACA,IAAA,IAAKA,CAAC,IAAI,CAAC,IAAIA,CAAC,IAAI,EAAE,IAAMA,CAAC,IAAI,EAAE,IAAIA,CAAC,IAAI,EAAG,EAAE;EAC/C,MAAA,OAAO,KAAK,CAAA;EACd,KAAA;EACA,IAAA,OAAO,OAAO,CAAA;KACf;IACDF,OAAOA,CAACE,CAAC,EAAE;MACT,IAAIA,CAAC,KAAK,CAAC,EAAE;EACX,MAAA,OAAO,KAAK,CAAA;EACd,KAAA;MACA,IAAIA,CAAC,GAAG,OAAO,KAAK,CAAC,IAAIA,CAAC,KAAK,CAAC,EAAE;EAChC,MAAA,OAAO,MAAM,CAAA;EACf,KAAA;EACA,IAAA,OAAO,OAAO,CAAA;KACf;IACDD,KAAKA,CAACC,CAAC,EAAE;MACP,IAAIA,CAAC,KAAK,CAAC,EAAE;EACX,MAAA,OAAO,MAAM,CAAA;EACf,KAAA;MACA,IAAIA,CAAC,KAAK,CAAC,EAAE;EACX,MAAA,OAAO,KAAK,CAAA;EACd,KAAA;MACA,IAAIA,CAAC,KAAK,CAAC,EAAE;EACX,MAAA,OAAO,KAAK,CAAA;EACd,KAAA;MACA,IAAIA,CAAC,KAAK,CAAC,EAAE;EACX,MAAA,OAAO,KAAK,CAAA;EACd,KAAA;MACA,IAAIA,CAAC,KAAK,CAAC,EAAE;EACX,MAAA,OAAO,MAAM,CAAA;EACf,KAAA;EACA,IAAA,OAAO,OAAO,CAAA;EAChB,GAAA;EACF,CAAC;;ECtbH;EACA;EACA;EACA;EACA;EACO,MAAMG,YAAY,SAAS9D,sBAAsB,CAAC;EAiEvD;EACF;EACA;EACA;EACEb,EAAAA,WAAWA,CAAC4E,OAAO,EAAE3D,MAAM,GAAG,EAAE,EAAE;EAChC,IAAA,KAAK,EAAE,CAAA;EAAA,IAAA,IAAA,CApET2D,OAAO,GAAA,KAAA,CAAA,CAAA;EAAA,IAAA,IAAA,CAMP3D,MAAM,GAAA,KAAA,CAAA,CAAA;EAAA,IAAA,IAAA,CAGN4D,IAAI,GAAA,KAAA,CAAA,CAAA;EAAA,IAAA,IAAA,CAGJC,OAAO,GAAA,KAAA,CAAA,CAAA;MAAA,IAMPC,CAAAA,eAAe,GAAG,IAAI,CAAA;MAAA,IAMtBC,CAAAA,WAAW,GAAG,IAAI,CAAA;MAAA,IAMlBC,CAAAA,mBAAmB,GAAG,IAAI,CAAA;MAAA,IAM1BC,CAAAA,QAAQ,GAAG,IAAI,CAAA;MAAA,IAGfC,CAAAA,eAAe,GAAG,CAAC,CAAA;MAAA,IAGnBC,CAAAA,kBAAkB,GAAG,KAAK,CAAA;MAAA,IAG1BC,CAAAA,WAAW,GAAG,IAAI,CAAA;MAAA,IAUlBC,CAAAA,iBAAiB,GAAG,IAAI,CAAA;MAAA,IAMxBC,CAAAA,gBAAgB,GAAG,IAAI,CAAA;EASrB,IAAA,IAAI,EAAEX,OAAO,YAAYY,WAAW,CAAC,EAAE;QACrC,MAAM,IAAIlF,YAAY,CAAC;EACrBG,QAAAA,aAAa,EAAE,gBAAgB;EAC/BE,QAAAA,OAAO,EAAEiE,OAAO;EAChBlE,QAAAA,UAAU,EAAE,0BAAA;EACd,OAAC,CAAC,CAAA;EACJ,KAAA;EAEA,IAAA,MAAMoE,OAAO,GAAGF,OAAO,CAACa,aAAa,CAAC,+BAA+B,CAAC,CAAA;EACtE,IAAA,IAAI,EAAEX,OAAO,YAAYY,iBAAiB,CAAC,EAAE;QAC3C,MAAM,IAAIpF,YAAY,CAAC;EACrBG,QAAAA,aAAa,EAAE,gBAAgB;EAC/BE,QAAAA,OAAO,EAAEmE,OAAO;EAChBlE,QAAAA,YAAY,EAAE,mBAAmB;EACjCF,QAAAA,UAAU,EAAE,0CAAA;EACd,OAAC,CAAC,CAAA;EACJ,KAAA;EAEA,IAAA,IAAI,CAACO,MAAM,GAAGrD,YAAY,CACxB+G,YAAY,CAACgB,QAAQ,EACrB1E,MAAM,EACNtB,gBAAgB,CAACgF,YAAY,EAAEC,OAAO,CAACpG,OAAO,CAChD,CAAC,CAAA;MAED,IAAI,CAACqG,IAAI,GAAG,IAAI9D,IAAI,CAAC,IAAI,CAACE,MAAM,CAAC4D,IAAI,CAAC,CAAA;MACtC,IAAI,CAACD,OAAO,GAAGA,OAAO,CAAA;MACtB,IAAI,CAACE,OAAO,GAAGA,OAAO,CAAA;EAEtB,IAAA,MAAMC,eAAe,GAAG1F,QAAQ,CAACoG,aAAa,CAC5C,mCACF,CAAC,CAAA;MACD,IAAIV,eAAe,YAAYW,iBAAiB,EAAE;QAChD,IAAI,CAACX,eAAe,GAAGA,eAAe,CAAA;EACxC,KAAA;MAEA,IAAI,CAACa,cAAc,EAAE,CAAA;MACrB,IAAI,CAACC,cAAc,EAAE,CAAA;MACrB,IAAI,CAACC,sBAAsB,EAAE,CAAA;MAG7B,IAAI,EAAE,mCAAmC,IAAIzG,QAAQ,CAACC,IAAI,CAACd,OAAO,CAAC,EAAE;EACnEa,MAAAA,QAAQ,CAAC0G,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAACC,cAAc,CAACC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAA;EACxE5G,MAAAA,QAAQ,CAACC,IAAI,CAACd,OAAO,CAAC0H,iCAAiC,GAAG,MAAM,CAAA;EAClE,KAAA;EAKApD,IAAAA,MAAM,CAACiD,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAACI,SAAS,CAACF,IAAI,CAAC,IAAI,CAAC,CAAC,CAAA;EAChE,GAAA;EAOAJ,EAAAA,cAAcA,GAAG;MACf,IAAI,CAACb,WAAW,GAAG3F,QAAQ,CAAC+G,aAAa,CAAC,MAAM,CAAC,CAAA;MACjD,IAAI,CAACpB,WAAW,CAACqB,YAAY,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAA;EAC/C,IAAA,IAAI,CAACrB,WAAW,CAACsB,SAAS,GAAG,uBAAuB,CAAA;MAEpD,IAAI,CAAC1B,OAAO,CAAC2B,WAAW,CAAC,IAAI,CAACvB,WAAW,CAAC,CAAA;EAC5C,GAAA;EAOAc,EAAAA,sBAAsBA,GAAG;EAEvB,IAAA,IAAI,CAAChB,OAAO,CAACiB,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAACS,WAAW,CAACP,IAAI,CAAC,IAAI,CAAC,CAAC,CAAA;MAGnE,IAAI,IAAI,CAAClB,eAAe,EAAE;EACxB,MAAA,IAAI,CAACA,eAAe,CAACgB,gBAAgB,CACnC,OAAO,EACP,IAAI,CAACS,WAAW,CAACP,IAAI,CAAC,IAAI,CAC5B,CAAC,CAAA;EACH,KAAA;EACF,GAAA;EAOAL,EAAAA,cAAcA,GAAG;MAGf,IAAI,CAACX,mBAAmB,GAAG5F,QAAQ,CAAC+G,aAAa,CAAC,KAAK,CAAC,CAAA;EACxD,IAAA,IAAI,CAACnB,mBAAmB,CAACqB,SAAS,GAAG,iCAAiC,CAAA;MACtE,IAAI,CAACrB,mBAAmB,CAACoB,YAAY,CAAC,aAAa,EAAE,MAAM,CAAC,CAAA;MAG5D,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;EAC1B,MAAA,MAAMC,UAAU,GAAGrH,QAAQ,CAAC+G,aAAa,CAAC,KAAK,CAAC,CAAA;QAChDM,UAAU,CAACJ,SAAS,GAAG,uCAAuC,CAAA;EAC9D,MAAA,IAAI,CAACrB,mBAAmB,CAACsB,WAAW,CAACG,UAAU,CAAC,CAAA;EAClD,KAAA;MAGA,IAAI,CAAC5B,OAAO,CAACyB,WAAW,CAAC,IAAI,CAACtB,mBAAmB,CAAC,CAAA;EACpD,GAAA;EAQA0B,EAAAA,eAAeA,GAAG;EAChB,IAAA,IAAI,CAAC,IAAI,CAAC1B,mBAAmB,EAAE;EAC7B,MAAA,OAAA;EACF,KAAA;EAGA,IAAA,IAAI,CAACA,mBAAmB,CAAC1F,SAAS,CAACqH,MAAM,CACvC,0CAA0C,EAC1C,IAAI,CAACzB,eAAe,GAAG,CACzB,CAAC,CAAA;MAGD,MAAM0B,WAAW,GAAG,IAAI,CAAC5B,mBAAmB,CAAC6B,gBAAgB,CAC3D,wCACF,CAAC,CAAA;EACDD,IAAAA,WAAW,CAACE,OAAO,CAAC,CAACL,UAAU,EAAEzH,KAAK,KAAK;EACzCyH,MAAAA,UAAU,CAACnH,SAAS,CAACqH,MAAM,CACzB,2CAA2C,EAC3C3H,KAAK,GAAG,IAAI,CAACkG,eACf,CAAC,CAAA;EACH,KAAC,CAAC,CAAA;EACJ,GAAA;EAUA6B,EAAAA,QAAQA,GAAG;EACT,IAAA,IAAI,CAAC,IAAI,CAAChC,WAAW,EAAE;EACrB,MAAA,OAAA;EACF,KAAA;EAEA,IAAA,IAAI,CAACA,WAAW,CAACiC,WAAW,GAAG,EAAE,CAAA;MAMjC5H,QAAQ,CAACC,IAAI,CAACC,SAAS,CAAC2H,GAAG,CAAC,mCAAmC,CAAC,CAAA;MAChE,IAAI,CAAChC,QAAQ,GAAG7F,QAAQ,CAAC+G,aAAa,CAAC,KAAK,CAAC,CAAA;EAC7C,IAAA,IAAI,CAAClB,QAAQ,CAACoB,SAAS,GAAG,8BAA8B,CAAA;MACxD,IAAI,CAACpB,QAAQ,CAACmB,YAAY,CAAC,MAAM,EAAE,OAAO,CAAC,CAAA;MAK3ChH,QAAQ,CAACC,IAAI,CAACiH,WAAW,CAAC,IAAI,CAACrB,QAAQ,CAAC,CAAA;EACxC,IAAA,IAAI,CAACA,QAAQ,CAAC+B,WAAW,GAAG,IAAI,CAACpC,IAAI,CAACvD,CAAC,CAAC,WAAW,CAAC,CAAA;MAEpDwB,MAAM,CAACqE,QAAQ,CAACC,IAAI,GAAG,IAAI,CAACtC,OAAO,CAACsC,IAAI,CAAA;EAC1C,GAAA;IAaAZ,WAAWA,CAACa,KAAK,EAAE;MACjBA,KAAK,CAACC,cAAc,EAAE,CAAA;MACtB,IAAI,CAACN,QAAQ,EAAE,CAAA;EACjB,GAAA;IASAhB,cAAcA,CAACqB,KAAK,EAAE;EACpB,IAAA,IAAI,CAAC,IAAI,CAACrC,WAAW,EAAE;EACrB,MAAA,OAAA;EACF,KAAA;MAUA,IAAIqC,KAAK,CAACrJ,GAAG,KAAK,OAAO,IAAI,CAAC,IAAI,CAACoH,kBAAkB,EAAE;QACrD,IAAI,CAACD,eAAe,IAAI,CAAC,CAAA;QAGzB,IAAI,CAACwB,eAAe,EAAE,CAAA;QAGtB,IAAI,IAAI,CAACpB,gBAAgB,EAAE;EACzBzC,QAAAA,MAAM,CAACyE,YAAY,CAAC,IAAI,CAAChC,gBAAgB,CAAC,CAAA;UAC1C,IAAI,CAACA,gBAAgB,GAAG,IAAI,CAAA;EAC9B,OAAA;EAEA,MAAA,IAAI,IAAI,CAACJ,eAAe,IAAI,CAAC,EAAE;UAC7B,IAAI,CAACA,eAAe,GAAG,CAAC,CAAA;UAExB,IAAI,IAAI,CAACG,iBAAiB,EAAE;EAC1BxC,UAAAA,MAAM,CAACyE,YAAY,CAAC,IAAI,CAACjC,iBAAiB,CAAC,CAAA;YAC3C,IAAI,CAACA,iBAAiB,GAAG,IAAI,CAAA;EAC/B,SAAA;UAEA,IAAI,CAAC0B,QAAQ,EAAE,CAAA;EACjB,OAAC,MAAM;EACL,QAAA,IAAI,IAAI,CAAC7B,eAAe,KAAK,CAAC,EAAE;EAC9B,UAAA,IAAI,CAACH,WAAW,CAACiC,WAAW,GAAG,IAAI,CAACpC,IAAI,CAACvD,CAAC,CAAC,mBAAmB,CAAC,CAAA;EACjE,SAAC,MAAM;EACL,UAAA,IAAI,CAAC0D,WAAW,CAACiC,WAAW,GAAG,IAAI,CAACpC,IAAI,CAACvD,CAAC,CAAC,kBAAkB,CAAC,CAAA;EAChE,SAAA;EACF,OAAA;QAEA,IAAI,CAACkG,gBAAgB,EAAE,CAAA;EACzB,KAAC,MAAM,IAAI,IAAI,CAAClC,iBAAiB,EAAE;QAGjC,IAAI,CAACmC,kBAAkB,EAAE,CAAA;EAC3B,KAAA;EAGA,IAAA,IAAI,CAACrC,kBAAkB,GAAGiC,KAAK,CAACK,QAAQ,CAAA;EAC1C,GAAA;EAYAF,EAAAA,gBAAgBA,GAAG;MAGjB,IAAI,IAAI,CAAClC,iBAAiB,EAAE;EAC1BxC,MAAAA,MAAM,CAACyE,YAAY,CAAC,IAAI,CAACjC,iBAAiB,CAAC,CAAA;EAC7C,KAAA;EAGA,IAAA,IAAI,CAACA,iBAAiB,GAAGxC,MAAM,CAAC6E,UAAU,CACxC,IAAI,CAACF,kBAAkB,CAACxB,IAAI,CAAC,IAAI,CAAC,EAClC,IAAI,CAACZ,WACP,CAAC,CAAA;EACH,GAAA;EAOAoC,EAAAA,kBAAkBA,GAAG;EACnB,IAAA,IAAI,CAAC,IAAI,CAACzC,WAAW,EAAE;EACrB,MAAA,OAAA;EACF,KAAA;MAEA,IAAI,IAAI,CAACM,iBAAiB,EAAE;EAC1BxC,MAAAA,MAAM,CAACyE,YAAY,CAAC,IAAI,CAACjC,iBAAiB,CAAC,CAAA;QAC3C,IAAI,CAACA,iBAAiB,GAAG,IAAI,CAAA;EAC/B,KAAA;EAEA,IAAA,MAAMN,WAAW,GAAG,IAAI,CAACA,WAAW,CAAA;MAEpC,IAAI,CAACG,eAAe,GAAG,CAAC,CAAA;MACxBH,WAAW,CAACiC,WAAW,GAAG,IAAI,CAACpC,IAAI,CAACvD,CAAC,CAAC,UAAU,CAAC,CAAA;EAEjD,IAAA,IAAI,CAACiE,gBAAgB,GAAGzC,MAAM,CAAC6E,UAAU,CAAC,MAAM;QAC9C3C,WAAW,CAACiC,WAAW,GAAG,EAAE,CAAA;EAC9B,KAAC,EAAE,IAAI,CAAC5B,WAAW,CAAC,CAAA;MAEpB,IAAI,CAACsB,eAAe,EAAE,CAAA;EACxB,GAAA;EAgBAR,EAAAA,SAASA,GAAG;MAEV9G,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACqI,MAAM,CAAC,mCAAmC,CAAC,CAAA;MAEnE,IAAI,IAAI,CAAC1C,QAAQ,EAAE;EACjB,MAAA,IAAI,CAACA,QAAQ,CAAC0C,MAAM,EAAE,CAAA;QACtB,IAAI,CAAC1C,QAAQ,GAAG,IAAI,CAAA;EACtB,KAAA;MAGA,IAAI,IAAI,CAACF,WAAW,EAAE;QACpB,IAAI,CAACA,WAAW,CAACqB,YAAY,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAA;EAC/C,MAAA,IAAI,CAACrB,WAAW,CAACiC,WAAW,GAAG,EAAE,CAAA;EACnC,KAAA;MAGA,IAAI,CAACN,eAAe,EAAE,CAAA;MAGtB,IAAI,IAAI,CAACrB,iBAAiB,EAAE;EAC1BxC,MAAAA,MAAM,CAACyE,YAAY,CAAC,IAAI,CAACjC,iBAAiB,CAAC,CAAA;EAC7C,KAAA;MAEA,IAAI,IAAI,CAACC,gBAAgB,EAAE;EACzBzC,MAAAA,MAAM,CAACyE,YAAY,CAAC,IAAI,CAAChC,gBAAgB,CAAC,CAAA;EAC5C,KAAA;EACF,GAAA;EAkCF,CAAA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EAtdaZ,YAAY,CA2ZhBkD,UAAU,GAAG,sBAAsB,CAAA;EA3Z/BlD,YAAY,CAoahBgB,QAAQ,GAAG1H,MAAM,CAAC6J,MAAM,CAAC;EAC9BjD,EAAAA,IAAI,EAAE;EACJkD,IAAAA,SAAS,EAAE,UAAU;EACrBC,IAAAA,QAAQ,EAAE,yBAAyB;EACnCC,IAAAA,iBAAiB,EAAE,oCAAoC;EACvDC,IAAAA,gBAAgB,EAAE,mCAAA;EACpB,GAAA;EACF,CAAC,CAAC,CAAA;EA3aSvD,YAAY,CAmbhBjG,MAAM,GAAGT,MAAM,CAAC6J,MAAM,CAAC;EAC5BnJ,EAAAA,UAAU,EAAE;EACVkG,IAAAA,IAAI,EAAE;EAAEtH,MAAAA,IAAI,EAAE,QAAA;EAAS,KAAA;EACzB,GAAA;EACF,CAAC,CAAC;;;;;;;;"}