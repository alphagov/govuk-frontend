{"version":3,"file":"character-count.mjs","sources":["../../../../src/govuk/components/character-count/character-count.mjs"],"sourcesContent":["import { closestAttributeValue } from '../../common/closest-attribute-value.mjs'\nimport {\n  formatErrorMessage,\n  mergeConfigs,\n  validateConfig\n} from '../../common/index.mjs'\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs'\nimport { ConfigError, ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\nimport { I18n } from '../../i18n.mjs'\n\n/**\n * Character count component\n *\n * Tracks the number of characters or words in the `.govuk-js-character-count`\n * `<textarea>` inside the element. Displays a message with the remaining number\n * of characters/words available, or the number of characters/words in excess.\n *\n * You can configure the message to only appear after a certain percentage\n * of the available characters/words has been entered.\n *\n * @preserve\n */\nexport class CharacterCount extends GOVUKFrontendComponent {\n  /** @private */\n  $textarea\n\n  /** @private */\n  $visibleCountMessage\n\n  /** @private */\n  $screenReaderCountMessage\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  lastInputTimestamp = null\n\n  /** @private */\n  lastInputValue = ''\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  valueChecker = null\n\n  /**\n   * @private\n   * @type {CharacterCountConfig}\n   */\n  config\n\n  /** @private */\n  i18n\n\n  /** @private */\n  maxLength\n\n  /**\n   * @param {Element | null} $root - HTML element to use for character count\n   * @param {CharacterCountConfig} [config] - Character count config\n   */\n  constructor($root, config = {}) {\n    super($root)\n\n    const $textarea = this.$root.querySelector('.govuk-js-character-count')\n    if (\n      !(\n        $textarea instanceof HTMLTextAreaElement ||\n        $textarea instanceof HTMLInputElement\n      )\n    ) {\n      throw new ElementError({\n        component: CharacterCount,\n        element: $textarea,\n        expectedType: 'HTMLTextareaElement or HTMLInputElement',\n        identifier: 'Form field (`.govuk-js-character-count`)'\n      })\n    }\n\n    // Read config set using dataset ('data-' values)\n    const datasetConfig = normaliseDataset(CharacterCount, this.$root.dataset)\n\n    // To ensure data-attributes take complete precedence, even if they change\n    // the type of count, we need to reset the `maxlength` and `maxwords` from\n    // the JavaScript config.\n    //\n    // We can't mutate `config`, though, as it may be shared across multiple\n    // components inside `initAll`.\n    /** @type {CharacterCountConfig} */\n    let configOverrides = {}\n    if ('maxwords' in datasetConfig || 'maxlength' in datasetConfig) {\n      configOverrides = {\n        maxlength: undefined,\n        maxwords: undefined\n      }\n    }\n\n    this.config = mergeConfigs(\n      CharacterCount.defaults,\n      config,\n      configOverrides,\n      datasetConfig\n    )\n\n    // Check for valid config\n    const errors = validateConfig(CharacterCount.schema, this.config)\n    if (errors[0]) {\n      throw new ConfigError(formatErrorMessage(CharacterCount, errors[0]))\n    }\n\n    this.i18n = new I18n(this.config.i18n, {\n      // Read the fallback if necessary rather than have it set in the defaults\n      locale: closestAttributeValue(this.$root, 'lang')\n    })\n\n    // Determine the limit attribute (characters or words)\n    this.maxLength = this.config.maxwords ?? this.config.maxlength ?? Infinity\n\n    this.$textarea = $textarea\n\n    const textareaDescriptionId = `${this.$textarea.id}-info`\n    const $textareaDescription = document.getElementById(textareaDescriptionId)\n    if (!$textareaDescription) {\n      throw new ElementError({\n        component: CharacterCount,\n        element: $textareaDescription,\n        identifier: `Count message (\\`id=\"${textareaDescriptionId}\"\\`)`\n      })\n    }\n\n    // Inject a description for the textarea if none is present already\n    // for when the component was rendered with no maxlength, maxwords\n    // nor custom textareaDescriptionText\n    if (`${$textareaDescription.textContent}`.match(/^\\s*$/)) {\n      $textareaDescription.textContent = this.i18n.t('textareaDescription', {\n        count: this.maxLength\n      })\n    }\n\n    // Move the textarea description to be immediately after the textarea\n    // Kept for backwards compatibility\n    this.$textarea.insertAdjacentElement('afterend', $textareaDescription)\n\n    // Create the *screen reader* specific live-updating counter\n    // This doesn't need any styling classes, as it is never visible\n    const $screenReaderCountMessage = document.createElement('div')\n    $screenReaderCountMessage.className =\n      'govuk-character-count__sr-status govuk-visually-hidden'\n    $screenReaderCountMessage.setAttribute('aria-live', 'polite')\n    this.$screenReaderCountMessage = $screenReaderCountMessage\n    $textareaDescription.insertAdjacentElement(\n      'afterend',\n      $screenReaderCountMessage\n    )\n\n    // Create our live-updating counter element, copying the classes from the\n    // textarea description for backwards compatibility as these may have been\n    // configured\n    const $visibleCountMessage = document.createElement('div')\n    $visibleCountMessage.className = $textareaDescription.className\n    $visibleCountMessage.classList.add('govuk-character-count__status')\n    $visibleCountMessage.setAttribute('aria-hidden', 'true')\n    this.$visibleCountMessage = $visibleCountMessage\n    $textareaDescription.insertAdjacentElement('afterend', $visibleCountMessage)\n\n    // Hide the textarea description\n    $textareaDescription.classList.add('govuk-visually-hidden')\n\n    // Remove hard limit if set\n    this.$textarea.removeAttribute('maxlength')\n\n    this.bindChangeEvents()\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event.\n    window.addEventListener('pageshow', () => this.updateCountMessage())\n\n    // Although we've set up handlers to sync state on the pageshow event, init\n    // could be called after those events have fired, for example if they are\n    // added to the page dynamically, so update now too.\n    this.updateCountMessage()\n  }\n\n  /**\n   * Bind change events\n   *\n   * Set up event listeners on the $textarea so that the count messages update\n   * when the user types.\n   *\n   * @private\n   */\n  bindChangeEvents() {\n    this.$textarea.addEventListener('keyup', () => this.handleKeyUp())\n\n    // Bind focus/blur events to start/stop polling\n    this.$textarea.addEventListener('focus', () => this.handleFocus())\n    this.$textarea.addEventListener('blur', () => this.handleBlur())\n  }\n\n  /**\n   * Handle key up event\n   *\n   * Update the visible character counter and keep track of when the last update\n   * happened for each keypress\n   *\n   * @private\n   */\n  handleKeyUp() {\n    this.updateVisibleCountMessage()\n    this.lastInputTimestamp = Date.now()\n  }\n\n  /**\n   * Handle focus event\n   *\n   * Speech recognition software such as Dragon NaturallySpeaking will modify\n   * the fields by directly changing its `value`. These changes don't trigger\n   * events in JavaScript, so we need to poll to handle when and if they occur.\n   *\n   * Once the keyup event hasn't been detected for at least 1000 ms (1s), check\n   * if the textarea value has changed and update the count message if it has.\n   *\n   * This is so that the update triggered by the manual comparison doesn't\n   * conflict with debounced KeyboardEvent updates.\n   *\n   * @private\n   */\n  handleFocus() {\n    this.valueChecker = window.setInterval(() => {\n      if (\n        !this.lastInputTimestamp ||\n        Date.now() - 500 >= this.lastInputTimestamp\n      ) {\n        this.updateIfValueChanged()\n      }\n    }, 1000)\n  }\n\n  /**\n   * Handle blur event\n   *\n   * Stop checking the textarea value once the textarea no longer has focus\n   *\n   * @private\n   */\n  handleBlur() {\n    // Cancel value checking on blur\n    if (this.valueChecker) {\n      window.clearInterval(this.valueChecker)\n    }\n  }\n\n  /**\n   * Update count message if textarea value has changed\n   *\n   * @private\n   */\n  updateIfValueChanged() {\n    if (this.$textarea.value !== this.lastInputValue) {\n      this.lastInputValue = this.$textarea.value\n      this.updateCountMessage()\n    }\n  }\n\n  /**\n   * Update count message\n   *\n   * Helper function to update both the visible and screen reader-specific\n   * counters simultaneously (e.g. on init)\n   *\n   * @private\n   */\n  updateCountMessage() {\n    this.updateVisibleCountMessage()\n    this.updateScreenReaderCountMessage()\n  }\n\n  /**\n   * Update visible count message\n   *\n   * @private\n   */\n  updateVisibleCountMessage() {\n    const remainingNumber = this.maxLength - this.count(this.$textarea.value)\n    const isError = remainingNumber < 0\n\n    // If input is over the threshold, remove the disabled class which renders\n    // the counter invisible.\n    this.$visibleCountMessage.classList.toggle(\n      'govuk-character-count__message--disabled',\n      !this.isOverThreshold()\n    )\n\n    // Update styles\n    this.$textarea.classList.toggle('govuk-textarea--error', isError)\n    this.$visibleCountMessage.classList.toggle('govuk-error-message', isError)\n    this.$visibleCountMessage.classList.toggle('govuk-hint', !isError)\n\n    // Update message\n    this.$visibleCountMessage.textContent = this.getCountMessage()\n  }\n\n  /**\n   * Update screen reader count message\n   *\n   * @private\n   */\n  updateScreenReaderCountMessage() {\n    // If over the threshold, remove the aria-hidden attribute, allowing screen\n    // readers to announce the content of the element.\n    if (this.isOverThreshold()) {\n      this.$screenReaderCountMessage.removeAttribute('aria-hidden')\n    } else {\n      this.$screenReaderCountMessage.setAttribute('aria-hidden', 'true')\n    }\n\n    // Update message\n    this.$screenReaderCountMessage.textContent = this.getCountMessage()\n  }\n\n  /**\n   * Count the number of characters (or words, if `config.maxwords` is set)\n   * in the given text\n   *\n   * @private\n   * @param {string} text - The text to count the characters of\n   * @returns {number} the number of characters (or words) in the text\n   */\n  count(text) {\n    if (this.config.maxwords) {\n      const tokens = text.match(/\\S+/g) ?? [] // Matches consecutive non-whitespace chars\n      return tokens.length\n    }\n\n    return text.length\n  }\n\n  /**\n   * Get count message\n   *\n   * @private\n   * @returns {string} Status message\n   */\n  getCountMessage() {\n    const remainingNumber = this.maxLength - this.count(this.$textarea.value)\n    const countType = this.config.maxwords ? 'words' : 'characters'\n    return this.formatCountMessage(remainingNumber, countType)\n  }\n\n  /**\n   * Formats the message shown to users according to what's counted\n   * and how many remain\n   *\n   * @private\n   * @param {number} remainingNumber - The number of words/characaters remaining\n   * @param {string} countType - \"words\" or \"characters\"\n   * @returns {string} Status message\n   */\n  formatCountMessage(remainingNumber, countType) {\n    if (remainingNumber === 0) {\n      return this.i18n.t(`${countType}AtLimit`)\n    }\n\n    const translationKeySuffix =\n      remainingNumber < 0 ? 'OverLimit' : 'UnderLimit'\n\n    return this.i18n.t(`${countType}${translationKeySuffix}`, {\n      count: Math.abs(remainingNumber)\n    })\n  }\n\n  /**\n   * Check if count is over threshold\n   *\n   * Checks whether the value is over the configured threshold for the input.\n   * If there is no configured threshold, it is set to 0 and this function will\n   * always return true.\n   *\n   * @private\n   * @returns {boolean} true if the current count is over the config.threshold\n   *   (or no threshold is set)\n   */\n  isOverThreshold() {\n    // No threshold means we're always above threshold so save some computation\n    if (!this.config.threshold) {\n      return true\n    }\n\n    // Determine the remaining number of characters/words\n    const currentLength = this.count(this.$textarea.value)\n    const maxLength = this.maxLength\n\n    const thresholdValue = (maxLength * this.config.threshold) / 100\n\n    return thresholdValue <= currentLength\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-character-count'\n\n  /**\n   * Character count default config\n   *\n   * @see {@link CharacterCountConfig}\n   * @constant\n   * @type {CharacterCountConfig}\n   */\n  static defaults = Object.freeze({\n    threshold: 0,\n    i18n: {\n      // Characters\n      charactersUnderLimit: {\n        one: 'You have %{count} character remaining',\n        other: 'You have %{count} characters remaining'\n      },\n      charactersAtLimit: 'You have 0 characters remaining',\n      charactersOverLimit: {\n        one: 'You have %{count} character too many',\n        other: 'You have %{count} characters too many'\n      },\n      // Words\n      wordsUnderLimit: {\n        one: 'You have %{count} word remaining',\n        other: 'You have %{count} words remaining'\n      },\n      wordsAtLimit: 'You have 0 words remaining',\n      wordsOverLimit: {\n        one: 'You have %{count} word too many',\n        other: 'You have %{count} words too many'\n      },\n      textareaDescription: {\n        other: ''\n      }\n    }\n  })\n\n  /**\n   * Character count config schema\n   *\n   * @constant\n   * @satisfies {Schema}\n   */\n  static schema = Object.freeze({\n    properties: {\n      i18n: { type: 'object' },\n      maxwords: { type: 'number' },\n      maxlength: { type: 'number' },\n      threshold: { type: 'number' }\n    },\n    anyOf: [\n      {\n        required: ['maxwords'],\n        errorMessage: 'Either \"maxlength\" or \"maxwords\" must be provided'\n      },\n      {\n        required: ['maxlength'],\n        errorMessage: 'Either \"maxlength\" or \"maxwords\" must be provided'\n      }\n    ]\n  })\n}\n\n/**\n * Character count config\n *\n * @see {@link CharacterCount.defaults}\n * @typedef {object} CharacterCountConfig\n * @property {number} [maxlength] - The maximum number of characters.\n *   If maxwords is provided, the maxlength option will be ignored.\n * @property {number} [maxwords] - The maximum number of words. If maxwords is\n *   provided, the maxlength option will be ignored.\n * @property {number} [threshold=0] - The percentage value of the limit at\n *   which point the count message is displayed. If this attribute is set, the\n *   count message will be hidden by default.\n * @property {CharacterCountTranslations} [i18n=CharacterCount.defaults.i18n] - Character count translations\n */\n\n/**\n * Character count translations\n *\n * @see {@link CharacterCount.defaults.i18n}\n * @typedef {object} CharacterCountTranslations\n *\n * Messages shown to users as they type. It provides feedback on how many words\n * or characters they have remaining or if they are over the limit. This also\n * includes a message used as an accessible description for the textarea.\n * @property {TranslationPluralForms} [charactersUnderLimit] - Message displayed\n *   when the number of characters is under the configured maximum, `maxlength`.\n *   This message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining characters. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {string} [charactersAtLimit] - Message displayed when the number of\n *   characters reaches the configured maximum, `maxlength`. This message is\n *   displayed visually and through assistive technologies.\n * @property {TranslationPluralForms} [charactersOverLimit] - Message displayed\n *   when the number of characters is over the configured maximum, `maxlength`.\n *   This message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining characters. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {TranslationPluralForms} [wordsUnderLimit] - Message displayed when\n *   the number of words is under the configured maximum, `maxlength`. This\n *   message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining words. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {string} [wordsAtLimit] - Message displayed when the number of\n *   words reaches the configured maximum, `maxlength`. This message is\n *   displayed visually and through assistive technologies.\n * @property {TranslationPluralForms} [wordsOverLimit] - Message displayed when\n *   the number of words is over the configured maximum, `maxlength`. This\n *   message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining words. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {TranslationPluralForms} [textareaDescription] - Message made\n *   available to assistive technologies, if none is already present in the\n *   HTML, to describe that the component accepts only a limited amount of\n *   content. It is visible on the page when JavaScript is unavailable. The\n *   component will replace the `%{count}` placeholder with the value of the\n *   `maxlength` or `maxwords` parameter.\n */\n\n/**\n * @typedef {import('../../common/index.mjs').Schema} Schema\n * @typedef {import('../../i18n.mjs').TranslationPluralForms} TranslationPluralForms\n */\n"],"names":["CharacterCount","GOVUKFrontendComponent","constructor","$root","config","_ref","_this$config$maxwords","$textarea","$visibleCountMessage","$screenReaderCountMessage","lastInputTimestamp","lastInputValue","valueChecker","i18n","maxLength","querySelector","HTMLTextAreaElement","HTMLInputElement","ElementError","component","element","expectedType","identifier","datasetConfig","normaliseDataset","dataset","configOverrides","maxlength","undefined","maxwords","mergeConfigs","defaults","errors","validateConfig","schema","ConfigError","formatErrorMessage","I18n","locale","closestAttributeValue","Infinity","textareaDescriptionId","id","$textareaDescription","document","getElementById","textContent","match","t","count","insertAdjacentElement","createElement","className","setAttribute","classList","add","removeAttribute","bindChangeEvents","window","addEventListener","updateCountMessage","handleKeyUp","handleFocus","handleBlur","updateVisibleCountMessage","Date","now","setInterval","updateIfValueChanged","clearInterval","value","updateScreenReaderCountMessage","remainingNumber","isError","toggle","isOverThreshold","getCountMessage","text","_text$match","tokens","length","countType","formatCountMessage","translationKeySuffix","Math","abs","threshold","currentLength","thresholdValue","moduleName","Object","freeze","charactersUnderLimit","one","other","charactersAtLimit","charactersOverLimit","wordsUnderLimit","wordsAtLimit","wordsOverLimit","textareaDescription","properties","type","anyOf","required","errorMessage"],"mappings":"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"}