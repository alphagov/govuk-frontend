{"version":3,"file":"password-input.mjs","sources":["../../../../src/govuk/components/password-input/password-input.mjs"],"sourcesContent":["import { closestAttributeValue } from '../../common/closest-attribute-value.mjs'\nimport { mergeConfigs } from '../../common/index.mjs'\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\nimport { I18n } from '../../i18n.mjs'\n\n/**\n * Password input component\n *\n * @preserve\n */\nexport class PasswordInput extends GOVUKFrontendComponent {\n  /**\n   * @private\n   * @type {PasswordInputConfig}\n   */\n  config\n\n  /** @private */\n  i18n\n\n  /**\n   * @private\n   * @type {HTMLInputElement}\n   */\n  $input\n\n  /**\n   * @private\n   * @type {HTMLButtonElement}\n   */\n  $showHideButton\n\n  /** @private */\n  $screenReaderStatusMessage\n\n  /**\n   * @param {Element | null} $root - HTML element to use for password input\n   * @param {PasswordInputConfig} [config] - Password input config\n   */\n  constructor($root, config = {}) {\n    super($root)\n\n    const $input = this.$root.querySelector('.govuk-js-password-input-input')\n    if (!($input instanceof HTMLInputElement)) {\n      throw new ElementError({\n        component: PasswordInput,\n        element: $input,\n        expectedType: 'HTMLInputElement',\n        identifier: 'Form field (`.govuk-js-password-input-input`)'\n      })\n    }\n\n    if ($input.type !== 'password') {\n      throw new ElementError(\n        'Password input: Form field (`.govuk-js-password-input-input`) must be of type `password`.'\n      )\n    }\n\n    const $showHideButton = this.$root.querySelector(\n      '.govuk-js-password-input-toggle'\n    )\n    if (!($showHideButton instanceof HTMLButtonElement)) {\n      throw new ElementError({\n        component: PasswordInput,\n        element: $showHideButton,\n        expectedType: 'HTMLButtonElement',\n        identifier: 'Button (`.govuk-js-password-input-toggle`)'\n      })\n    }\n\n    if ($showHideButton.type !== 'button') {\n      throw new ElementError(\n        'Password input: Button (`.govuk-js-password-input-toggle`) must be of type `button`.'\n      )\n    }\n\n    this.$input = $input\n    this.$showHideButton = $showHideButton\n\n    this.config = mergeConfigs(\n      PasswordInput.defaults,\n      config,\n      normaliseDataset(PasswordInput, this.$root.dataset)\n    )\n\n    this.i18n = new I18n(this.config.i18n, {\n      // Read the fallback if necessary rather than have it set in the defaults\n      locale: closestAttributeValue(this.$root, 'lang')\n    })\n\n    // Show the toggle button element\n    this.$showHideButton.removeAttribute('hidden')\n\n    // Create and append the status text for screen readers.\n    // This is injected between the input and button so that users get a sensible reading order if\n    // moving through the page content linearly:\n    // [password input] -> [your password is visible/hidden] -> [show/hide password]\n    const $screenReaderStatusMessage = document.createElement('div')\n    $screenReaderStatusMessage.className =\n      'govuk-password-input__sr-status govuk-visually-hidden'\n    $screenReaderStatusMessage.setAttribute('aria-live', 'polite')\n    this.$screenReaderStatusMessage = $screenReaderStatusMessage\n    this.$input.insertAdjacentElement('afterend', $screenReaderStatusMessage)\n\n    // Bind toggle button\n    this.$showHideButton.addEventListener('click', this.toggle.bind(this))\n\n    // Bind event to revert the password visibility to hidden\n    if (this.$input.form) {\n      this.$input.form.addEventListener('submit', () => this.hide())\n    }\n\n    // If the page is restored from bfcache and the password is visible, hide it again\n    window.addEventListener('pageshow', (event) => {\n      if (event.persisted && this.$input.type !== 'password') {\n        this.hide()\n      }\n    })\n\n    // Default the component to having the password hidden.\n    this.hide()\n  }\n\n  /**\n   * Toggle the visibility of the password input\n   *\n   * @private\n   * @param {MouseEvent} event - Click event\n   */\n  toggle(event) {\n    event.preventDefault()\n\n    // If on this click, the field is type=\"password\", show the value\n    if (this.$input.type === 'password') {\n      this.show()\n      return\n    }\n\n    // Otherwise, hide it\n    // Being defensive - hiding should always be the default\n    this.hide()\n  }\n\n  /**\n   * Show the password input value in plain text.\n   *\n   * @private\n   */\n  show() {\n    this.setType('text')\n  }\n\n  /**\n   * Hide the password input value.\n   *\n   * @private\n   */\n  hide() {\n    this.setType('password')\n  }\n\n  /**\n   * Set the password input type\n   *\n   * @param {'text' | 'password'} type - Input type\n   * @private\n   */\n  setType(type) {\n    if (type === this.$input.type) {\n      return\n    }\n\n    // Update input type\n    this.$input.setAttribute('type', type)\n\n    const isHidden = type === 'password'\n    const prefixButton = isHidden ? 'show' : 'hide'\n    const prefixStatus = isHidden ? 'passwordHidden' : 'passwordShown'\n\n    // Update button text\n    this.$showHideButton.innerText = this.i18n.t(`${prefixButton}Password`)\n\n    // Update button aria-label\n    this.$showHideButton.setAttribute(\n      'aria-label',\n      this.i18n.t(`${prefixButton}PasswordAriaLabel`)\n    )\n\n    // Update status change text\n    this.$screenReaderStatusMessage.innerText = this.i18n.t(\n      `${prefixStatus}Announcement`\n    )\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-password-input'\n\n  /**\n   * Password input default config\n   *\n   * @see {@link PasswordInputConfig}\n   * @constant\n   * @default\n   * @type {PasswordInputConfig}\n   */\n  static defaults = Object.freeze({\n    i18n: {\n      showPassword: 'Show',\n      hidePassword: 'Hide',\n      showPasswordAriaLabel: 'Show password',\n      hidePasswordAriaLabel: 'Hide password',\n      passwordShownAnnouncement: 'Your password is visible',\n      passwordHiddenAnnouncement: 'Your password is hidden'\n    }\n  })\n\n  /**\n   * Password input config schema\n   *\n   * @constant\n   * @satisfies {Schema}\n   */\n  static schema = Object.freeze({\n    properties: {\n      i18n: { type: 'object' }\n    }\n  })\n}\n\n/**\n * Password input config\n *\n * @typedef {object} PasswordInputConfig\n * @property {PasswordInputTranslations} [i18n=PasswordInput.defaults.i18n] - Password input translations\n */\n\n/**\n * Password input translations\n *\n * @see {@link PasswordInput.defaults.i18n}\n * @typedef {object} PasswordInputTranslations\n *\n * Messages displayed to the user indicating the state of the show/hide toggle.\n * @property {string} [showPassword] - Visible text of the button when the\n *   password is currently hidden. Plain text only.\n * @property {string} [hidePassword] - Visible text of the button when the\n *   password is currently visible. Plain text only.\n * @property {string} [showPasswordAriaLabel] - aria-label of the button when\n *   the password is currently hidden. Plain text only.\n * @property {string} [hidePasswordAriaLabel] - aria-label of the button when\n *   the password is currently visible. Plain text only.\n * @property {string} [passwordShownAnnouncement] - Screen reader\n *   announcement to make when the password has just become visible.\n *   Plain text only.\n * @property {string} [passwordHiddenAnnouncement] - Screen reader\n *   announcement to make when the password has just been hidden.\n *   Plain text only.\n */\n\n/**\n * @typedef {import('../../common/index.mjs').Schema} Schema\n * @typedef {import('../../i18n.mjs').TranslationPluralForms} TranslationPluralForms\n */\n"],"names":["PasswordInput","GOVUKFrontendComponent","constructor","$root","config","i18n","$input","$showHideButton","$screenReaderStatusMessage","querySelector","HTMLInputElement","ElementError","component","element","expectedType","identifier","type","HTMLButtonElement","mergeConfigs","defaults","normaliseDataset","dataset","I18n","locale","closestAttributeValue","removeAttribute","document","createElement","className","setAttribute","insertAdjacentElement","addEventListener","toggle","bind","form","hide","window","event","persisted","preventDefault","show","setType","isHidden","prefixButton","prefixStatus","innerText","t","moduleName","Object","freeze","showPassword","hidePassword","showPasswordAriaLabel","hidePasswordAriaLabel","passwordShownAnnouncement","passwordHiddenAnnouncement","schema","properties"],"mappings":"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"}