@import "../settings/colours-palette";
@import "../settings/colours-organisations";
@import "../settings/warnings";

////
/// @group helpers/colour
////

/// Get colour
///
/// @param {String | Colour} $colour - Name of colour from the colour palette
///   (`$_govuk-palette`)
/// @param {String | Colour} $variant - Name of the variant from the colour palette
///   (`$_govuk-palette`)
/// @return {Colour} Representation of named colour
///
/// @throw if `$colour` is not a colour from the colour palette
/// @throw if `$variant` is not a variant of the `$colour` in the colour palette
/// @throw if the palette is misformatted and doesn't associate a colour or map to `$colour`
/// @access public

@function govuk-colour($colour, $variant: primary, $colours: $_govuk-palette) {
  // Sass parses unquoted colours as colours, so we need to turn them into
  // strings before looking them up in the colour palette
  // https://sass-lang.com/documentation/values/strings#unquoted
  @if type-of($colour) != "string" {
    $colour: "#{$colour}";
  }

  $colour-variants: map-get($colours, $colour);

  @if not $colour-variants {
    // To ease the transition between the brand palette and old GOV.UK Frontend colours
    // we'll automatically convert old colour names into their equivalent in the palette
    @if $colours == $_govuk-palette {
      $corresponding-colour: _govuk-corresponding-brand-colour($colour);
      @if $corresponding-colour {
        @return $corresponding-colour;
      }
    }

    @error "Unknown colour `#{$colour}` (available colours: #{map-keys($colours)})";
  }

  // Some colours may not have variants, if that's the case, we can return the colour straight away
  @if type-of($colour-variants) == "color" {
    @return $colour-variants;
  }

  @if type-of($colour-variants) != "map" {
    @error "Colour `#{$colour}` should either be a `map` or `color`, not a `#{type-of($colour-variants)}`";
  }

  $result: map-get($colour-variants, $variant);

  @if not $result {
    @error "Unknown variant `#{$variant}` for colour `#{$colour}` (available variants: #{map-keys($colour-variants)})";
  }

  @return $result;
}

@function _govuk-corresponding-brand-colour($colour) {
  $pre-brand-colour: map-get($_govuk-pre-brand-colours, $colour);

  @if $pre-brand-colour {
    $corresponding-colour: nth($pre-brand-colour, 1);
    $corresponding-variant: nth($pre-brand-colour, 2);

    $corresponding-govuk-colour-call: 'govuk-colour("#{$corresponding-colour}", $variant: "#{$corresponding-variant}")';

    @return govuk-colour($corresponding-colour, $variant: $corresponding-variant);
  }
}

/// Get the colour for a government organisation
///
/// @param {String} $organisation - Organisation name, lowercase, hyphenated
/// @param {Boolean} $websafe - Deprecated. Use $contrast-safe instead.
/// @param {Boolean} $contrast-safe [true] - By default a version of the colour
///   will be returned which has a minimum 4.5:1 contrast ratio when used with
///   white, as per the WCAG 2.1 Level AA guidelines. If you want to use the
///   non-contrast safe version you can set this to `false` but your should
///   ensure that you still meets contrast requirements for accessibility -
///   for example, do not use the non-contrast safe version for text.
///
/// @return {Colour} Representation of colour for organisation
/// @throw if `$organisation` is not a known organisation
/// @access public

@function govuk-organisation-colour($organisation, $websafe: null, $contrast-safe: true) {
  // Check if the $organisation exists in the aliases map. If so, change the
  // value of $organisation to the aliased value.
  @if map-has-key($_govuk_colours-organisations-aliases, $organisation) {
    $organisation: map-get($_govuk_colours-organisations-aliases, $organisation);
  }

  // Check to see if the organisation exists
  @if not map-has-key($govuk-colours-organisations, $organisation) {
    @error "Unknown organisation `#{$organisation}`";
  }

  // Output a deprecation warning if the legacy colour palette is being used.
  // Remove in next major version.
  $is-legacy: $govuk-colours-organisations == $_govuk-legacy-organisation-colours;
  @if $is-legacy and _should-warn("legacy-organisation-colours") {
    @warn _warning-text("legacy-organisation-colours",
      "We've updated the organisation colour palette. Opt in to the new " +
      "colours using `$govuk-new-organisation-colours: true`. The old " +
      "palette is deprecated and we'll remove it in the next major version."
    );
  }

  // Output a warning if $websafe is set.
  @if $websafe and _should-warn("organisation-colour-websafe-param") {
    @warn _warning-text("organisation-colour-websafe-param",
      "The `$websafe` parameter of `govuk-organisation-colour` has been " +
      "renamed to `$contrast-safe`. The old parameter name will be removed in " +
      "the next major version."
    );
  }

  $org-colour: map-get($govuk-colours-organisations, $organisation);

  @if map-has-key($org-colour, deprecation-message) and _should-warn("organisation-colours") {
    @warn _warning-text(
      "organisation-colours",
      map-get($org-colour, deprecation-message)
    );
  }

  // If the $websafe parameter is being used (it has been explicitly set as true
  // or false), assume the user hasn't updated to use $contrast-safe yet and map
  // the old parameter's value onto the new parameter.
  @if type-of($websafe) != "null" {
    $contrast-safe: $websafe;
  }

  // Determine the contrast-safe key to use depending on whether it's the new
  // palette or the legacy palette
  $safe-key: if($govuk-new-organisation-colours, "contrast-safe", "colour-websafe");

  @if $contrast-safe and map-has-key($org-colour, $safe-key) {
    @return map-get($org-colour, $safe-key);
  } @else {
    @return map-get($org-colour, colour);
  }
}

/// Make a colour darker by mixing it with black
///
/// @param {Colour} $colour - colour to shade
/// @param {Number} $percentage - percentage of black to mix with $colour
/// @return {Colour}
/// @access public

@function govuk-shade($colour, $percentage) {
  // Ensure the output is a hex string so that Safari <12 can render the colour
  // without issues from float values in `rgb()`
  @return _as-hexadecimal(mix(#000000, $colour, $percentage));
}

/// Make a colour lighter by mixing it with white
///
/// @param {Colour} $colour - colour to tint
/// @param {Number} $percentage - percentage of white to mix with $colour
/// @return {Colour}
/// @access public

@function govuk-tint($colour, $percentage) {
  // Ensure the output is a hex string so that Safari <12 can render the colour
  // without issues from float values in `rgb()`
  @return _as-hexadecimal(mix(govuk-colour("white"), $colour, $percentage));
}

/// Converts a colour with potential float values for its RGB channels
/// into hexadecimal notation
///
/// This ensures the colour is rendered properly by Safari < 12
///
/// @param {Colour} $colour - The colour to convert
/// @return {Colour}
/// @access private
@function _as-hexadecimal($colour) {
  @if not function-exists(change-color) {
    @return $colour;
  }

  // `red`,`green` and `blue` functions are limited to 'legacy' colour spaces
  // ensuring we don't get floating computations on them
  $parts: (
    "red": red($colour),
    "green": green($colour),
    "blue": blue($colour),
    "alpha": alpha($colour)
  );

  @return change-color($colour, $parts...);
}
